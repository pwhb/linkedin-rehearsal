[{"id":1,"question":"Which type cast preserves the mathematical value in all cases?","code":"","reference":"","choices":[{"text":"i64 as i32","answer":false,"code":false},{"text":"usize as u64","answer":false,"code":false},{"text":"i32 as i64","answer":true,"code":false},{"text":"f64 as f32","answer":false,"code":false}]},{"id":2,"question":"What do the vertical bars represent here?","code":"rust str::thread::spawn(|| {     println!(\"LinkedIn\"); });","reference":"```","choices":[{"text":"a closure","answer":true,"code":false},{"text":"a thread","answer":false,"code":false},{"text":"a future","answer":false,"code":false},{"text":"a block","answer":false,"code":false}]},{"id":3,"question":"Which choice is not a scalar data type?","code":"","reference":"","choices":[{"text":"integer","answer":false,"code":false},{"text":"float","answer":false,"code":false},{"text":"boolean","answer":false,"code":false},{"text":"tuple","answer":true,"code":false}]},{"id":4,"question":"**_** cannot be destructured.","code":"","reference":"","choices":[{"text":"Traits","answer":true,"code":false},{"text":"Tuples","answer":false,"code":false},{"text":"Enums","answer":false,"code":false},{"text":"Structs","answer":false,"code":false}]},{"id":5,"question":"Which `cargo` command checks a program for error without creating a binary executable?","code":"","reference":"","choices":[{"text":"cargo --version","answer":false,"code":false},{"text":"cargo init","answer":false,"code":false},{"text":"cargo build","answer":false,"code":false},{"text":"cargo check","answer":true,"code":false}]},{"id":6,"question":"The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?","code":"","reference":"","choices":[{"text":"It's creating a pointer on the heap that points to a value on the stack.","answer":false,"code":false},{"text":"It's creating a pointer on the stack that points to a value on the heap.","answer":true,"code":false},{"text":"It's creating a memory guard around values to prevent illegal access.","answer":false,"code":false},{"text":"It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled.","answer":false,"code":false}]},{"id":7,"question":"What is an alternative way of writing `slice` that produces the same result?","code":"rust ... let s = String::form(\"hello\"); let slice = &s[0..2];","reference":"```","choices":[{"text":"let slice = &s[len + 2];","answer":false,"code":false},{"text":"let slice = &s[len - 2];","answer":false,"code":false},{"text":"let slice = &s.copy(0..2);","answer":false,"code":false},{"text":"let slice = &s[..2];","answer":true,"code":false}]},{"id":8,"question":"Using the `?` operator at the end of an expression is equivalent to **_**.","code":"","reference":"","choices":[{"text":"a match pattern that branches into True or False","answer":false,"code":false},{"text":"calling ok_error()","answer":false,"code":false},{"text":"calling panic!()","answer":false,"code":false},{"text":"a match pattern that may result an early return","answer":true,"code":false}]},{"id":9,"question":"Which is valid syntax for defining an array of i32 values?","code":"","reference":"","choices":[{"text":"Array<i32>::with_capacity(10)","answer":false,"code":false},{"text":"[i32]","answer":false,"code":false},{"text":"Array<i32>::new(10)","answer":false,"code":false},{"text":"[i32; 10]","answer":true,"code":false}]},{"id":10,"question":"What syntax is required to take a mutable reference to T, when used within a function argument?","code":"rust fn increment(i: T) {     // body elided }","reference":"```","choices":[{"text":"*mut T","answer":false,"code":false},{"text":"mut ref T","answer":false,"code":false},{"text":"mut &T","answer":false,"code":false},{"text":"&mut T","answer":true,"code":false}]},{"id":11,"question":"The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?","code":"","reference":"","choices":[{"text":".add()","answer":false,"code":false},{"text":".incr()","answer":false,"code":false},{"text":".clone()","answer":true,"code":false},{"text":".increment()","answer":false,"code":false}]},{"id":12,"question":"What happens when an error occurs that is being handled by the question mark (?) operator?","code":"","reference":"","choices":[{"text":"The error is reported and execution continues.","answer":false,"code":false},{"text":"An exception is raised. The effect(s) of the exception are defined by the error! macro.","answer":false,"code":false},{"text":"The program panics immediately.","answer":false,"code":false},{"text":"Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics.","answer":true,"code":false}]},{"id":13,"question":"Which comment syntax is not legal?","code":"","reference":"","choices":[{"text":"`/*`","answer":false,"code":false},{"text":"`#`","answer":true,"code":false},{"text":"`//!`","answer":false,"code":false},{"text":"`//`","answer":false,"code":false}]},{"id":14,"question":"In matching patterns, values are ignored with _.","code":"","reference":"","choices":[{"text":"`.ignore()`","answer":false,"code":false},{"text":"`an underscore (_)`","answer":false,"code":false},{"text":"..","answer":true,"code":false},{"text":"skip","answer":false,"code":false}]},{"id":15,"question":"Defining a _ requires a lifetime parameter.","code":"","reference":"","choices":[{"text":"function that ends the lifetime of one of its arguments","answer":false,"code":false},{"text":"struct that contains a reference to a value","answer":true,"code":false},{"text":"function with a generic argument","answer":false,"code":false},{"text":"struct that contains a reference to a boxed value","answer":false,"code":false}]},{"id":16,"question":"Which example correctly uses std::collections::HashMap's Entry API to populate counts?","code":"rust use std::collections::HashMap; fn main() {     let mut counts = HashMap::new();     let text = \"LinkedIn Learning\";     for c in text.chars() {         // Complete this block     }     println!(\"{:?}\", counts); }  rust for c in text.chars() {     if let Some(count) = &mut counts.get(&c) {         counts.insert(c, *count + 1);     } else {         counts.insert(c, 1);     }; }  rust for c in text.chars() {     let count = counts.entry(c).or_insert(0);     *count += 1; }  rust for c in text.chars() {     let count = counts.entry(c);     *count += 1; }  rust for c in text.chars() {     counts.entry(c).or_insert(0).map(|x| x + 1); }","choices":[{"text":"rust\nfor c in text.chars() {\n    if let Some(count) = &mut counts.get(&c) {\n        counts.insert(c, *count + 1);\n    } else {\n        counts.insert(c, 1);\n    };\n}\n","code":true,"answer":false},{"text":"rust\nfor c in text.chars() {\n    let count = counts.entry(c).or_insert(0);\n    *count += 1;\n}\n","code":true,"answer":true},{"text":"rust\nfor c in text.chars() {\n    let count = counts.entry(c);\n    *count += 1;\n}\n","code":true,"answer":false},{"text":"rust\nfor c in text.chars() {\n    counts.entry(c).or_insert(0).map(|x| x + 1);\n}\n","code":true,"answer":false}]},{"id":17,"question":"Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?","code":"rust use std::collections::HashMap; fn main() -> Result<(), Box<dyn std::error::Error>> {     let mut v = Vec::<u8>::new();     let a = \"LinkedIn\";     let b = 123;     let c = 'ðŸ§€';     // replace this line     println!(\"{:?}\", v);     Ok(()) }  rust write!(&mut v, \"{}{}{}\", a, b, c)?;  rust v.write(a)?; v.write(b)?; v.write(c)?;  rust v.write(a, b, c)?;  rust v.write_all(a.as_bytes())?; v.write_all(&b.to_string().as_bytes())?; c.encode_utf8(&mut v);  1. [Answered in rust user forum](https://users.rust-lang.org/t/formatting-and-writing-to-a-file-without-malloc-or-locks/52295/9) 2. [reference](https://doc.rust-lang.org/std/macro.write.html)","choices":[{"text":"rust\nwrite!(&mut v, \"{}{}{}\", a, b, c)?;\n","code":true,"answer":true},{"text":"rust\nv.write(a)?;\nv.write(b)?;\nv.write(c)?;\n","code":true,"answer":false},{"text":"rust\nv.write(a, b, c)?;\n","code":true,"answer":false},{"text":"rust\nv.write_all(a.as_bytes())?;\nv.write_all(&b.to_string().as_bytes())?;\nc.encode_utf8(&mut v);\n","code":true,"answer":false}]},{"id":18,"question":"Does the `main` function compile? If so, why? If not, what do you need to change?","code":"rust fn main() {     let Some(x) = some_option_value; }","reference":"```","choices":[{"text":"The code does not compile. `let` statements require a refutable pattern. Add `if` before `let`.","answer":false,"code":false},{"text":"The code compiles. `let` statements sometimes require a refutable pattern.","answer":false,"code":false},{"text":"The code does not compile. `let` statements requires an irrefutable pattern. Add `if` before `let`.","answer":true,"code":false},{"text":"The code compiles. `let` do not require a refutable pattern.","answer":false,"code":false}]},{"id":19,"question":"Which statement about lifetimes is false?","code":"","reference":"","choices":[{"text":"Lifetimes were redundantly specified in previous version of Rust.","answer":false,"code":false},{"text":"Lifetimes are specified when a struct is holding a reference to a value.","answer":false,"code":false},{"text":"Lifetimes are specified when certain values must outlive others.","answer":false,"code":false},{"text":"Lifetimes are always inferred by the compiler.","answer":true,"code":false}]},{"id":20,"question":"When used as a return type, which Rust type plays a similar role to Python's `None`, JavaScript's `null`, or the `void` type in C/C++?","code":"","reference":"","choices":[{"text":"`!`","answer":false,"code":false},{"text":"`None`","answer":false,"code":false},{"text":"`Null`","answer":false,"code":false},{"text":"`()`","answer":true,"code":false}]},{"id":21,"question":"To convert a `Result` to an `Option`, which method should you use?","code":"","reference":"","choices":[{"text":"`.as_option()`","answer":false,"code":false},{"text":"`.ok()`","answer":true,"code":false},{"text":"`.to_option()`","answer":false,"code":false},{"text":"`.into()`","answer":false,"code":false}]},{"id":22,"question":"Which statement about the `Clone` and `Copy` traits is false?","code":"","reference":"","choices":[{"text":"`Copy` is enabled for primitive, built-in types.","answer":true,"code":false},{"text":"Without `Copy`, Rust applies move semantics to a type's access.","answer":false,"code":false},{"text":"When using `Clone`, copying data is explicit.","answer":false,"code":false},{"text":"Until a type implements either `Copy` or `Clone`, its internal data cannot be copied.","answer":false,"code":false}]},{"id":23,"question":"Why does this code _not_ compile?","code":"rust fn returns_closure() -> dyn Fn(i32) -> i32 {     |x| x + 1 }","reference":"```","choices":[{"text":"The returned `fn` pointer and value need to be represented by another trait.","answer":false,"code":false},{"text":"Closures are types, so they cannot be returned directly from a function.","answer":false,"code":false},{"text":"Closures are types and can be returned only if the concrete trait is implemented.","answer":false,"code":false},{"text":"Closures are represented by traits, so they cannot be a return type.","answer":true,"code":false}]},{"id":24,"question":"What smart pointer is used to allow multiple ownership of a value in various threads?","code":"","reference":"","choices":[{"text":"`Arc<T>`","answer":true,"code":false},{"text":"`Box<T>`","answer":false,"code":false},{"text":"Both `Arc<T>` and `Rc<T>` are multithread safe.","answer":false,"code":false},{"text":"`Rc<T>`","answer":false,"code":false}]},{"id":25,"question":"Which types are _not_ allowed within an enum variant's body?","code":"","reference":"","choices":[{"text":"zero-sized types","answer":false,"code":false},{"text":"structs","answer":false,"code":false},{"text":"trait objects","answer":true,"code":false},{"text":"floating-point numbers","answer":false,"code":false}]},{"id":26,"question":"Which statement about this code is true?","code":"rust fn main() {     let c = 'z';     let heart_eyed_cat = 'ðŸ˜»'; }","reference":"```","choices":[{"text":"Both are character literals.","answer":true,"code":false},{"text":"`heart_eyed_cat` is an invalid expression.","answer":false,"code":false},{"text":"`c` is a string literal and `heart_eyed_cat` is a character literal.","answer":false,"code":false},{"text":"Both are string literals.","answer":false,"code":false}]},{"id":27,"question":"Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?","code":"","reference":"","choices":[{"text":"`Mutex<Arc<T>>`","answer":false,"code":false},{"text":"`Rc<Mutex<T>>`","answer":false,"code":false},{"text":"`Arc<Mutex<T>>`","answer":true,"code":false},{"text":"`Mutex<Rc<T>>`","answer":false,"code":false}]},{"id":28,"question":"Which idiom can be used to concatenate the strings `a`, `b`, `c`?","code":"rust let a = \"a\".to_string(); let b = \"b\".to_string(); let c = \"c\".to_string();","reference":"```","choices":[{"text":"`String::from(a,b,c)`","answer":false,"code":false},{"text":"`format!(\"{}{}{}\", a, b, c)`","answer":true,"code":false},{"text":"`concat(a,b,c)`","answer":false,"code":false},{"text":"`a + b + c`","answer":false,"code":false}]},{"id":29,"question":"In this function. what level of access is provided to the variable `a`?","code":"rust use std::fmt::Debug; fn report<T:Debug>(a: &T) {     eprintln!(\"info: {:?}\", a); }","reference":"```","choices":[{"text":"print","answer":false,"code":false},{"text":"read-only","answer":true,"code":false},{"text":"read/write","answer":false,"code":false},{"text":"debug","answer":false,"code":false}]},{"id":30,"question":"Which choice is _not_ valid loop syntax?","code":"","reference":"","choices":[{"text":"`loop`","answer":false,"code":false},{"text":"`for`","answer":false,"code":false},{"text":"`while`","answer":false,"code":false},{"text":"`do`","answer":true,"code":false}]},{"id":31,"question":"How do you construct a value of `Status` that is initialized to `Waiting`?","code":"rust enum Status {     Waiting,     Busy,     Error(String), }","reference":"```","choices":[{"text":"`let s = Enum::new(Status::Waiting);`","answer":false,"code":false},{"text":"`let s = new Status::Waiting;`","answer":false,"code":false},{"text":"`let s = Status::Waiting;`","answer":true,"code":false},{"text":"`let s = Status::new(Waiting);`","answer":false,"code":false}]},{"id":32,"question":"Which statement about enums is false?","code":"","reference":"","choices":[{"text":"Enums are useful in matching patterns.","answer":false,"code":false},{"text":"Option is an enum type.","answer":false,"code":false},{"text":"Enum variants can have different types with associated data.","answer":false,"code":false},{"text":"the term _enum_ is short for _enummap_","answer":true,"code":false}]}]