[{"id":1,"question":"What is the value of s?","code":"NSMutableString *s = [NSMutableString stringWithString: @\"123\"];","reference":"```","choices":["123456","123","456","This code contains an error."],"answer":[0]},{"id":2,"question":"What's the value of i after these statements?","code":"NSString *str = nil; NSInteger i = str.integerValue;","reference":"```","choices":["nil","0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)","-1","This code crashes."],"answer":[1]},{"id":3,"question":"What value is in str after this line in executed?","code":"`NSString str = \"test\" + \" \" + \"more\";`","reference":"`NSString str = \"test\" + \" \" + \"more\";`","choices":["This code contains an error","test","nil","test more"],"answer":[0]},{"id":4,"question":"What does this code print?","code":"NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {       return evaluatedObject.intValue % 2 == 0;     }];     NSArray *vals = @[@\"1\", @\"2\", @\"3\"];     NSArray *n2 = [vals filteredArrayUsingPredicate:p2];     NSLog(@\"%@\", n2.firstObject);","reference":"```","choices":["2","1,2,3","1,2","Nothing, since this code contains an error."],"answer":[0]},{"id":5,"question":"Property defaults include _?","code":"","reference":"","choices":["atomic/strong","atomic/weak","nonatomic/weak","nonatomic/strong"],"answer":[0]},{"id":6,"question":"What is the key difference between NSDictionary and NSMutableDictionary?","code":"","reference":"","choices":["NSMutableDictionary's values can change","NSMutableDictionary has not initializers.","NSDictionary can't be copied.","NSDictionary's values can change."],"answer":[0]},{"id":7,"question":"What is foo?","code":"`-(float)foo;`","reference":"`-(float)foo;`","choices":["A function with a return type of float.","This code contains an error.","A variable declaration of type float.","A property of type float."],"answer":[0]},{"id":8,"question":"What can you glean from this line?","code":"`#import \"NSString+NameHelper.h\"`","reference":"`#import \"NSString+NameHelper.h\"`","choices":["NameHelper is a category of NSString.","NameHelper is a subclass of NSString.","NSString implements the NameHelper protocol.","NSString has a helper class."],"answer":[0]},{"id":9,"question":"What's wrong with this code?","code":"`float x = 5.;`","reference":"`float x = 5.;`","choices":["Nothing is wrong with this code.","Declarations do not need semicolons.","x=5 is an invalid float.","Variables can't be declared and initialized in the same state."],"answer":[0]},{"id":10,"question":"How many times with this loop be executed?","code":"for (int x=0; x<100; x++) {   x = x + 1; }","reference":"```","choices":["50","99","100","This code contains an error."],"answer":[0]},{"id":11,"question":"What is this code an example of?","code":"`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`","reference":"`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`","choices":["Key-Value Observing","Class Value Observing","Key-Data Observing","KeyPath Observing"],"answer":[0]},{"id":12,"question":"What does ARC stand for?","code":"","reference":"","choices":["Automatic Reference Counting","Automatic Retain Checking","Async Retain Cycles","Automatic Release Code"],"answer":[0]},{"id":13,"question":"What is printed for this code?","code":"int val = 0; val = 1.5; printf(\"%d\", val);","reference":"```","choices":["1","2","0","This code contains an error."],"answer":[0]},{"id":14,"question":"What best describes class inheritance in Objective-C?","code":"","reference":"","choices":["single inheritance but multiple protocol implementation","Objective-C doesn't support inheritance","dual class inheritance","unlimited class inheritance and protocol adherence"],"answer":[0]},{"id":15,"question":"How many keys does this NSDictionary have after this code is executed?","code":"`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`","reference":"`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`","choices":["2","4","5","This code contains an error."],"answer":[0]},{"id":16,"question":"What is wrong with this code?","code":"NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];","reference":"```","choices":["The key and value items are mixed","Nothing is wrong with it","You can't set the capacity of a dictionary","NSMutableDictionary doesn't have a :setValue:forKey function."],"answer":[1]},{"id":17,"question":"What is printed from this code?","code":"NSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding]; NSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);","reference":"```","choices":["print","This code is invalid","Nothing is printed from this code.","nil"],"answer":[0]},{"id":18,"question":"What is different about this function?","code":"`+(void)doSomething;`","reference":"`+(void)doSomething;`","choices":["It is static","It is abstract.","It is inline.","This code contains an error."],"answer":[0]},{"id":19,"question":"Structs can have _?","code":"","reference":"","choices":["functions","initializers","fields","all of these answers"],"answer":[2]},{"id":20,"question":"What is wrong with this code?","code":"@interface MyClass : NSObject     @property (strong, nonatomic, readonly) NSString *name;   @end","reference":"```","choices":["There is nothing wrong with this code.","There is not read-only directive.","MyClass doesn't implement NSObject.","Properties are declared in the implementation."],"answer":[0]},{"id":21,"question":"What is an enums base type for the code below?","code":"`typedef enum { Foo1, Foo2} Foo;`","reference":"`typedef enum { Foo1, Foo2} Foo;`","choices":["There is no base type.","NSObject","int","NSNumber"],"answer":[0]},{"id":22,"question":"If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?","code":"","reference":"","choices":["UserDefaults","plist file","CoreData","TextFile"],"answer":[0]},{"id":23,"question":"What are categories used for?","code":"","reference":"","choices":["to extend other classes","to manage access control","to coordinate objects","to group classes"],"answer":[0]},{"id":24,"question":"What is this Objective-C code checking?","code":"if ([keyPath isInstanceOf:[NSString class]]) { }","reference":"```","choices":["This code contains an error","if keyPath is an instance of NSString","if keyPath's baseclass is the same as NSString's baseclass","if keyPath implements the same methods as NSString"],"answer":[0]},{"id":25,"question":"What is this a declaration of?","code":"`int(^foo)(int);`","reference":"`int(^foo)(int);`","choices":["an Extension","a Generic","a block of code","an abstract class"],"answer":[2]},{"id":26,"question":"For observing changes to a property, which of these two statements cause the related method to be called and why?","code":"1. _val = 1; 2. self.val= 100;","reference":"```","choices":["Statement 2, since it calls the auto-created setter on the property.","Statement 1, since it uses the property directly.","Statement 2, since it specifies the class instance to use.","Statement 1, since it calls the auto-created setter on the property."],"answer":[0]},{"id":27,"question":"What is wrong with this code?","code":"float x = 2.0; int(^foo)(int) = ^(int n1) {   return (int)(n1*x); }; foo(5);","reference":"```","choices":["Ints and floats can't be multiplied.","The parameter isn't declared correctly.","x is not in the right scope.","Nothing is wrong with this code."],"answer":[3]},{"id":28,"question":"What's the difference between an array and a set?","code":"","reference":"","choices":["Arrays are ordered, non-unique values.","Arrays are stored sorted.","Sets are ordered, unique values.","Sets can contain nils."],"answer":[0]},{"id":29,"question":"Dot notation can be used for _?","code":"","reference":"","choices":["nothing, as they're never used in Objective-C","function calls only","property getter/setter","parameter delimiters"],"answer":[2]},{"id":30,"question":"What is the value of newVals after this code is executed?","code":"NSArray *vals = @[@\"1\", @\"2\", @\"3\"];     NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];     NSArray *newVals = [vals filteredArrayUsingPredicate:pred];","reference":"```","choices":["2,3","nil","This code contains an error","2,\"3\""],"answer":[0]},{"id":31,"question":"How would this function be called?","code":"`-(int)foo:(int)a b:(int)c;`","reference":"`-(int)foo:(int)a b:(int)c;`","choices":["self.foo(5, b:10);","This code contains an error.","[self foo:5:10:20];","[self foo:5 b:10];"],"answer":[3]},{"id":32,"question":"What is the type of the error return value stored in json?","code":"NSError *error;     NSData *data;     id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];","reference":"```","choices":["NSString","NSArray","id","NSDictionary"],"answer":[]},{"id":33,"question":"What is significant about this function declaration?","code":"-(void)testFunc:(NSString**)str;","reference":"```","choices":["The parameter is passed by value and can not be changed","** is not allowed on a parameter","The parameter may be nil","The parameter is passed by reference and may be changed"],"answer":[3]},{"id":34,"question":"What is printed from this code execution?","code":"typedef enum {         thing1,         thing2,         thing3     } Thing;     -(void) enumStuff {         NSLog(@\"%d\", thing2);     }","reference":"```","choices":["0","1","thing2","This code does not print anything"],"answer":[1]},{"id":35,"question":"You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","code":"","reference":"","choices":["non-atomic","strong","weak","atomic"],"answer":[3]},{"id":36,"question":"What is wrong with this line of code?","code":"int temp = 1==1;","reference":"```","choices":["`temp` is a keyword.","1==1 is invalid.","1==1 evaluates to a Boolean.","Nothing is wrong with it."],"answer":[3]},{"id":37,"question":"What is special about the code within this block?","code":"dispatch_async(dispatch_get_main_queue(), ^{ // code });","reference":"```","choices":["It executes on the main queue.","It is the last code to run before the app goes inactive.","It executes on a background thread.","It is queued to execute in the background."],"answer":[0]},{"id":38,"question":"How many items are in set1 after this code executes?","code":"NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];","reference":"```","choices":["zero","six","one","five"],"answer":[3]},{"id":39,"question":"What is wrong with this code?","code":"NSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"]; NSlog(@\"d1: %@\", d1);","reference":"```","choices":["NSDictionary cannot be printed this way.","The last key is missing a value.","Dictionaries cannot have mixed types as values.","d1 is assigned an NSArray of values."],"answer":[1]},{"id":40,"question":"What is the initial value of the property `val`?","code":"@property (nonatomic, readonly) int val;","reference":"```","choices":["8","nil","-1","undefined"],"answer":[]}]