[{"id":1,"question":"To cache your entire site for an application in Django, you add all except which of these settings?","code":"","reference":"","choices":[{"text":"django.middleware.common.CommonMiddleware","answer":false,"code":false},{"text":"django.middleware.cache.UpdateCacheMiddleware","answer":false,"code":false},{"text":"django.middleware.cache.FetchFromCacheMiddleware","answer":false,"code":false},{"text":"django.middleware.cache.AcceleratedCacheMiddleware","answer":true,"code":false}]},{"id":2,"question":"In which programming language is Django written?","code":"","reference":"","choices":[{"text":"C++","answer":false,"code":false},{"text":"Java","answer":false,"code":false},{"text":"Python","answer":true,"code":false},{"text":"Ruby","answer":false,"code":false}]},{"id":3,"question":"To automatically provide a value for a field, or to do validation that requires access to more than a single field, you should override the `___` method in the `___` class.","code":"","reference":"","choices":[{"text":"validate(); Model","answer":false,"code":false},{"text":"group(); Model","answer":false,"code":false},{"text":"validate(); Form","answer":false,"code":false},{"text":"clean(); Field","answer":true,"code":false}]},{"id":4,"question":"A client wants their site to be able to load \"Rick & Morty\" episodes by number or by title—e.g., shows/3/3 or shows/picklerick. Which URL pattern do you recommend?","code":"url(r'shows/<int:season>/<int:episode>/', views.episode_number), url(r'shows/<slug:episode_name>/', views.episode_name)   path('shows/<int:season>/<int:episode>/', views.episode_number), path(r'shows/<slug:episode_name>/', views.episode_name)   path('shows/<int:season>/<int:episode>', views.episode_number), path(r'shows/<slug:episode_name>/', views.episode_number)   url(r'^show/(?P<season>[0-9]+)/(?P<episode>[0-9]+)/$', views.episode_number), url(r'^show/(?P<episode_name>[w-]+)/', views.episode_name","choices":[{"text":"\nurl(r'shows/<int:season>/<int:episode>/', views.episode_number),\nurl(r'shows/<slug:episode_name>/', views.episode_name)\n","code":true,"answer":false},{"text":"\npath('shows/<int:season>/<int:episode>/', views.episode_number),\npath(r'shows/<slug:episode_name>/', views.episode_name)\n","code":true,"answer":true},{"text":"\npath('shows/<int:season>/<int:episode>', views.episode_number),\npath(r'shows/<slug:episode_name>/', views.episode_number)\n","code":true,"answer":false},{"text":"\nurl(r'^show/(?P<season>[0-9]+)/(?P<episode>[0-9]+)/$', views.episode_number),\nurl(r'^show/(?P<episode_name>[w-]+)/', views.episode_name\n","code":true,"answer":false}]},{"id":5,"question":"How do you determine at startup time if a piece of middleware should be used?","code":"","reference":"","choices":[{"text":"Raise MiddlewareNotUsed in the **init** function of your middleware.","answer":true,"code":false},{"text":"Implement the not_used method in your middleware class.","answer":false,"code":false},{"text":"List the middleware beneath an entry of django.middleware.IgnoredMiddleware.","answer":false,"code":false},{"text":"Write code to remove the middleware from the settings in [app]/**init**.py.","answer":false,"code":false}]},{"id":6,"question":"How do you turn off Django’s automatic HTML escaping for part of a web page?","code":"","reference":"","choices":[{"text":"Place that section between paragraph tags containing the autoescape=off switch.","answer":false,"code":false},{"text":"Wrap that section between { percentage mark autoescape off percentage mark} and {percentage mark endautoescape percentage mark} tags.","answer":false,"code":false},{"text":"Wrap that section between {percentage mark autoescapeoff percentage mark} and {percentage mark endautoescapeoff percentage mark} tags.","answer":false,"code":false},{"text":"You don't need to do anything—autoescaping is off by default.","answer":true,"code":false}]},{"id":7,"question":"Which step would NOT help you troubleshoot the error \"django-admin: command not found\"?","code":"","reference":"","choices":[{"text":"Check that the bin folder inside your Django directory is on your system path.","answer":false,"code":false},{"text":"Make sure you have activated the virtual environment you have set up containing Django.","answer":false,"code":false},{"text":"Check that you have installed Django.","answer":false,"code":false},{"text":"Make sure that you have created a Django project.","answer":true,"code":false}]},{"id":8,"question":"Every time a user is saved, their quiz_score needs to be recalculated. Where might be an ideal place to add this logic?","code":"","reference":"","choices":[{"text":"template","answer":false,"code":false},{"text":"model","answer":true,"code":false},{"text":"database","answer":false,"code":false},{"text":"view","answer":false,"code":false}]},{"id":9,"question":"What is the correct way to begin a class called \"Rainbow\" in Python?","code":"","reference":"","choices":[{"text":"Rainbow {}","answer":false,"code":false},{"text":"export Rainbow:","answer":false,"code":false},{"text":"class Rainbow:","answer":true,"code":false},{"text":"def Rainbow:","answer":false,"code":false}]},{"id":10,"question":"You have inherited a Django project and need to get it running locally. It comes with a requirements.txt file containing all its dependencies. Which command should you use?","code":"","reference":"","choices":[{"text":"django-admin startproject requirements.txt","answer":false,"code":false},{"text":"python install -r requirements.txt","answer":false,"code":false},{"text":"pip install -r requirements.txt","answer":true,"code":false},{"text":"pip install Django","answer":false,"code":false}]},{"id":11,"question":"Which best practice is NOT relevant to migrations?","code":"","reference":"","choices":[{"text":"To make sure that your migrations are up to date, you should run updatemigrations before running your tests.","answer":true,"code":false},{"text":"You should back up your production database before running a migration.","answer":false,"code":false},{"text":"Your migration code should be under source control.","answer":false,"code":false},{"text":"If a project has a lot of data, you should test against a staging copy before running the migration on production.","answer":false,"code":false}]},{"id":12,"question":"What will this URL pattern match? url(r'^$', views.hello)","code":"","reference":"","choices":[{"text":"a string beginning with the letter Ra string beginning with the letter R","answer":false,"code":false},{"text":"an empty string at the server root","answer":true,"code":false},{"text":"a string containing ^ and $a string containing ^ and $","answer":false,"code":false},{"text":"an empty string anywhere in the URLan empty string anywhere in the URL","answer":false,"code":false}]},{"id":13,"question":"What is the typical order of an HTTP request/response cycle in Django?","code":"","reference":"","choices":[{"text":"URL > view > template","answer":true,"code":false},{"text":"form > model > view","answer":false,"code":false},{"text":"template > view > model","answer":false,"code":false},{"text":"URL > template > view > model","answer":false,"code":false}]},{"id":14,"question":"Django's class-based generic views provide which classes that implement common web development tasks?","code":"","reference":"","choices":[{"text":"concrete","answer":false,"code":false},{"text":"thread-safe","answer":false,"code":false},{"text":"abstract","answer":true,"code":false},{"text":"dynamic","answer":false,"code":false}]},{"id":15,"question":"Which skills do you need to maintain a set of Django templates?","code":"","reference":"","choices":[{"text":"template syntax","answer":false,"code":false},{"text":"HTML and template syntax","answer":true,"code":false},{"text":"Python, HTML, and template syntax","answer":false,"code":false},{"text":"Python and template syntax","answer":false,"code":false}]},{"id":16,"code":"class Star(models.Model): name = models.CharField(max_length=100) class Constellation(models.Model): stars = models.ManyToManyField(Star)   class Star(models.Model): constellation = models.ForeignKey(Constellation, on_delete=models.CASCADE) class Constellation(models.Model): stars = models.ForeignKey(Star, on_delete=models.CASCADE)   class Star(models.Model): name = models.CharField(max_length=100) class Constellation(models.Model): stars = models.OneToManyField(Star)   class Star(models.Model): constellation = models.ManyToManyField(Constellation) class Constellation(models.Model): name = models.CharField(max_length=100)","choices":[{"text":"\nclass Star(models.Model):\nname = models.CharField(max_length=100)\nclass Constellation(models.Model):\nstars = models.ManyToManyField(Star)\n","code":true,"answer":true},{"text":"\nclass Star(models.Model):\nconstellation = models.ForeignKey(Constellation, on_delete=models.CASCADE)\nclass Constellation(models.Model):\nstars = models.ForeignKey(Star, on_delete=models.CASCADE)\n","code":true,"answer":false},{"text":"\nclass Star(models.Model):\nname = models.CharField(max_length=100)\nclass Constellation(models.Model):\nstars = models.OneToManyField(Star)\n","code":true,"answer":false},{"text":"\nclass Star(models.Model):\nconstellation = models.ManyToManyField(Constellation)\nclass Constellation(models.Model):\nname = models.CharField(max_length=100)\n","code":true,"answer":false}]},{"id":17,"code":"","reference":"","choices":[{"text":"In your urls file, add a pattern that includes the name of your static directory.","answer":true,"code":false},{"text":"Create a directory named static inside your app directory.","answer":false,"code":false},{"text":"Create a directory named after the app under the static directory, and place static files inside.","answer":false,"code":false},{"text":"Use the template tag {percentage mark load static percentage mark}.","answer":false,"code":false}]},{"id":18,"code":"","reference":"","choices":[{"text":"Set a session variable.","answer":false,"code":false},{"text":"Use a global variable.","answer":false,"code":false},{"text":"Add a dictionary to the template context.","answer":false,"code":false},{"text":"Use RequestContext.","answer":true,"code":false}]},{"id":19,"code":"","reference":"","choices":[{"text":"No. Using a custom user model could break the admin interface and some third-party apps.","answer":false,"code":false},{"text":"Yes. It is easier to make changes once it goes into production.","answer":false,"code":false},{"text":"No. Django's built-in models.User class has been tried and tested—no point in reinventing the wheel.","answer":true,"code":false},{"text":"Yes, as there is no other option.","answer":false,"code":false}]},{"id":20,"code":"","reference":"","choices":[{"text":"actions","answer":true,"code":false},{"text":"admin","answer":false,"code":false},{"text":"mezcal","answer":false,"code":false},{"text":"inlines","answer":false,"code":false}]},{"id":21,"code":"","reference":"","choices":[{"text":"The results of a QuerySet are not ordered.","answer":false,"code":false},{"text":"QuerySets do not create any database activity until they are evaluated.","answer":true,"code":false},{"text":"QuerySets do not load objects into memory until they are needed.","answer":false,"code":false},{"text":"Using QuerySets, you cannot execute more complex queries.","answer":false,"code":false}]},{"id":22,"code":"","reference":"","choices":[{"text":"Switch to using POST instead of GET as the request method.","answer":true,"code":false},{"text":"Make sure the input field in your form is also named \"search_term\".","answer":false,"code":false},{"text":"Use MultiValueDict's GET method instead of hitting the dictionary directly like this: request.GET.get('search_term', '').","answer":false,"code":false},{"text":"Check if the search_term parameter is present in the request before attempting to access it.","answer":false,"code":false}]},{"id":23,"code":"","reference":"","choices":[{"text":"show_fields()","answer":false,"code":false},{"text":"as_p()","answer":true,"code":false},{"text":"as_table()","answer":false,"code":false},{"text":"fields()","answer":false,"code":false}]},{"id":24,"code":"","reference":"","choices":[{"text":"Fork the Django repository GitHub.","answer":false,"code":false},{"text":"Submit a pull request.","answer":false,"code":false},{"text":"all of these answers.","answer":true,"code":false},{"text":"Run Django's test suite.","answer":false,"code":false}]},{"id":25,"code":"","reference":"","choices":[{"text":"django.utils.default_settings.py","answer":false,"code":false},{"text":"django.utils.global_settings.py","answer":false,"code":false},{"text":"django.conf.default_settings.py","answer":false,"code":false},{"text":"django.conf.global_settings.py","answer":true,"code":false}]},{"id":26,"code":"","reference":"","choices":[{"text":"numFingers","answer":false,"code":false},{"text":"number-of-Fingers","answer":false,"code":false},{"text":"number_of_fingers","answer":true,"code":false},{"text":"finger_num","answer":false,"code":false}]},{"id":27,"code":"","reference":"","choices":[{"text":"Manually merge your migration files to reduce the number","answer":false,"code":false},{"text":"Don't worry about the number","answer":false,"code":false},{"text":"Try to minimize the number of migrations","answer":false,"code":false},{"text":"Use squashmigrations to reduce the number","answer":true,"code":false}]},{"id":28,"code":"","reference":"","choices":[{"text":"perform db operations without fetching a model object","answer":true,"code":false},{"text":"define db transaction isolation levels","answer":false,"code":false},{"text":"use aggregate functions more easily","answer":false,"code":false},{"text":"build reusable QuerySets","answer":false,"code":false}]},{"id":29,"code":"","reference":"","choices":[{"text":"SmallIntegerField","answer":false,"code":false},{"text":"NegativeIntegerField","answer":true,"code":false},{"text":"BigAutoField","answer":false,"code":false},{"text":"PositiveIntegerField","answer":false,"code":false}]},{"id":30,"code":"","reference":"","choices":[{"text":"print (django.version)","answer":false,"code":false},{"text":"import django django.getVersion()","answer":false,"code":false},{"text":"import django django.get_version()","answer":true,"code":false},{"text":"python -c django --version","answer":false,"code":false}]},{"id":31,"code":"","reference":"","choices":[{"text":"READ; WRITE","answer":false,"code":false},{"text":"GET; POST","answer":true,"code":false},{"text":"POST; GET","answer":false,"code":false},{"text":"GET; PATCH","answer":false,"code":false}]},{"id":32,"code":"","reference":"","choices":[{"text":"when efficiency is important","answer":false,"code":false},{"text":"when you want the data to be cached","answer":false,"code":false},{"text":"when you want to use your browser to help with debugging","answer":false,"code":false},{"text":"when the data in the form may be sensitive","answer":true,"code":false}]},{"id":33,"code":"","reference":"","choices":[{"text":"if your single installation powers more than one site","answer":true,"code":false},{"text":"if you need to serve static as well as dynamic content","answer":false,"code":false},{"text":"if you want your app have a fully qualified domain name","answer":false,"code":false},{"text":"if you are expecting more than 10.000 users","answer":false,"code":false}]},{"id":34,"code":"`title=models.charfield(max_length=100, validators=[validate_spelling])`","reference":"`title=models.charfield(max_length=100, validators=[validate_spelling])`","choices":[{"text":"inizialized array called validators","answer":false,"code":false},{"text":"a validators file containing a function called validate_spelling imported at the top of model","answer":true,"code":false},{"text":"a validators file containing a function called validate imported at the top of model","answer":false,"code":false},{"text":"spelling package imported at the top of model","answer":false,"code":false}]},{"id":35,"code":"","reference":"","choices":[{"text":"require_safe()","answer":true,"code":false},{"text":"require_put()","answer":false,"code":false},{"text":"require_post()","answer":false,"code":false},{"text":"require_get()","answer":false,"code":false}]},{"id":36,"code":"class Author (models.model): book=models.foreignkey(Book,on_delete=models.cascade) class Book(models.model): name=models.charfield(max_length=100)  python class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author,on_delete=models.cascade)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author,on_delete=models.cascade)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=Author.name","choices":[{"text":"\nclass Author (models.model):\nbook=models.foreignkey(Book,on_delete=models.cascade)\nclass Book(models.model):\nname=models.charfield(max_length=100)\n","code":true,"answer":false},{"text":"python\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author,on_delete=models.cascade)\n","code":true,"answer":true},{"text":"\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author)\n","code":true,"answer":false},{"text":"\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=models.foreignkey(Author,on_delete=models.cascade)\n","code":true,"answer":false},{"text":"\nclass Author (models.model):\nname=models.charfield(max_length=100)\nclass Book(models.model):\nauthor=Author.name\n","code":true,"answer":false}]},{"id":37,"code":"","reference":"","choices":[{"text":"validator","answer":true,"code":false},{"text":"deodorizer","answer":false,"code":false},{"text":"mediator","answer":false,"code":false},{"text":"regular expression","answer":false,"code":false}]},{"id":38,"code":"","reference":"","choices":[{"text":"rest_framework.permissions.IsAdminUser","answer":false,"code":false},{"text":"rest_framework.permissions.IsAuthenticated","answer":true,"code":false},{"text":"rest_framework.permissions.IsAuthorized","answer":false,"code":false},{"text":"rest_framework.permissions.IsRegistered","answer":false,"code":false}]},{"id":39,"code":"","reference":"","choices":[{"text":"makemigration","answer":false,"code":false},{"text":"update_db","answer":false,"code":false},{"text":"applymigration","answer":false,"code":false},{"text":"migrate","answer":true,"code":false}]},{"id":40,"code":"","reference":"","choices":[{"text":"objectwriters","answer":false,"code":false},{"text":"serializers","answer":true,"code":false},{"text":"picklers","answer":false,"code":false},{"text":"viewsets","answer":false,"code":false}]},{"id":41,"code":"{ percentage if spark >= 50 percentage } Lots of spark {percentage elif spark == 42 percentage}","reference":"```","choices":[{"text":"{ percentage else percentage}","answer":false,"code":false},{"text":"{percentage endif percentage}","answer":true,"code":false},{"text":"Nothing needed","answer":false,"code":false},{"text":"{percentage end percentage}","answer":false,"code":false}]},{"id":42,"code":"from rest_framework import serializers from .models import Planet   class PlanetSerializer(serializers.ModelSerializer): class Meta: model=Planet fields=('name','position', 'mass', 'rings')   from rest_framework import serializers from .models import Planet class PlanetSerializer(): class Meta: fields=('name','position', 'mass', 'rings') model=Planet   from django.db import serializers from .models import Planet class PlanetSerializer(serializers.ModelSerializer): fields=('name','position', 'mass', 'rings') model=Sandwich   from django.db import serializers from .models import Planet class PlanetSerializer(serializers.ModelSerializer): class Meta: fields=('name') model=Planet","choices":[{"text":"\nclass PlanetSerializer(serializers.ModelSerializer):\nclass Meta:\nmodel=Planet\nfields=('name','position', 'mass', 'rings')\n","code":true,"answer":true},{"text":"\nfrom rest_framework import serializers\nfrom .models import Planet\nclass PlanetSerializer():\nclass Meta:\nfields=('name','position', 'mass', 'rings')\nmodel=Planet\n","code":true,"answer":false},{"text":"\nfrom django.db import serializers\nfrom .models import Planet\nclass PlanetSerializer(serializers.ModelSerializer):\nfields=('name','position', 'mass', 'rings')\nmodel=Sandwich\n","code":true,"answer":false},{"text":"\nfrom django.db import serializers\nfrom .models import Planet\nclass PlanetSerializer(serializers.ModelSerializer):\nclass Meta:\nfields=('name')\nmodel=Planet\n","code":true,"answer":false}]},{"id":43,"code":"","reference":"","choices":[{"text":"ModelSerializer","answer":true,"code":false},{"text":"Model","answer":false,"code":false},{"text":"DataSerializer","answer":false,"code":false},{"text":"ModelToSerializer","answer":false,"code":false}]},{"id":44,"code":"","reference":"","choices":[{"text":"django-admin setup","answer":false,"code":false},{"text":"django-admin runserver","answer":false,"code":false},{"text":"python manage.py createuser","answer":false,"code":false},{"text":"python manage.py createsuperuser","answer":true,"code":false}]},{"id":45,"code":"","reference":"","choices":[{"text":"you should set up a new virtualenv for each Django project","answer":true,"code":false},{"text":"They should not be used","answer":false,"code":false},{"text":"Use the same venv for all your Django work","answer":false,"code":false},{"text":"Use a new venv for each Django app","answer":false,"code":false}]},{"id":46,"code":"","reference":"","choices":[{"text":"migrate.py","answer":false,"code":false},{"text":"wsgi.py","answer":false,"code":false},{"text":"manage.py","answer":true,"code":false},{"text":"runserver","answer":false,"code":false}]},{"id":47,"code":"","reference":"","choices":[{"text":"models","answer":true,"code":false},{"text":"controllers","answer":false,"code":false},{"text":"programmers","answer":false,"code":false},{"text":"clients","answer":false,"code":false}]},{"id":48,"code":"","reference":"","choices":[{"text":"Loose Coupling","answer":false,"code":false},{"text":"Less Code","answer":false,"code":false},{"text":"Fast Development","answer":false,"code":false},{"text":"Implicit over explicit","answer":true,"code":false}]},{"id":49,"code":"{{\"live long and prosper\"|truncate:3}}","reference":"```","choices":[{"text":"live long and ...","answer":true,"code":false},{"text":"live long and","answer":false,"code":false},{"text":"a compilation error","answer":false,"code":false},{"text":"liv","answer":false,"code":false}]},{"id":50,"code":"1 sandwiches = Sandwich.objects.filter(is_vegan=True) 2 for sandwich in sandwiches: 3   print(sandwich.name + \" - \" + sandwich.spice_level)","reference":"```","choices":[{"text":"line 1","answer":false,"code":false},{"text":"It depends on how many results return by query.","answer":true,"code":false},{"text":"It depends on cache.","answer":false,"code":false},{"text":"line 2","answer":false,"code":false}]},{"id":51,"code":"","reference":"","choices":[{"text":"an NGINX web server","answer":false,"code":false},{"text":"a NoSQL database","answer":false,"code":false},{"text":"a larger hard drive","answer":false,"code":false},{"text":"CORS middleware","answer":false,"code":false}]},{"id":52,"code":"","reference":"","choices":[{"text":"an HTTP request","answer":false,"code":false},{"text":"a JSON object","answer":false,"code":false},{"text":"a query","answer":false,"code":false},{"text":"a serializer","answer":true,"code":false}]},{"id":53,"code":"","reference":"","choices":[{"text":"Run the `migrate` command with `--exclude=[model_name]`.","answer":false,"code":false},{"text":"Move the model definition from `models.py` into its own file.","answer":false,"code":false},{"text":"Set `managed=False` inside the model.","answer":true,"code":false},{"text":"Don't run the `migrate` command.","answer":false,"code":false}]},{"id":54,"code":"","reference":"","choices":[{"text":"has_changed()","answer":true,"code":false},{"text":"its_changed()","answer":false,"code":false},{"text":"has_updated()","answer":false,"code":false},{"text":"None of This","answer":false,"code":false}]},{"id":55,"code":"","reference":"","choices":[{"text":"a server","answer":true,"code":false},{"text":"an interface specification","answer":false,"code":false},{"text":"a Python module","answer":false,"code":false},{"text":"a framework","answer":false,"code":false}]},{"id":56,"code":"","reference":"","choices":[{"text":"DetailView","answer":false,"code":false},{"text":"TittleView","answer":false,"code":false},{"text":"SongView","answer":false,"code":false},{"text":"ListView","answer":true,"code":false}]},{"id":57,"code":"","reference":"","choices":[{"text":"There's less chance of introducing bugs since SQLite already works out the box","answer":true,"code":false},{"text":"It's fine, you just need to keep both instances synchronized","answer":false,"code":false},{"text":"It's a bad idea and could lead to issues down the road","answer":false,"code":false},{"text":"It's the most efficient way to build a project","answer":false,"code":false}]},{"id":58,"code":"","reference":"","choices":[{"text":"to perform database queries","answer":false,"code":false},{"text":"to set up a database for testing","answer":false,"code":false},{"text":"to modify the initial QuerySet that the Manager returns","answer":true,"code":false},{"text":"to filter the results that a database query returns","answer":false,"code":false}]},{"id":59,"code":"","reference":"","choices":[{"text":"models","answer":false,"code":false},{"text":"views","answer":true,"code":false},{"text":"forms","answer":false,"code":false},{"text":"serializers","answer":false,"code":false}]},{"id":60,"code":"shell % if sparles >= 50 %   Lots of sparkles! % elif sparkles == 42 %   The answer to life, the universe, and everything!","reference":"```","choices":[{"text":"`% endif %`","answer":true,"code":false},{"text":"Nothing else is needed.","answer":false,"code":false},{"text":"`% end%`","answer":false,"code":false},{"text":"`% else %`","answer":false,"code":false}]},{"id":61,"code":"","reference":"","choices":[{"text":"python install -r requirements.txt","answer":false,"code":false},{"text":"django-admin startproject requirements.txt","answer":false,"code":false},{"text":"pip install Django","answer":false,"code":false},{"text":"pip install -r requirements.txt","answer":true,"code":false}]},{"id":62,"code":"","reference":"","choices":[{"text":"when the data in the form may be sensitive","answer":true,"code":false},{"text":"when you want the data to be cached","answer":false,"code":false},{"text":"when you want to use your browser to help with debugging","answer":false,"code":false},{"text":"when efficiency is important","answer":false,"code":false}]},{"id":63,"code":"","reference":"","choices":[{"text":"mediator","answer":false,"code":false},{"text":"validator","answer":true,"code":false},{"text":"regular expression","answer":false,"code":false},{"text":"deodorizer","answer":false,"code":false}]},{"id":64,"code":"","reference":"","choices":[{"text":"request.META; FileField","answer":false,"code":false},{"text":"request.FILES; BLOBField","answer":false,"code":false},{"text":"request.FILES; FileField","answer":true,"code":false},{"text":"request.META.Files; CLOBField","answer":false,"code":false}]},{"id":65,"code":"","reference":"","choices":[{"text":"pickle","answer":true,"code":false},{"text":"struct","answer":false,"code":false},{"text":"marshal","answer":false,"code":false},{"text":"serialize","answer":false,"code":false}]}]