[{"id":1,"question":"To cache your entire site for an application in Django, you add all except which of these settings?","code":"","reference":"","choices":["django.middleware.common.CommonMiddleware","django.middleware.cache.UpdateCacheMiddleware","django.middleware.cache.FetchFromCacheMiddleware","django.middleware.cache.AcceleratedCacheMiddleware"],"answer":[3]},{"id":2,"question":"In which programming language is Django written?","code":"","reference":"","choices":["C++","Java","Python","Ruby"],"answer":[2]},{"id":3,"question":"To automatically provide a value for a field, or to do validation that requires access to more than a single field, you should override the `___` method in the `___` class.","code":"","reference":"","choices":["validate(); Model","group(); Model","validate(); Form","clean(); Field"],"answer":[3]},{"id":4,"question":"A client wants their site to be able to load \"Rick & Morty\" episodes by number or by title—e.g., shows/3/3 or shows/picklerick. Which URL pattern do you recommend?","code":"url(r'shows/<int:season>/<int:episode>/', views.episode_number), url(r'shows/<slug:episode_name>/', views.episode_name)   path('shows/<int:season>/<int:episode>/', views.episode_number), path(r'shows/<slug:episode_name>/', views.episode_name)   path('shows/<int:season>/<int:episode>', views.episode_number), path(r'shows/<slug:episode_name>/', views.episode_number)   url(r'^show/(?P<season>[0-9]+)/(?P<episode>[0-9]+)/$', views.episode_number), url(r'^show/(?P<episode_name>[w-]+)/', views.episode_name","reference":"```","choices":[null,null,null,null],"answer":[1]},{"id":5,"question":"How do you determine at startup time if a piece of middleware should be used?","code":"","reference":"","choices":["Raise MiddlewareNotUsed in the **init** function of your middleware.","Implement the not_used method in your middleware class.","List the middleware beneath an entry of django.middleware.IgnoredMiddleware.","Write code to remove the middleware from the settings in [app]/**init**.py."],"answer":[0]},{"id":6,"question":"How do you turn off Django’s automatic HTML escaping for part of a web page?","code":"","reference":"","choices":["Place that section between paragraph tags containing the autoescape=off switch.","Wrap that section between { percentage mark autoescape off percentage mark} and {percentage mark endautoescape percentage mark} tags.","Wrap that section between {percentage mark autoescapeoff percentage mark} and {percentage mark endautoescapeoff percentage mark} tags.","You don't need to do anything—autoescaping is off by default."],"answer":[3]},{"id":7,"question":"Which step would NOT help you troubleshoot the error \"django-admin: command not found\"?","code":"","reference":"","choices":["Check that the bin folder inside your Django directory is on your system path.","Make sure you have activated the virtual environment you have set up containing Django.","Check that you have installed Django.","Make sure that you have created a Django project."],"answer":[3]},{"id":8,"question":"Every time a user is saved, their quiz_score needs to be recalculated. Where might be an ideal place to add this logic?","code":"","reference":"","choices":["template","model","database","view"],"answer":[1]},{"id":9,"question":"What is the correct way to begin a class called \"Rainbow\" in Python?","code":"","reference":"","choices":["Rainbow {}","export Rainbow:","class Rainbow:","def Rainbow:"],"answer":[2]},{"id":10,"question":"You have inherited a Django project and need to get it running locally. It comes with a requirements.txt file containing all its dependencies. Which command should you use?","code":"","reference":"","choices":["django-admin startproject requirements.txt","python install -r requirements.txt","pip install -r requirements.txt","pip install Django"],"answer":[2]},{"id":11,"question":"Which best practice is NOT relevant to migrations?","code":"","reference":"","choices":["To make sure that your migrations are up to date, you should run updatemigrations before running your tests.","You should back up your production database before running a migration.","Your migration code should be under source control.","If a project has a lot of data, you should test against a staging copy before running the migration on production."],"answer":[0]},{"id":12,"question":"What will this URL pattern match? url(r'^$', views.hello)","code":"","reference":"","choices":["a string beginning with the letter Ra string beginning with the letter R","an empty string at the server root","a string containing ^ and $a string containing ^ and $","an empty string anywhere in the URLan empty string anywhere in the URL"],"answer":[1]},{"id":13,"question":"What is the typical order of an HTTP request/response cycle in Django?","code":"","reference":"","choices":["URL > view > template","form > model > view","template > view > model","URL > template > view > model"],"answer":[0]},{"id":14,"question":"Django's class-based generic views provide which classes that implement common web development tasks?","code":"","reference":"","choices":["concrete","thread-safe","abstract","dynamic"],"answer":[2]},{"id":15,"question":"Which skills do you need to maintain a set of Django templates?","code":"","reference":"","choices":["template syntax","HTML and template syntax","Python, HTML, and template syntax","Python and template syntax"],"answer":[1]},{"id":16,"code":"class Star(models.Model): name = models.CharField(max_length=100) class Constellation(models.Model): stars = models.ManyToManyField(Star)   class Star(models.Model): constellation = models.ForeignKey(Constellation, on_delete=models.CASCADE) class Constellation(models.Model): stars = models.ForeignKey(Star, on_delete=models.CASCADE)   class Star(models.Model): name = models.CharField(max_length=100) class Constellation(models.Model): stars = models.OneToManyField(Star)   class Star(models.Model): constellation = models.ManyToManyField(Constellation) class Constellation(models.Model): name = models.CharField(max_length=100)","reference":"```","choices":[null,null,null,null],"answer":[0]},{"id":17,"code":"","reference":"","choices":["In your urls file, add a pattern that includes the name of your static directory.","Create a directory named static inside your app directory.","Create a directory named after the app under the static directory, and place static files inside.","Use the template tag {percentage mark load static percentage mark}."],"answer":[0]},{"id":18,"code":"","reference":"","choices":["Set a session variable.","Use a global variable.","Add a dictionary to the template context.","Use RequestContext."],"answer":[3]},{"id":19,"code":"","reference":"","choices":["No. Using a custom user model could break the admin interface and some third-party apps.","Yes. It is easier to make changes once it goes into production.","No. Django's built-in models.User class has been tried and tested—no point in reinventing the wheel.","Yes, as there is no other option."],"answer":[2]},{"id":20,"code":"","reference":"","choices":["actions","admin","mezcal","inlines"],"answer":[0]},{"id":21,"code":"","reference":"","choices":["The results of a QuerySet are not ordered.","QuerySets do not create any database activity until they are evaluated.","QuerySets do not load objects into memory until they are needed.","Using QuerySets, you cannot execute more complex queries."],"answer":[1]},{"id":22,"code":"","reference":"","choices":["Switch to using POST instead of GET as the request method.","Make sure the input field in your form is also named \"search_term\".","Use MultiValueDict's GET method instead of hitting the dictionary directly like this: request.GET.get('search_term', '').","Check if the search_term parameter is present in the request before attempting to access it."],"answer":[0]},{"id":23,"code":"","reference":"","choices":["show_fields()","as_p()","as_table()","fields()"],"answer":[1]},{"id":24,"code":"","reference":"","choices":["Fork the Django repository GitHub.","Submit a pull request.","all of these answers.","Run Django's test suite."],"answer":[2]},{"id":25,"code":"","reference":"","choices":["django.utils.default_settings.py","django.utils.global_settings.py","django.conf.default_settings.py","django.conf.global_settings.py"],"answer":[3]},{"id":26,"code":"","reference":"","choices":["numFingers","number-of-Fingers","number_of_fingers","finger_num"],"answer":[2]},{"id":27,"code":"","reference":"","choices":["Manually merge your migration files to reduce the number","Don't worry about the number","Try to minimize the number of migrations","Use squashmigrations to reduce the number"],"answer":[3]},{"id":28,"code":"","reference":"","choices":["perform db operations without fetching a model object","define db transaction isolation levels","use aggregate functions more easily","build reusable QuerySets"],"answer":[0]},{"id":29,"code":"","reference":"","choices":["SmallIntegerField","NegativeIntegerField","BigAutoField","PositiveIntegerField"],"answer":[1]},{"id":30,"code":"","reference":"","choices":["print (django.version)","import django django.getVersion()","import django django.get_version()","python -c django --version"],"answer":[2]},{"id":31,"code":"","reference":"","choices":["READ; WRITE","GET; POST","POST; GET","GET; PATCH"],"answer":[1]},{"id":32,"code":"","reference":"","choices":["when efficiency is important","when you want the data to be cached","when you want to use your browser to help with debugging","when the data in the form may be sensitive"],"answer":[3]},{"id":33,"code":"","reference":"","choices":["if your single installation powers more than one site","if you need to serve static as well as dynamic content","if you want your app have a fully qualified domain name","if you are expecting more than 10.000 users"],"answer":[0]},{"id":34,"code":"`title=models.charfield(max_length=100, validators=[validate_spelling])`","reference":"`title=models.charfield(max_length=100, validators=[validate_spelling])`","choices":["inizialized array called validators","a validators file containing a function called validate_spelling imported at the top of model","a validators file containing a function called validate imported at the top of model","spelling package imported at the top of model"],"answer":[1]},{"id":35,"code":"","reference":"","choices":["require_safe()","require_put()","require_post()","require_get()"],"answer":[0]},{"id":36,"code":"class Author (models.model): book=models.foreignkey(Book,on_delete=models.cascade) class Book(models.model): name=models.charfield(max_length=100)  python class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author,on_delete=models.cascade)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=models.foreignkey(Author,on_delete=models.cascade)   class Author (models.model): name=models.charfield(max_length=100) class Book(models.model): author=Author.name","reference":"```","choices":[null,null,null,null,null],"answer":[1]},{"id":37,"code":"","reference":"","choices":["validator","deodorizer","mediator","regular expression"],"answer":[0]},{"id":38,"code":"","reference":"","choices":["rest_framework.permissions.IsAdminUser","rest_framework.permissions.IsAuthenticated","rest_framework.permissions.IsAuthorized","rest_framework.permissions.IsRegistered"],"answer":[1]},{"id":39,"code":"","reference":"","choices":["makemigration","update_db","applymigration","migrate"],"answer":[3]},{"id":40,"code":"","reference":"","choices":["objectwriters","serializers","picklers","viewsets"],"answer":[1]},{"id":41,"code":"{ percentage if spark >= 50 percentage } Lots of spark {percentage elif spark == 42 percentage}","reference":"```","choices":["{ percentage else percentage}","{percentage endif percentage}","Nothing needed","{percentage end percentage}"],"answer":[1]},{"id":42,"code":"from rest_framework import serializers from .models import Planet   class PlanetSerializer(serializers.ModelSerializer): class Meta: model=Planet fields=('name','position', 'mass', 'rings')   from rest_framework import serializers from .models import Planet class PlanetSerializer(): class Meta: fields=('name','position', 'mass', 'rings') model=Planet   from django.db import serializers from .models import Planet class PlanetSerializer(serializers.ModelSerializer): fields=('name','position', 'mass', 'rings') model=Sandwich   from django.db import serializers from .models import Planet class PlanetSerializer(serializers.ModelSerializer): class Meta: fields=('name') model=Planet","reference":"```","choices":[null,null,null,null],"answer":[0]},{"id":43,"code":"","reference":"","choices":["ModelSerializer","Model","DataSerializer","ModelToSerializer"],"answer":[0]},{"id":44,"code":"","reference":"","choices":["django-admin setup","django-admin runserver","python manage.py createuser","python manage.py createsuperuser"],"answer":[3]},{"id":45,"code":"","reference":"","choices":["you should set up a new virtualenv for each Django project","They should not be used","Use the same venv for all your Django work","Use a new venv for each Django app"],"answer":[0]},{"id":46,"code":"","reference":"","choices":["migrate.py","wsgi.py","manage.py","runserver"],"answer":[2]},{"id":47,"code":"","reference":"","choices":["models","controllers","programmers","clients"],"answer":[0]},{"id":48,"code":"","reference":"","choices":["Loose Coupling","Less Code","Fast Development","Implicit over explicit"],"answer":[3]},{"id":49,"code":"{{\"live long and prosper\"|truncate:3}}","reference":"```","choices":["live long and ...","live long and","a compilation error","liv"],"answer":[0]},{"id":50,"code":"1 sandwiches = Sandwich.objects.filter(is_vegan=True) 2 for sandwich in sandwiches: 3   print(sandwich.name + \" - \" + sandwich.spice_level)","reference":"```","choices":["line 1","It depends on how many results return by query.","It depends on cache.","line 2"],"answer":[1]},{"id":51,"code":"","reference":"","choices":["an NGINX web server","a NoSQL database","a larger hard drive","CORS middleware"],"answer":[]},{"id":52,"code":"","reference":"","choices":["an HTTP request","a JSON object","a query","a serializer"],"answer":[3]},{"id":53,"code":"","reference":"","choices":["Run the `migrate` command with `--exclude=[model_name]`.","Move the model definition from `models.py` into its own file.","Set `managed=False` inside the model.","Don't run the `migrate` command."],"answer":[2]},{"id":54,"code":"","reference":"","choices":["has_changed()","its_changed()","has_updated()","None of This"],"answer":[0]},{"id":55,"code":"","reference":"","choices":["a server","an interface specification","a Python module","a framework"],"answer":[0]},{"id":56,"code":"","reference":"","choices":["DetailView","TittleView","SongView","ListView"],"answer":[3]},{"id":57,"code":"","reference":"","choices":["There's less chance of introducing bugs since SQLite already works out the box","It's fine, you just need to keep both instances synchronized","It's a bad idea and could lead to issues down the road","It's the most efficient way to build a project"],"answer":[0]},{"id":58,"code":"","reference":"","choices":["to perform database queries","to set up a database for testing","to modify the initial QuerySet that the Manager returns","to filter the results that a database query returns"],"answer":[2]},{"id":59,"code":"","reference":"","choices":["models","views","forms","serializers"],"answer":[1]},{"id":60,"code":"shell % if sparles >= 50 %   Lots of sparkles! % elif sparkles == 42 %   The answer to life, the universe, and everything!","reference":"```","choices":["`% endif %`","Nothing else is needed.","`% end%`","`% else %`"],"answer":[0]},{"id":61,"code":"","reference":"","choices":["python install -r requirements.txt","django-admin startproject requirements.txt","pip install Django","pip install -r requirements.txt"],"answer":[3]},{"id":62,"code":"","reference":"","choices":["when the data in the form may be sensitive","when you want the data to be cached","when you want to use your browser to help with debugging","when efficiency is important"],"answer":[0]},{"id":63,"code":"","reference":"","choices":["mediator","validator","regular expression","deodorizer"],"answer":[1]},{"id":64,"code":"","reference":"","choices":["request.META; FileField","request.FILES; BLOBField","request.FILES; FileField","request.META.Files; CLOBField"],"answer":[2]},{"id":65,"code":"","reference":"","choices":["pickle","struct","marshal","serialize"],"answer":[0]}]