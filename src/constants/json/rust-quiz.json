[{"id":1,"question":"Which type cast preserves the mathematical value in all cases?","code":"","reference":"","choices":["i64 as i32","usize as u64","i32 as i64","f64 as f32"],"answer":[2]},{"id":2,"question":"What do the vertical bars represent here?","code":"rust str::thread::spawn(|| {     println!(\"LinkedIn\"); });","reference":"```","choices":["a closure","a thread","a future","a block"],"answer":[0]},{"id":3,"question":"Which choice is not a scalar data type?","code":"","reference":"","choices":["integer","float","boolean","tuple"],"answer":[3]},{"id":4,"question":"**_** cannot be destructured.","code":"","reference":"","choices":["Traits","Tuples","Enums","Structs"],"answer":[0]},{"id":5,"question":"Which `cargo` command checks a program for error without creating a binary executable?","code":"","reference":"","choices":["cargo --version","cargo init","cargo build","cargo check"],"answer":[3]},{"id":6,"question":"The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?","code":"","reference":"","choices":["It's creating a pointer on the heap that points to a value on the stack.","It's creating a pointer on the stack that points to a value on the heap.","It's creating a memory guard around values to prevent illegal access.","It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled."],"answer":[1]},{"id":7,"question":"What is an alternative way of writing `slice` that produces the same result?","code":"rust ... let s = String::form(\"hello\"); let slice = &s[0..2];","reference":"```","choices":["let slice = &s[len + 2];","let slice = &s[len - 2];","let slice = &s.copy(0..2);","let slice = &s[..2];"],"answer":[3]},{"id":8,"question":"Using the `?` operator at the end of an expression is equivalent to **_**.","code":"","reference":"","choices":["a match pattern that branches into True or False","calling ok_error()","calling panic!()","a match pattern that may result an early return"],"answer":[3]},{"id":9,"question":"Which is valid syntax for defining an array of i32 values?","code":"","reference":"","choices":["Array<i32>::with_capacity(10)","[i32]","Array<i32>::new(10)","[i32; 10]"],"answer":[3]},{"id":10,"question":"What syntax is required to take a mutable reference to T, when used within a function argument?","code":"rust fn increment(i: T) {     // body elided }","reference":"```","choices":["*mut T","mut ref T","mut &T","&mut T"],"answer":[3]},{"id":11,"question":"The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?","code":"","reference":"","choices":[".add()",".incr()",".clone()",".increment()"],"answer":[2]},{"id":12,"question":"What happens when an error occurs that is being handled by the question mark (?) operator?","code":"","reference":"","choices":["The error is reported and execution continues.","An exception is raised. The effect(s) of the exception are defined by the error! macro.","The program panics immediately.","Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics."],"answer":[3]},{"id":13,"question":"Which comment syntax is not legal?","code":"","reference":"","choices":["`/*`","`#`","`//!`","`//`"],"answer":[1]},{"id":14,"question":"In matching patterns, values are ignored with _.","code":"","reference":"","choices":["`.ignore()`","`an underscore (_)`","..","skip"],"answer":[2]},{"id":15,"question":"Defining a _ requires a lifetime parameter.","code":"","reference":"","choices":["function that ends the lifetime of one of its arguments","struct that contains a reference to a value","function with a generic argument","struct that contains a reference to a boxed value"],"answer":[1]},{"id":16,"question":"Which example correctly uses std::collections::HashMap's Entry API to populate counts?","code":"rust use std::collections::HashMap; fn main() {     let mut counts = HashMap::new();     let text = \"LinkedIn Learning\";     for c in text.chars() {         // Complete this block     }     println!(\"{:?}\", counts); }  rust for c in text.chars() {     if let Some(count) = &mut counts.get(&c) {         counts.insert(c, *count + 1);     } else {         counts.insert(c, 1);     }; }  rust for c in text.chars() {     let count = counts.entry(c).or_insert(0);     *count += 1; }  rust for c in text.chars() {     let count = counts.entry(c);     *count += 1; }  rust for c in text.chars() {     counts.entry(c).or_insert(0).map(|x| x + 1); }","reference":"```","choices":[null,null,null,null],"answer":[1]},{"id":17,"question":"Which fragment does not incur memory allocations while writing to a \"file\" (represented by a Vec<u8>)?","code":"rust use std::collections::HashMap; fn main() -> Result<(), Box<dyn std::error::Error>> {     let mut v = Vec::<u8>::new();     let a = \"LinkedIn\";     let b = 123;     let c = 'ðŸ§€';     // replace this line     println!(\"{:?}\", v);     Ok(()) }  rust write!(&mut v, \"{}{}{}\", a, b, c)?;  rust v.write(a)?; v.write(b)?; v.write(c)?;  rust v.write(a, b, c)?;  rust v.write_all(a.as_bytes())?; v.write_all(&b.to_string().as_bytes())?; c.encode_utf8(&mut v);  1. [Answered in rust user forum](https://users.rust-lang.org/t/formatting-and-writing-to-a-file-without-malloc-or-locks/52295/9) 2. [reference](https://doc.rust-lang.org/std/macro.write.html)","reference":"2. [reference](https://doc.rust-lang.org/std/macro.write.html)","choices":[null,null,null,null],"answer":[0]},{"id":18,"question":"Does the `main` function compile? If so, why? If not, what do you need to change?","code":"rust fn main() {     let Some(x) = some_option_value; }","reference":"```","choices":["The code does not compile. `let` statements require a refutable pattern. Add `if` before `let`.","The code compiles. `let` statements sometimes require a refutable pattern.","The code does not compile. `let` statements requires an irrefutable pattern. Add `if` before `let`.","The code compiles. `let` do not require a refutable pattern."],"answer":[2]},{"id":19,"question":"Which statement about lifetimes is false?","code":"","reference":"","choices":["Lifetimes were redundantly specified in previous version of Rust.","Lifetimes are specified when a struct is holding a reference to a value.","Lifetimes are specified when certain values must outlive others.","Lifetimes are always inferred by the compiler."],"answer":[3]},{"id":20,"question":"When used as a return type, which Rust type plays a similar role to Python's `None`, JavaScript's `null`, or the `void` type in C/C++?","code":"","reference":"","choices":["`!`","`None`","`Null`","`()`"],"answer":[3]},{"id":21,"question":"To convert a `Result` to an `Option`, which method should you use?","code":"","reference":"","choices":["`.as_option()`","`.ok()`","`.to_option()`","`.into()`"],"answer":[1]},{"id":22,"question":"Which statement about the `Clone` and `Copy` traits is false?","code":"","reference":"","choices":["`Copy` is enabled for primitive, built-in types.","Without `Copy`, Rust applies move semantics to a type's access.","When using `Clone`, copying data is explicit.","Until a type implements either `Copy` or `Clone`, its internal data cannot be copied."],"answer":[0]},{"id":23,"question":"Why does this code _not_ compile?","code":"rust fn returns_closure() -> dyn Fn(i32) -> i32 {     |x| x + 1 }","reference":"```","choices":["The returned `fn` pointer and value need to be represented by another trait.","Closures are types, so they cannot be returned directly from a function.","Closures are types and can be returned only if the concrete trait is implemented.","Closures are represented by traits, so they cannot be a return type."],"answer":[3]},{"id":24,"question":"What smart pointer is used to allow multiple ownership of a value in various threads?","code":"","reference":"","choices":["`Arc<T>`","`Box<T>`","Both `Arc<T>` and `Rc<T>` are multithread safe.","`Rc<T>`"],"answer":[0]},{"id":25,"question":"Which types are _not_ allowed within an enum variant's body?","code":"","reference":"","choices":["zero-sized types","structs","trait objects","floating-point numbers"],"answer":[2]},{"id":26,"question":"Which statement about this code is true?","code":"rust fn main() {     let c = 'z';     let heart_eyed_cat = 'ðŸ˜»'; }","reference":"```","choices":["Both are character literals.","`heart_eyed_cat` is an invalid expression.","`c` is a string literal and `heart_eyed_cat` is a character literal.","Both are string literals."],"answer":[0]},{"id":27,"question":"Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?","code":"","reference":"","choices":["`Mutex<Arc<T>>`","`Rc<Mutex<T>>`","`Arc<Mutex<T>>`","`Mutex<Rc<T>>`"],"answer":[2]},{"id":28,"question":"Which idiom can be used to concatenate the strings `a`, `b`, `c`?","code":"rust let a = \"a\".to_string(); let b = \"b\".to_string(); let c = \"c\".to_string();","reference":"```","choices":["`String::from(a,b,c)`","`format!(\"{}{}{}\", a, b, c)`","`concat(a,b,c)`","`a + b + c`"],"answer":[1]},{"id":29,"question":"In this function. what level of access is provided to the variable `a`?","code":"rust use std::fmt::Debug; fn report<T:Debug>(a: &T) {     eprintln!(\"info: {:?}\", a); }","reference":"```","choices":["print","read-only","read/write","debug"],"answer":[1]},{"id":30,"question":"Which choice is _not_ valid loop syntax?","code":"","reference":"","choices":["`loop`","`for`","`while`","`do`"],"answer":[3]},{"id":31,"question":"How do you construct a value of `Status` that is initialized to `Waiting`?","code":"rust enum Status {     Waiting,     Busy,     Error(String), }","reference":"```","choices":["`let s = Enum::new(Status::Waiting);`","`let s = new Status::Waiting;`","`let s = Status::Waiting;`","`let s = Status::new(Waiting);`"],"answer":[2]},{"id":32,"question":"Which statement about enums is false?","code":"","reference":"","choices":["Enums are useful in matching patterns.","Option is an enum type.","Enum variants can have different types with associated data.","the term _enum_ is short for _enummap_"],"answer":[3]}]