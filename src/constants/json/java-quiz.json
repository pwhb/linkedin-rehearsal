[{"id":1,"question":"Given the string \"strawberries\" saved in a variable called fruit, what would `fruit.substring(2, 5)` return?","code":"**Reasoning:** The substring method is accepting two arguments.","reference":"**Reasoning:** The substring method is accepting two arguments.","choices":["rawb","raw","awb","traw",null,null,null,null,null],"answer":[1]},{"id":2,"question":"How can you achieve runtime polymorphism in Java?","code":"","reference":"","choices":["method overloading","method overrunning","method overriding","method calling"],"answer":[2]},{"id":3,"question":"Given the following definitions, which of these expression will **NOT** evaluate to true?","code":"`boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;`","reference":"`boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;`","choices":["`(i1 | i2) == 3`","`i2 && b1`","`b1 || !b2`","`(i1 ^ i2) < 4`"],"answer":[1]},{"id":4,"question":"What is the output of this code?","code":"java 1: class Main { 2:   public static void main (String[] args) { 3:     int array[] = {1, 2, 3, 4}; 4:     for (int i = 0; i < array.size(); i++) { 5:        System.out.print(array[i]); 6:     } 7:   } 8: }","reference":"```","choices":["It will not compile because of line 4.","It will not compile because of line 3.","123","1234"],"answer":[0]},{"id":5,"question":"Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?","code":"java interface Interface1 {     static void print() {         System.out.print(\"Hello\");     } } interface Interface2 {     static void print() {         System.out.print(\"World!\");     } }","reference":"```","choices":["`super1.print(); super2.print();`","`this.print();`","`super.print();`","`Interface1.print(); Interface2.print();`"],"answer":[3]},{"id":6,"question":"What does the following code print?","code":"java String str = \"abcde\"; str.trim(); str.toUpperCase(); str.substring(3, 4); System.out.println(str);","reference":"```","choices":["CD","CDE","D","\"abcde\""],"answer":[3]},{"id":7,"question":"What is the result of this code?","code":"java class Main {     public static void main (String[] args){         System.out.println(print(1));     }     static Exception print(int i){         if (i>0) {             return new Exception();         } else {             throw new RuntimeException();         }     } }","reference":"```","choices":["It will show a stack trace with a runtime exception.","\"java.lang.Exception\"","It will run and throw an exception.","It will not compile."],"answer":[1]},{"id":8,"question":"Which class can compile given these declarations?","code":"java interface One {     default void method() {         System.out.println(\"One\");     } } interface Two {     default void method () {         System.out.println(\"One\");     } }  java class Three implements One, Two {     public void method() {         super.One.method();     } }  java class Three implements One, Two {     public void method() {         One.method();     } }  java class Three implements One, Two { }  java class Three implements One, Two {     public void method() {         One.super.method();     } }","reference":"```","choices":["A","B","C","D"],"answer":[3]},{"id":9,"question":"What is the output of this code?","code":"java class Main {     public static void main (String[] args) {         List list = new ArrayList();         list.add(\"hello\");         list.add(2);         System.out.print(list.get(0) instanceof Object);         System.out.print(list.get(1) instanceof Integer);     } }","reference":"```","choices":["The code does not compile.","truefalse","truetrue","falsetrue"],"answer":[2]},{"id":10,"question":"Given the following two classes, what will be the output of the Main class?","code":"java package mypackage; public class Math {     public static int abs(int num){         return num < 0 ? -num : num;     } } package mypackage.elementary; public class Math {     public static int abs (int num) {         return -num;     } }  java import mypackage.Math; import mypackage.elementary.*; class Main {     public static void main (String args[]){         System.out.println(Math.abs(123));     } }  **Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`","reference":"**Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`","choices":["Lines 1 and 2 generate compiler errors due to class name conflicts.","\"-123\"","It will throw an exception on line 5.","\"123\""],"answer":[3]},{"id":11,"question":"What is the result of this code?","code":"java 1: class MainClass { 2:  final String message(){ 3:      return \"Hello!\"; 4:  } 5: } 6: class Main extends MainClass { 7:  public static void main(String[] args) { 8:      System.out.println(message()); 9:  } 10: String message(){ 11:     return \"World!\"; 12:  } 13: }  **Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.","reference":"**Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.","choices":["It will not compile because of line 10.","\"Hello!\"","It will not compile because of line 2.","\"World!\""],"answer":[0]},{"id":12,"question":"Given this code, which command will output \"2\"?","code":"java class Main {     public static void main(String[] args) {         System.out.println(args[2]);     } }","reference":"```","choices":["`java Main 1 2 \"3 4\" 5`","`java Main 1 \"2\" \"2\" 5`","`java Main.class 1 \"2\" 2 5`","`java Main 1 \"2\" \"3 4\" 5`"],"answer":[1]},{"id":13,"question":"What is the output of this code?","code":"java class Main {     public static void main(String[] args){         int a = 123451234512345;         System.out.println(a);     } }  **Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.","reference":"**Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.","choices":["\"123451234512345\"","Nothing - this will not compile.","a negative integer value","\"12345100000\""],"answer":[1]},{"id":14,"question":"What is the output of this code?","code":"java class Main {     public static void main (String[] args) {         String message = \"Hello world!\";         String newMessage = message.substring(6, 12)             + message.substring(12, 6);         System.out.println(newMessage);     } }","reference":"```","choices":["The code does not compile.","A runtime exception is thrown.","\"world!!world\"","\"world!world!\""],"answer":[1]},{"id":15,"question":"How do you write a foreach loop that will iterate over ArrayList<Pencil>pencilCase?","code":"","reference":"","choices":["`for (Pencil pencil : pencilCase) {}`","`for (pencilCase.next()) {}`","`for (Pencil pencil : pencilCase.iterator()) {}`","`for (pencil in pencilCase) {}`"],"answer":[0]},{"id":16,"question":"What does this code print?","code":"java System.out.print(\"apple\".compareTo(\"banana\"));","reference":"```","choices":["`0`","positive number","negative number","compilation error"],"answer":[2]},{"id":17,"question":"You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?","code":"","reference":"","choices":["`names.sort(Comparator.comparing(String::toString))`","`Collections.sort(names)`","`names.sort(List.DESCENDING)`","`names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`"],"answer":[2]},{"id":18,"question":"By implementing encapsulation, you cannot directly access the class's _ properties unless you are writing code inside the class itself.","code":"","reference":"","choices":["private","protected","no-modifier","public"],"answer":[0]},{"id":19,"question":"Which is the most up-to-date way to instantiate the current date?","code":"**Explanation**: LocalDate is the newest class added in java 8","reference":"**Explanation**: LocalDate is the newest class added in java 8","choices":["`new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())`","`new Date(System.currentTimeMillis())`","`LocalDate.now()`","`Calendar.getInstance().getTime()`"],"answer":[2]},{"id":20,"question":"Fill in the blank to create a piece of code that will tell whether `int0` is divisible by `5`:","code":"`boolean isDivisibleBy5 = _____`","reference":"`boolean isDivisibleBy5 = _____`","choices":["`int0 / 5 ? true: false`","`int0 % 5 == 0`","`int0 % 5 != 5`","`Math.isDivisible(int0, 5)`"],"answer":[1]},{"id":21,"question":"How many times will this code print \"Hello World!\"?","code":"java class Main {     public static void main(String[] args){         for (int i=0; i<10; i=i++){             i+=1;             System.out.println(\"Hello World!\");         }     } }  **Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).","reference":"**Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).","choices":["10 times","9 times","5 times","infinite number of times"],"answer":[0]},{"id":22,"question":"The runtime system starts your program by calling which function first?","code":"","reference":"","choices":["print","iterative","hello","main"],"answer":[3]},{"id":23,"question":"What code would you use in Constructor A to call Constructor B?","code":"java public class Jedi {   /* Constructor A */   Jedi(String name, String species){}   /* Constructor B */   Jedi(String name, String species, boolean followsTheDarkSide){}   }    **Note:** This code won't compile, possibly broken code sample.","reference":"  **Note:** This code won't compile, possibly broken code sample.","choices":["Jedi(name, species, false)","new Jedi(name, species, false)","this(name, species, false)","super(name, species, false)"],"answer":[2]},{"id":24,"question":"Which statement is **NOT** true?","code":"","reference":"","choices":["An anonymous class may specify an abstract base class as its base type.","An anonymous class does not require a zero-argument constructor.","An anonymous class may specify an interface as its base type.","An anonymous class may specify both an abstract class and interface as base types."],"answer":[1]},{"id":25,"question":"What will this program print out to the console when executed?","code":"java import java.util.LinkedList; public class Main {     public static void main(String[] args){         LinkedList<Integer> list = new LinkedList<>();         list.add(5);         list.add(1);         list.add(10);         System.out.println(list);     } }","reference":"```","choices":["[5, 1, 10]","[10, 5, 1]","[1, 5, 10]","[10, 1, 5]"],"answer":[0]},{"id":26,"question":"What is the output of this code?","code":"java class Main {     public static void main(String[] args){        String message = \"Hello\";        for (int i = 0; i<message.length(); i++){           System.out.print(message.charAt(i+1));        }     } }","reference":"```","choices":["\"Hello\"","A runtime exception is thrown.","The code does not compile.","\"ello\""],"answer":[1]},{"id":27,"question":"Object-oriented programming is a style of programming where you organize your program around _ rather than _ and data rather than logic.","code":"","reference":"","choices":["functions; actions","objects; actions","actions; functions","actions; objects"],"answer":[1]},{"id":28,"question":"What statement returns true if \"nifty\" is of type String?","code":"","reference":"","choices":["`\"nifty\".getType().equals(\"String\")`","`\"nifty\".getType() == String`","`\"nifty\".getClass().getSimpleName() == \"String\"`","`\"nifty\" instanceof String`"],"answer":[3]},{"id":29,"question":"What is the output of this code?","code":"java import java.util.*; class Main { \tpublic static void main(String[] args) { \t\tList<Boolean> list = new ArrayList<>(); \t\tlist.add(true); \t\tlist.add(Boolean.parseBoolean(\"FalSe\")); \t\tlist.add(Boolean.TRUE); \t\tSystem.out.print(list.size()); \t\tSystem.out.print(list.get(1) instanceof Boolean); \t} }","reference":"```","choices":["A runtime exception is thrown.","3false","2true","3true"],"answer":[3]},{"id":30,"question":"What is the result of this code?","code":"java 1: class Main { 2: \tObject message(){ 3: \t\treturn \"Hello!\"; 4: \t} 5: \tpublic static void main(String[] args) { 6: \t\tSystem.out.print(new Main().message()); 7: \t\tSystem.out.print(new Main2().message()); 8: \t} 9: } 10: class Main2 extends Main { 11: \tString message(){ 12: \t\treturn \"World!\"; 13: \t} 14: }","reference":"```","choices":["It will not compile because of line 7.","Hello!Hello!","Hello!World!","It will not compile because of line 11."],"answer":[2]},{"id":31,"question":"What method can be used to create a new instance of an object?","code":"","reference":"","choices":["another instance","field","constructor","private method"],"answer":[2]},{"id":32,"question":"Which is the most reliable expression for testing whether the values of two string variables are the same?","code":"","reference":"","choices":["string1 == string2","string1 = string2","string1.matches(string2)","string1.equals(string2)"],"answer":[3]},{"id":33,"question":"Which letters will print when this code is run?","code":"java public static void main(String[] args) { \ttry { \t\tSystem.out.println(\"A\"); \t\tbadMethod(); \t\tSystem.out.println(\"B\"); \t} catch (Exception ex) { \t\tSystem.out.println(\"C\"); \t} finally { \t\tSystem.out.println(\"D\"); \t} } public static void badMethod() { \tthrow new Error(); }  **Explanation**: `Error` is not inherited from `Exception`","reference":"**Explanation**: `Error` is not inherited from `Exception`","choices":["A, B, and D","A, C, and D","C and D","A and D"],"answer":[3]},{"id":34,"question":"What is the output of this code?","code":"java class Main { \tstatic int count = 0; \tpublic static void main(String[] args) { \t\tif (count < 3) { \t\t\tcount++; \t\t\tmain(null); \t\t} else { \t\t\treturn; \t\t} \t\tSystem.out.println(\"Hello World!\"); \t} }","reference":"```","choices":["It will throw a runtime exception.","It will not compile.","It will print \"Hello World!\" three times.","It will run forever."],"answer":[2]},{"id":35,"question":"What is the output of this code?","code":"java import java.util.*; class Main { \tpublic static void main(String[] args) { \t\tString[] array = {\"abc\", \"2\", \"10\", \"0\"}; \t\tList<String> list = Arrays.asList(array); \t\tCollections.sort(list); \t\tSystem.out.println(Arrays.toString(array)); \t} }  **Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)","reference":"**Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)","choices":["`[abc, 0, 2, 10]`","The code does not compile.","`[abc, 2, 10, 0]`","`[0, 10, 2, abc]`"],"answer":[3]},{"id":36,"question":"What is the output of this code?","code":"java class Main { \tpublic static void main(String[] args) { \t\tString message = \"Hello\"; \t\tprint(message); \t\tmessage += \"World!\"; \t\tprint(message); \t} \tstatic void print(String message){ \t\tSystem.out.print(message); \t\tmessage += \" \"; \t} }","reference":"```","choices":["Hello World!","HelloHelloWorld!","Hello Hello World!","Hello HelloWorld!"],"answer":[1]},{"id":37,"question":"What is displayed when this code is compiled and executed?","code":"java public class Main { \tpublic static void main(String[] args) { \t\tint x = 5; \t\tx = 10; \t\tSystem.out.println(x); \t} }","reference":"```","choices":["x","null","10","5"],"answer":[2]},{"id":38,"question":"Which approach cannot be used to iterate over a List named _theList_?","code":"java for (int i = 0; i < theList.size(); i++) {     System.out.println(theList.get(i)); }  java for (Object object : theList) {     System.out.println(object); }  java Iterator it = theList.iterator(); for (it.hasNext()) {     System.out.println(it.next()); }  java theList.forEach(System.out::println);  **Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.","reference":"**Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.","choices":["A","B","C","D"],"answer":[2]},{"id":39,"question":"What method signature will work with this code?","code":"`boolean healthyOrNot = isHealthy(\"avocado\");`","reference":"`boolean healthyOrNot = isHealthy(\"avocado\");`","choices":["public void isHealthy(String avocado)","boolean isHealthy(String string)","public isHealthy(\"avocado\")","private String isHealthy(String food)"],"answer":[1]},{"id":40,"question":"Which are valid keywords in a Java module descriptor (module-info.java)?","code":"","reference":"","choices":["provides, employs","imports, exports","consumes, supplies","requires, exports"],"answer":[3]},{"id":41,"question":"Which type of variable keeps a constant value once it is assigned?","code":"","reference":"","choices":["non-static","static","final","private"],"answer":[2]},{"id":42,"question":"How does the keyword `volatile` affect how a variable is handled?","code":"","reference":"","choices":["It will be read by only one thread at a time.","It will be stored on the hard drive.","It will never be cached by the CPU.","It will be preferentially garbage collected."],"answer":[2]},{"id":43,"question":"What is the result of this code?","code":"java char smooch = 'x'; System.out.println((int) smooch);","reference":"```","choices":["an alphanumeric character","a negative number","a positive number","a ClassCastException"],"answer":[2]},{"id":44,"question":"You get a NullPointerException. What is the most likely cause?","code":"","reference":"","choices":["A file that needs to be opened cannot be found.","A network connection has been lost in the middle of communications.","Your code has used up all available memory.","The object you are using has not been instantiated."],"answer":[3]},{"id":45,"question":"How would you fix this code so that it compiles?","code":"java public class Nosey { \tint age; \tpublic static void main(String[] args) { \t\tSystem.out.println(\"Your age is: \" + age); \t} }","reference":"```","choices":["Make age static.","Make age global.","Make age public.","Initialize age to a number."],"answer":[0]},{"id":46,"question":"Add a Duck called \"Waddles\" to the ArrayList **ducks**.","code":"java public class Duck { \tprivate String name; \tDuck(String name) {} }        `ducks.add(waddles);`       `ducks.add(waddles);`","reference":"      `ducks.add(waddles);`","choices":["`Duck waddles = new Duck();`","`Duck duck = new Duck(\"Waddles\");`","`ducks.add(new Duck(\"Waddles\"));`","`ducks.add(new Waddles());`"],"answer":[2]},{"id":47,"question":"If you encounter `UnsupportedClassVersionError` it means the code was `___` on a newer version of Java than the JRE `___` it.","code":"","reference":"","choices":["executed; interpreting","executed; compiling","compiled; executing","compiled, translating"],"answer":[2]},{"id":48,"question":"Given this class, how would you make the code compile?","code":"java public class TheClass {     private final int x; }  java public TheClass() {     x += 77; }  java public TheClass() {     x = null; }  java public TheClass() {     x = 77; }  java private void setX(int x) {     this.x = x; } public TheClass() {     setX(77); }  **Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.","reference":"**Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.","choices":["A","B","C","D"],"answer":[2]},{"id":49,"question":"How many times f will be printed?","code":"java public class Solution {     public static void main(String[] args) {         for (int i = 44; i > 40; i--) {             System.out.println(\"f\");         }     } }","reference":"```","choices":["4","3","5","A Runtime exception will be thrown"],"answer":[0]},{"id":50,"question":"Which statements about `abstract` classes are true?","code":"1. They can be instantiated. 2. They allow member variables and methods to be inherited by subclasses. 3. They can contain constructors.","reference":"```","choices":["1, 2, and 3","only 3","2 and 3","only 2"],"answer":[2]},{"id":51,"question":"Which keyword lets you call the constructor of a parent class?","code":"","reference":"","choices":["parent","super","this","new"],"answer":[1]},{"id":52,"question":"What is the result of this code?","code":"java   1: int a = 1;   2: int b = 0;   3: int c = a/b;   4: System.out.println(c);","reference":"```","choices":["It will throw an ArithmeticException.","It will run and output 0.","It will not compile because of line 3.","It will run and output infinity."],"answer":[0]},{"id":53,"question":"Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?","code":"","reference":"","choices":["Add a static import.","Declare local copies of the constant in your code.","This cannot be done. You must always qualify references to static members with the class form which they came from.","Put the static members in an interface and inherit from that interface."],"answer":[0]},{"id":54,"question":"Which keyword lets you use an interface?","code":"","reference":"","choices":["extends","implements","inherits","import"],"answer":[1]},{"id":55,"question":"Why are ArrayLists better than arrays?","code":"","reference":"","choices":["You don't have to decide the size of an ArrayList when you first make it.","You can put more items into an ArrayList than into an array.","ArrayLists can hold more kinds of objects than arrays.","You don't have to decide the type of an ArrayList when you first make it."],"answer":[0]},{"id":56,"question":"Declare a variable that holds the first four digits of Π","code":"**Reasoning:** java public class TestReal {     public static void main (String[] argv)     {       double pi = 3.14159265;       //accuracy up to 15 digits       float pi2 = 3.141F;           //accuracy up to 6-7 digits       System.out.println (\"Pi=\" + pi);       System.out.println (\"Pi2=\" + pi2);     }   }   The default Java type which Java will be using for a float variable will be double. So, even if you declare any variable as float, what the compiler has to actually do is to assign a double value to a float variable, which is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.","reference":"```","choices":["int pi = 3.141;","decimal pi = 3.141;","double pi = 3.141;","float pi = 3.141;"],"answer":[2]},{"id":57,"question":"Use the magic power to cast a spell","code":"java public class MagicPower {     void castSpell(String spell) {} }        `magicPower.castSpell();`","reference":"      `magicPower.castSpell();`","choices":["`new MagicPower().castSpell(\"expecto patronum\")`","`MagicPower magicPower = new MagicPower();`","`MagicPower.castSpell(\"expelliarmus\");`","`new MagicPower.castSpell();`"],"answer":[0]},{"id":58,"question":"What language construct serves as a blueprint containing an object's properties and functionality?","code":"","reference":"","choices":["constructor","instance","class","method"],"answer":[2]},{"id":59,"question":"What does this code print?","code":"java public static void main(String[] args) {     int x=5,y=10;     swapsies(x,y);     System.out.println(x+\" \"+y); } static void swapsies(int a, int b) {     int temp=a;     a=b;     b=temp; }","reference":"```","choices":["10 10","5 10","10 5","5 5"],"answer":[1]},{"id":60,"question":"What is the result of this code?","code":"java try {     System.out.println(\"Hello World\"); } catch (Exception e) {     System.out.println(\"e\"); } catch (ArithmeticException e) {     System.out.println(\"e\"); } finally {     System.out.println(\"!\"); }","reference":"```","choices":["Hello World","It will not compile because the second catch statement is unreachable","Hello World!","It will throw runtime exception"],"answer":[1]},{"id":61,"question":"Which is not a java keyword","code":"**Explanation:** `native` is a part of JNI interface","reference":"**Explanation:** `native` is a part of JNI interface","choices":["finally","native","interface","unsigned"],"answer":[3]},{"id":62,"question":"Which operator would you use to find the remainder after division?","code":"","reference":"","choices":["`%`","`//`","`/`","`DIV`"],"answer":[0]},{"id":63,"question":"Which choice is a disadvantage of inheritance?","code":"","reference":"","choices":["Overridden methods of the parent class cannot be reused.","Responsibilities are not evenly distributed between parent and child classes.","Classes related by inheritance are tightly coupled to each other.","The internal state of the parent class is accessible to its children."],"answer":[2]},{"id":64,"question":"Declare and initialize an array of 10 ints.","code":"","reference":"","choices":["`Array<Integer> numbers = new Array<Integer>(10);`","`Array[int","`int[","`int numbers["],"answer":[2]},{"id":65,"question":"Refactor this event handler to a lambda expression:","code":"java groucyButton.addActionListener(new ActionListener() {     @Override     public void actionPerformed(ActionEvent e) {         System.out.println(\"Press me one more time..\");     } });","reference":"```","choices":["`groucyButton.addActionListener(ActionListener listener -> System.out.println(\"Press me one more time...\"));`","`groucyButton.addActionListener((event) -> System.out.println(\"Press me one more time...\"));`","`groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(\"Press me one more time...\");});`","`groucyButton.addActionListener(() -> System.out.println(\"Press me one more time...\"));`"],"answer":[1]},{"id":66,"question":"Which functional interfaces does Java provide to serve as data types for lambda expressions?","code":"","reference":"","choices":["Observer, Observable","Collector, Builder","Filter, Map, Reduce","Consumer, Predicate, Supplier"],"answer":[3]},{"id":67,"question":"What is a valid use of the hashCode() method?","code":"","reference":"","choices":["encrypting user passwords","deciding if two instances of a class are equal","enabling HashMap to find matches faster","moving objects from a List to a HashMap"],"answer":[1]},{"id":68,"question":"What kind of relationship does \"extends\" denote?","code":"","reference":"","choices":["uses-a","is-a","has-a","was-a"],"answer":[1]},{"id":69,"question":"How do you force an object to be garbage collected?","code":"","reference":"","choices":["Set object to null and call Runtime.gc()","Set object to null and call System.gc()","Set object to null and call Runtime.getRuntime().runFinalization()","There is no way to force an object to be garbage collected"],"answer":[1]},{"id":70,"question":"Java programmers commonly use design patterns. Some examples are the **_**, which helps create instances of a class, the **_**, which ensures that only one instance of a class can be created; and the **_**, which allows for a group of algorithms to be interchangeable.","code":"","reference":"","choices":["static factory method; singleton; strategy pattern","strategy pattern; static factory method; singleton","creation pattern; singleton; prototype pattern","singleton; strategy pattern; static factory method"],"answer":[0]},{"id":71,"question":"Using Java's Reflection API, you can use _ to get the name of a class and _ to retrieve an array of its methods.","code":"","reference":"","choices":["this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()","this.getName(); this.getMethods()","Reflection.getName(this); Reflection.getMethods(this)","Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()"],"answer":[0]},{"id":72,"question":"Which is not a valid lambda expression?","code":"","reference":"","choices":["`a -> false;`","`(a) -> false;`","`String a -> false;`","`(String a) -> false;`"],"answer":[2]},{"id":73,"question":"Which access modifier makes variables and methods visible only in the class where they are declared?","code":"","reference":"","choices":["public","protected","nonmodifier","private"],"answer":[3]},{"id":74,"question":"What type of variable can be assigned to only once?","code":"","reference":"","choices":["private","non-static","final","static"],"answer":[2]},{"id":75,"question":"How would you convert a String to an Int?","code":"","reference":"","choices":["`\"21\".intValue()`","`String.toInt(\"21\")`","`Integer.parseInt(\"21\")`","`String.valueOf(\"21\")`"],"answer":[2]},{"id":76,"question":"What method should be added to the Duck class to print the name Moby?","code":"java public class Duck {     private String name;     Duck(String name) {         this.name = name;     }     public static void main(String[] args) {         System.out.println(new Duck(\"Moby\"));     } }","reference":"```","choices":["`public String toString() { return name; } `","`public void println() { System.out.println(name); } `","`String toString() { return this.name; } `","`public void toString() { System.out.println(this.name); } `"],"answer":[0]},{"id":77,"question":"Which operator is used to concatenate Strings in Java","code":"","reference":"","choices":["`+`","`&`","`.`","`-`"],"answer":[0]},{"id":78,"question":"How many times does this loop print \"exterminate\"?","code":"java for (int i = 44; i > 40; i--) {     System.out.println(\"exterminate\"); }","reference":"```","choices":["two","four","three","five"],"answer":[1]},{"id":79,"question":"What is the value of myCharacter after line 3 is run?","code":"java 1: public class Main { 2:   public static void main (String[] args) { 3:     char myCharacter = \"piper\".charAt(3); 4:   } 5: }","reference":"```","choices":["p","r","e","i"],"answer":[2]},{"id":80,"question":"When should you use a static method?","code":"","reference":"","choices":["when your method is related to the object's characteristics","when you want your method to be available independently of class instances","when your method uses an object's instance variable","when your method is dependent on the specific instance that calls it"],"answer":[1]},{"id":81,"question":"What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?","code":"","reference":"","choices":["pass by reference","pass by occurrence","pass by value","API call"],"answer":[2]},{"id":82,"question":"In Java, what is the scope of a method's argument or parameter?","code":"","reference":"","choices":["inside the method","both inside and outside the method","neither inside nor outside the method","outside the method"],"answer":[0]},{"id":83,"question":"What is the output of this code?","code":"java public class Main {   public static void main (String[] args) {     int[] sampleNumbers = {8, 5, 3, 1};     System.out.println(sampleNumbers[2]);   } }","reference":"```","choices":["5","8","1","3"],"answer":[3]},{"id":84,"question":"Which change will make this code compile successfully?","code":"java 1: public class Main { 2:   String MESSAGE =\"Hello!\"; 3:   static void print(){ 4:     System.out.println(message); 5:   } 6:   void print2(){} 7: }  **Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`","reference":"**Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`","choices":["Change line 2 to `public static final String message`","Change line 6 to `public void print2(){}`","Remove the body of the `print2` method and add a semicolon.","Remove the body of the `print` method."],"answer":[3]},{"id":85,"question":"What is the output of this code?","code":"java import java.util.*; class Main {   public static void main(String[] args) {     String[] array = new String[]{\"A\", \"B\", \"C\"};     List<String> list1 = Arrays.asList(array);     List<String> list2 = new ArrayList<>(Arrays.asList(array));     List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\"));     System.out.print(list1.equals(list2));     System.out.print(list1.equals(list3));   } }","reference":"```","choices":["falsefalse","truetrue","falsetrue","truefalse"],"answer":[1]},{"id":86,"question":"Which code snippet is valid?","code":"","reference":"","choices":["`ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};`","`ArrayList words = Arrays.asList(\"Hello\", \"World\");`","`ArrayList<String> words = {\"Hello\", \"World\"};`","`ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));`"],"answer":[3]},{"id":87,"question":"What is the output of this code?","code":"java class Main {   public static void main(String[] args) {     StringBuilder sb = new StringBuilder(\"hello\");     sb.deleteCharAt(0).insert(0, \"H\").\" World!\";     System.out.println(sb);   } }","reference":"```","choices":["A runtime exception is thrown.","\"HelloWorld!\"","\"hello\"","????"],"answer":[0]},{"id":88,"question":"How would you use the TaxCalculator to determine the amount of tax on $50?","code":"java class TaxCalculator {   static calculate(total) {     return total * .05;   } }  **Note:** This code won't compile, broken code sample","reference":"**Note:** This code won't compile, broken code sample","choices":["TaxCalculator.calculate(50);","new TaxCalculator.calculate(50);","calculate(50);","new TaxCalculator.calculate($50);"],"answer":[0]},{"id":89,"question":"What is the output of this code?","code":"java  public class Main {     public static void main(String[] args) {       HashMap<String, Integer> pantry = new HashMap<>();       pantry.put(\"Apples\", 3);       pantry.put(\"Oranges\", 2);       int currentApples = pantry.get(\"Apples\");       pantry.put(\"Apples\", currentApples + 4);       System.out.println(pantry.get(\"Apples\"));     } }","reference":"```","choices":["3","4","6","7"],"answer":[3]},{"id":90,"question":"Which characteristic does not apply to instances of java.util.HashSet=","code":"**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.","reference":"**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.","choices":["uses hashcode of objects when inserted","contains unordred elements","contains unique elements","contains sorted elements"],"answer":[3]},{"id":91,"question":"What is the output?","code":"java import java.util.*; public class Main { \tpublic static void main(String[] args) \t{ \t\tPriorityQueue<Integer> queue = new PriorityQueue<>(); \t\tqueue.add(4); \t\tqueue.add(3); \t\tqueue.add(2); \t\tqueue.add(1); \t\twhile (queue.isEmpty() == false) { \t\t\tSystem.out.printf(\"%d\", queue.remove()); \t\t} \t} }","reference":"```","choices":["1 3 2 4","4 2 3 1","1 2 3 4","4 3 2 1"],"answer":[2]},{"id":92,"question":"What will this code print, assuming it is inside the main method of a class?","code":"`System.out.println(\"hello my friends\".split(\" \")[0]);`","reference":"`System.out.println(\"hello my friends\".split(\" \")[0]);`","choices":["my","hellomyfriends","hello","friends"],"answer":[2]},{"id":93,"question":"You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?","code":"","reference":"","choices":["2","When calling the put method, Java will throw an exception","4","3"],"answer":[3]},{"id":94,"question":"Which class acts as root class for Java Exception hierarchy?","code":"","reference":"","choices":["Clonable","Throwable","Object","Serializable"],"answer":[1]},{"id":95,"question":"Which class does not implement the java.util.Collection interface?","code":"**Explanation**: HashMap class implements Map interface.","reference":"**Explanation**: HashMap class implements Map interface.","choices":["java.util.Vector","java.util.ArrayList","java.util.HashSet","java.util.HashMap"],"answer":[3]},{"id":96,"question":"You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?","code":"","reference":"","choices":["`employees.collect(employee -> employee.getName());`","`employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`","`employees.stream().map(Employee::getName).collect(Collectors.toList());`","`employees.stream().collect((e) -> e.getName());`"],"answer":[2]},{"id":97,"question":"What is the correct return type for the `processFunction` method:","code":"____ processFunction(Integer number, Function<Integer, String> lambda) {     return lambda.apply(number); }","reference":"```","choices":["Function<Integer, String>","Integer","String","Consumer"],"answer":[2]},{"id":98,"question":"This code does not compile. What needs to be changed so that it does?","code":"public enum Direction {     EAST(\"E\"),     WEST(\"W\"),     NORTH(\"N\"),     SOUTH(\"S\");     private final String shortCode;     public String getShortCode() {         return shortCode;     } }","reference":"```","choices":["Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.","Remove the `final` keyword for the field `shortCode`.","All enums need to be defined on a single line of code.","Add a setter method for the field `shortCode`."],"answer":[0]},{"id":99,"question":"Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?","code":"","reference":"","choices":["try-catch-finally","try-finally-close","try-with-resources","try-catch-close"],"answer":[2]},{"id":100,"question":"What code should go in line 3?","code":"java class Main {     public static void main(String[] args) {         array[0] = new int[]{1, 2, 3};         array[1] = new int[]{4, 5, 6};         array[2] = new int[]{7, 8, 9};         for (int i = 0; i < 3; i++)             System.out.print(array[i][1]); //prints 258     } }","reference":"```","choices":["`int[][","`int[][","`int[][","`int[]["],"answer":[1]},{"id":101,"question":"Is this an example of method overloading or overriding?","code":"java class Car {     public void accelerate() {} } class Lambo extends Car {     public void accelerate(int speedLimit) {}     public void accelerate() {} }","reference":"```","choices":["neither","both","overloading","overriding"],"answer":[1]},{"id":102,"question":"Which choice is the best data type for working with money in Java?","code":"","reference":"","choices":["float","String","double","BigDecimal"],"answer":[3]},{"id":103,"question":"Which statement about constructors is not ture?","code":"","reference":"","choices":["A class can have multiple constructors with a different parameter list.","You can call another constructor with `this` or `super`.","A constructor does not define a return value.","Every class must explicitly define a constructor without parameters."],"answer":[3]},{"id":104,"question":"What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?","code":"","reference":"","choices":["Regular Expressions","Reflection","Generics","Concurrency"],"answer":[2]},{"id":105,"question":"What will be printed?","code":"java public class Berries{     String berry = \"blue\";     public static void main( String[] args ) {         new Berries().juicy( \"straw\" );     }     void juicy(String berry){         this.berry = \"rasp\";         System.out.println(berry + \"berry\");     } }","reference":"```","choices":["raspberry","strawberry","blueberry","rasp"],"answer":[1]},{"id":106,"question":"What is the value of `forestCount` after this code executes?","code":"java Map<String, Integer> forestSpecies = new HashMap<>(); forestSpecies.put(\"Amazon\", 30000); forestSpecies.put(\"Congo\", 10000); forestSpecies.put(\"Daintree\", 15000); forestSpecies.put(\"Amazon\", 40000); int forestCount = forestSpecies.size();","reference":"```","choices":["3","4","2","When calling the put method, Java will throw an exception"],"answer":[0]},{"id":107,"question":"What is a problem with this code?","code":"java import java.util.ArrayList; import java.util.Arrays; import java.util.List; class Main {     public static void main( String[] args ) {         List<String> list = new ArrayList<String>( Arrays.asList( \"a\", \"b\", \"c\" ) );         for( String value :list ){             if( value.equals( \"a\" ) ) {                 list.remove( value );             }         }         System.out.println(list); // outputs [b,c]     } }","reference":"```","choices":["String should be compared using == method instead of equals.","Modifying a collection while iterating through it can throw a ConcurrentModificationException.","The List interface does not allow an argument of type String to be passed to the remove method.","ArrayList does not implement the List interface."],"answer":[1]},{"id":108,"question":"How do you convert this method into a lambda expression?","code":"java public int square(int x){     return x * x; }","reference":"```","choices":["`Function<Integer, Integer> squareLambda = (int x) -> { x * x };`","`Function<Integer, Integer> squareLambda = () -> { return x * x };`","`Function<Integer, Integer> squareLambda = x -> x * x;`","`Function<Integer, Integer> squareLambda = x -> return x * x;`"],"answer":[2]},{"id":109,"question":"Which choice is a valid implementation of this interface?","code":"java interface MyInterface {     int foo(int x); }  java public class MyClass implements MyInterface {     // ....     public void foo(int x){         System.out.println(x);     } }  java public class MyClass implements MyInterface {     // ....     public double foo(int x){         return x * 100;     } }  java public class MyClass implements MyInterface {     // ....     public int foo(int x){         return x * 100;     } }  java public class MyClass implements MyInterface {     // ....     public int foo(){         return 100;     } }","reference":"```","choices":["A","B","C","D"],"answer":[2]},{"id":110,"question":"What is the result of this program?","code":"java interface Foo{     int x = 10; } public class Main{     public static void main( String[] args ) {         Foo.x = 20;         System.out.println(Foo.x);     } }","reference":"```","choices":["10","20","null","An error will occur when compiling."],"answer":[3]},{"id":111,"question":"Which statement must be inserted on line 1 to print the value true?","code":"1: 2: Optional<String> opt = Optional.of(val); 3: System.out.println(opt.isPresent());","reference":"```","choices":["`Integer val = 15;`","`String val = \"Sam\";`","`String val = null;`","`Optional<String> val = Optional.empty();`"],"answer":[1]},{"id":112,"question":"What will this code print, assuming it is inside the main method of a class?","code":"java System.out.println(true && false || true); System.out.println(false || false && true);","reference":"```","choices":["false </br> true","true </br> true","true </br> false","false </br> false"],"answer":[2]},{"id":113,"question":"What will this code print?","code":"java List<String> list1 = new ArrayList<>(); list1.add( \"One\" ); list1.add( \"Two\" ); list1.add( \"Three\" ); List<String> list2 = new ArrayList<>(); list2.add( \"Two\" ); list1.remove( list2 ); System.out.println(list1);","reference":"```","choices":["`[Two]`","`[One, Two, Three]`","`[One, Three]`","`Two`"],"answer":[2]},{"id":114,"question":"Which code checks whether the characters in two Strings,named `time` and `money`, are the same?","code":"","reference":"","choices":["`if(time <> money){}`","`if(time.equals(money)){}`","`if(time == money){}`","`if(time = money){}`"],"answer":[1]},{"id":115,"question":"An **_** is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An **_** is an unexpected event that an application may be able to deal with in order to continue execution.","code":"","reference":"","choices":["exception,assertion","AbnormalException, AccidentalException","error, exception","exception, error"],"answer":[2]},{"id":116,"question":"Which keyword would not be allowed here?","code":"java class Unicorn {     _____ Unicorn(){} }","reference":"```","choices":["static","protected","public","void"],"answer":[0]},{"id":117,"question":"Which OOP concept is this code an example of?","code":"java List[] myLists = {     new ArrayList<>(),     new LinkedList<>(),     new Stack<>(),     new Vector<>(), }; for (List list : myLists){     list.clear(); }  **Explanation:** switch between different implementations of the `List` interface","reference":"**Explanation:** switch between different implementations of the `List` interface","choices":["composition","generics","polymorphism","encapsulation"],"answer":[2]},{"id":118,"question":"What does this code print?","code":"java String a = \"bikini\"; String b = new String(\"bikini\"); String c = new String(\"bikini\"); System.out.println(a == b); System.out.println(b == c);  **Explanation:** `== operator` compares the object reference. `String a = \"bikini\"; String b = \"bikini\";` would result in True. Here new creates a new object, so false. Use `equals() method` to compare the content.","reference":"**Explanation:** `== operator` compares the object reference. `String a = \"bikini\"; String b = \"bikini\";` would result in True. Here new creates a new object, so false. Use `equals() method` to compare the content.","choices":["true; false","false; false","false; true","true; true"],"answer":[1]},{"id":119,"question":"Which is the problem with this code?","code":"java class Main { \tpublic static void main(String[] args) { \t\tList<String> list = new ArrayList<String>(Arrays.asList(\"a\",\"b\",\"c\")); \t\tfor (String value : list) { \t\t\tif (value.equals(\"a\")){ \t\t\t\tlist.remove(value); \t\t\t} \t\t} \t\tSystem.out.println(list); //outputs [b,c] \t} }","reference":"```","choices":["ArrayList does not implement the `List` interface.","The `List` interface does not allow an argument of type String to be passed to the remove method.","Strings should be compared using `==` instead of `equals`.","Modifying a collection while iterating through it can throw a ConcurrentModificationException"],"answer":[3]},{"id":120,"question":"What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?","code":"","reference":"","choices":["native","volatile","synchronized","lock"],"answer":[2]}]