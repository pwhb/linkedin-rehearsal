[{"id":1,"question":"What is this code an example of?","code":"swift let val = (Double)6","reference":"```","choices":["a syntax issue","typecasting","assignment","initialization"],"answer":[0]},{"id":2,"question":"What is the error in this code?","code":"swift let x = 5 guard x == 5 { return }","reference":"```","choices":["The guard is missing the else.","Nothing is wrong.","The guard is missing a then.","The comparison is wrong."],"answer":[0]},{"id":3,"question":"What is the raw/underlying type of this enum?","code":"swift enum Direction {   case north, south, east, west }","reference":"```","choices":["There is none.","String","Any","Int"],"answer":[0]},{"id":4,"question":"Why is dispatchGroup used in certain situations?","code":"","reference":"","choices":["It allows multiple synchronous or asynchronous operations to run on different queues.","It allows track and control execution of multiple operations together.","It allows operations to wait for each other as desired.","all of these answers."],"answer":[3]},{"id":5,"question":"What is this code an example of?","code":"swift let val = 5 print(\"value is: (val)\")","reference":"```","choices":["string interpolation","string compilation","method chaining","string concatenation"],"answer":[0]},{"id":6,"question":"What are the contents of `vals` after this code is executed?","code":"swift var vals = [10, 2] vals.sort { (s1, s2) -> Bool in   s1 > s2 }","reference":"```","choices":["[10, 2]","[2, 10]","nil","This code contains an error"],"answer":[0]},{"id":7,"question":"What does this code print?","code":"swift typealias Thing = [String:Any] var stuff: Thing print(type(of: stuff))","reference":"```","choices":["Dictionary<String, Any>","Dictionary","ERROR","Thing"],"answer":[0]},{"id":8,"question":"What is the value of y?","code":"swift let x = [\"1\", \"2\"].dropFirst() let y = x[0]","reference":"```","choices":["This code contains an error","1","2","nil"],"answer":[0]},{"id":9,"question":"What is the value of test in this code?","code":"swift var test = 1 == 1","reference":"```","choices":["TRUE","YES","1","This code contains an error"],"answer":[0]},{"id":10,"question":"What is the value of y?","code":"swift var x: Int? let y = x ?? 5","reference":"```","choices":["5","0","nil","This code contains an error"],"answer":[0]},{"id":11,"question":"What is the type of this function?","code":"swift func add(a: Int, b: Int) -> Int { return a+b }","reference":"```","choices":["Int","(Int, Int) -> Int","Int<Optional>","Functions don't have types."],"answer":[1]},{"id":12,"question":"What is the correct way to call this function?","code":"swift func myFunc(_ a: Int, b: Int) -> Int {   return a + b }","reference":"```","choices":["myFunc(5, b: 6)","myFunc(5, 6)","myFunc(a: 5, b: 6)","myFunc(a, b)"],"answer":[0]},{"id":13,"question":"The Codable protocol is **_**?","code":"","reference":"","choices":["a combination of Encodable and Decodable","not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable","required of all classes","automatically included in all classes"],"answer":[0]},{"id":14,"question":"What is the type of value1 in this code?","code":"swift let value1 = \"(\"test\".count)\"","reference":"```","choices":["String","Int","null","test.count"],"answer":[0]},{"id":15,"question":"When a function takes a closure as a parameter, when do you want to mark is as escaping?","code":"","reference":"","choices":["when it's executed after the function returns","when it's scope is undefined","when it's lazy loaded","all of these answers"],"answer":[0]},{"id":16,"question":"What's wrong with this code?","code":"swift class Person {   var name: String   var address: String }","reference":"```","choices":["Person has no initializers.","Person has no base class.","var name is not formatted corrrectly.","address is a keyword."],"answer":[0]},{"id":17,"question":"What is the value of names after this code is executed?","code":"swift let names = [\"Bear\", \"Joe\", \"Clark\"] names.map { (s) -> String in   return s.uppercased() }","reference":"```","choices":["[\"BEAR\", \"JOE\", \"CLARK\"]","[\"B\", \"J\", \"C\"]","[\"Bear\", \"Joe\", \"Clark\"]","This code contains an error."],"answer":[2]},{"id":18,"question":"What describes this line of code?","code":"swift let val = 5","reference":"```","choices":["a constant named val of type Int","a variable named val of type item","a constant named val of type Number","a variable named val of type Int"],"answer":[0]},{"id":19,"question":"What is the error in this code?","code":"swift extension String {   var firstLetter: Character = \"c\" {     didSet {       print(\"new value\")     }   } }","reference":"```","choices":["Extensions can't add properties. // although extensions technically can't contain stored properties","Nothing is wrong with it.","didSet takes a parameter.","c is not a character."],"answer":[0]},{"id":20,"question":"didSet and willSet are examples of **_**?","code":"","reference":"","choices":["property observers","key properties","all of these answers","newOld value calls"],"answer":[0]},{"id":21,"question":"What is wrong with this code?","code":"swift self.callback = {   self.attempts += 1   self.downloadFailed() }","reference":"```","choices":["Use of self inside the closure causes retain cycle.","You cannot assign a value to closure in this manner.","You need to define the type of closure explicitly.","There is nothing wrong with this code."],"answer":[0]},{"id":22,"question":"How many values does vals have after this code is executed?","code":"swift var vals = Set<String> = [\"4\", \"5\", \"6\"] vals.insert(\"5\")","reference":"```","choices":["three","four","eight","This code contains an error."],"answer":[3]},{"id":23,"question":"How can you avoid a strong reference cycle in a closure?","code":"","reference":"","choices":["Use a capture list to set class instances of weak or unowned.","You can't, there will always be a danger of strong reference cycles inside a closure.","Initialize the closure as read-only.","Declare the closure variable as lazy."],"answer":[0]},{"id":24,"question":"What is wrong with this code?","code":"swift if let s = String.init(\"some string\") {   print(s) }","reference":"```","choices":["This String initializer does not return an optional.","String does not have an initializer that can take a String.","= is not a comparison.","Nothing is wrong with this code."],"answer":[0]},{"id":25,"question":"Which code snippet correctly creates a typealias closure?","code":"","reference":"","choices":["typealias CustomClosure: () -> ()","typealias CustomClosure { () -> () }","typealias CustomClosure -> () -> ()","typealias CustomClosure -> () {}"],"answer":[0]},{"id":26,"question":"How do you reference class members from within a class?","code":"","reference":"","choices":["self","instance","class","this"],"answer":[0]},{"id":27,"question":"All value types in Swift are **_** under the hood?","code":"","reference":"","choices":["structs","classes","optionals","generics"],"answer":[0]},{"id":28,"question":"What is the correct way to add a value to this array?","code":"swift var strings = [1, 2, 3]","reference":"```","choices":["all of these answers","strings.append(4)","strings.insert(5, at: 1)","strings += [5]"],"answer":[0]},{"id":29,"question":"How many times will this loop be executed?","code":"swift for i in 0...100 {   print(i) }","reference":"```","choices":["0","101","99","100"],"answer":[1]},{"id":30,"question":"What can AnyObject represent?","code":"","reference":"","choices":["an instance of any class","an instance of function type","all of these answers","an instance of an optional type"],"answer":[2]},{"id":31,"question":"What does this code print?","code":"swift typealias Thing = [String:Any] var stuff : Thing print(type(of:stuff))","reference":"```","choices":["Dictionary","ERROR","Thing","Dictionary<String, Any>"],"answer":[3]},{"id":32,"question":"What is the value of t after this code is executed?","code":"swift let names = [\"Larry\", \"Sven\", \"Bear\"] let t = names.enumerated().first().offset","reference":"```","choices":["This code is invalid.","This code does not compile.","0","1","Larry"],"answer":[0,1]},{"id":33,"code":"swift let vt = (name: \"ABC\", val: 5) let test = vt.0","reference":"```","choices":["ABC","0","5","name"],"answer":[0]},{"id":34,"code":"swift class LSN : MMM { }","reference":"```","choices":["MMM","LSN","There is no base class.","This code is invalid."],"answer":[0]},{"id":35,"code":"swift var userLocation: String = \"Home\" {   willSet(newValue) {   print(\"About to set userLocation to (newValue)...\")   }   didSet {   if userLocation != oldValue {   print(\"userLocation updated with new value!\")   } else {   print(\"userLocation already set to that value...\")   }   }  }  userLocation = \"Work\"","reference":"```","choices":["About to set userLocation to Work… userLocation updated with new value!","About to set userLocation to Work… userLocation already set to that value…","About to set userLocation to Home… userLocation updated to new value!","ERROR"],"answer":[0]},{"id":36,"code":"","reference":"","choices":["a base class convenience initializer","either a designated or another convenience initializer","a designated initializer","none of these answers"],"answer":[2]},{"id":37,"code":"","reference":"","choices":["DispatchQueue.visible","DispatchQueue.global","errorExample need to be labeled as `throws`.","DispatchQueue.background"],"answer":[1]},{"id":38,"code":"swift let x = [\"a\", \"b\", \"c\"]","reference":"```","choices":["`String[]`","`Array<String>`","`Set<String>`","`Array<Character>`"],"answer":[1]},{"id":39,"code":"swift let nThings: [Any] = [1, \"2\", \"three\"] let oThings = nThings.reduce(\"\") { \"($0)($1)\" }","reference":"```","choices":["11212three","115","12three","Nothing, this code is invalid."],"answer":[2]},{"id":40,"code":"","reference":"","choices":["`!try`","`try?`","`try!`","`?try`"],"answer":[1]},{"id":41,"code":"swift protocol TUI {   func add(x1 : Int, x2 : Int) -> Int {     return x1 + x2   } }","reference":"```","choices":["Protocol functions cannot have return types.","Protocol functions cannot have implementations.","Nothing is wrong with it.","`add` is a reserved keyword."],"answer":[1]},{"id":42,"code":"swift class Car {   var wheels: Int = 4   let doors = 4 }","reference":"```","choices":["class members","This code is invalid.","class fields","class properties"],"answer":[3]},{"id":43,"code":"","reference":"","choices":["You cannot","deinit","`init?`","init"],"answer":[2]},{"id":44,"code":"swift let dbl = Double.init(\"5a\") print(dbl ?? \".asString()\")","reference":"```","choices":["five","5a","`.asString()`","5"],"answer":[2]},{"id":45,"code":"swift func add(this x: Int, toThat y: Int)->{}","reference":"```","choices":["none of these answers","local terms","argument labels","parameters names"],"answer":[2]},{"id":46,"code":"swift for (key, value) in [1: \"one\", 2: \"two\"]{   print(key, value) }","reference":"```","choices":["The interaction source is invalid","The interaction variable is invalid","There is nothing wrong with this code","The comma in the print is misplaced"],"answer":[2]},{"id":47,"code":"","reference":"","choices":["XCTest","all of these answers","@testable","XCAssert"],"answer":[1]},{"id":48,"code":"swift class Square{   var height: Int = 0   var width : Int {     return height   } }","reference":"```","choices":["This code contains error","a closure","a computed property","lazy loading"],"answer":[2]},{"id":49,"code":"swift let vals = (\"val\", 1)","reference":"```","choices":["a dictionary","a tuple","an optional","This code contains error"],"answer":[1]},{"id":50,"code":"swift var x = 5 x = 10.0","reference":"```","choices":["You cannot assign a Double to a variable of type Int","x is undefined","x is a constant","x has no type"],"answer":[0]},{"id":51,"code":"swift var items = [\"a\":1, \"b\":2, \"c\":\"test\"] as [String: Any] items[\"c\"] = nil print(items[\"c\"] as Any)","reference":"```","choices":["Any","test","1,2,3","nil"],"answer":[3]},{"id":52,"code":"swift let val = 5.0 + 10","reference":"```","choices":["There is nothing wrong with this code","val is a constant and cannot be changed","5.0 and 10 are different types","There is no semicolon"],"answer":[0]},{"id":53,"code":"swift struct Test{   var score: Int   var date: Date }","reference":"```","choices":["zero","This code contains an error","two","Structs do not have initializers"],"answer":[2]},{"id":54,"code":"swift let x = try? String.init(\"test\") print(x)","reference":"```","choices":["nil","Nothing - this code contains an error","Optional(\"test\")","test"],"answer":[2]},{"id":55,"code":"swift var vals = [1,2,3]","reference":"```","choices":["`vals.sort { $0 < $1 }`","`vals.sort { (s1, s2) in s1 < s2 }`","`vals.sort(by: <)`","all of these answers"],"answer":[3]},{"id":56,"code":"","reference":"","choices":["not executed","executed in the main queue","none of these answers","executed on the background thread"],"answer":[1]},{"id":57,"code":"","reference":"","choices":["When a class instance needs memory","All of these answers","When the executable code is finished","When a class instance is being removed from memory"],"answer":[1]},{"id":58,"code":"","reference":"","choices":["String?","Optional[String]","[String]?","?String"],"answer":[0]},{"id":59,"code":"swift for i in [\"0\", \"1\"]{   print(i) }","reference":"```","choices":["one","two","three","This code does not compile"],"answer":[1]},{"id":60,"code":"swift let names = [\"Bear\", \"Tony\", \"Svante\"] print(names[1]+\"Bear\")","reference":"```","choices":["1Bear","BearBear","TonyBear","Nothing, this code is invalid"],"answer":[2]},{"id":61,"code":"swift let name: String?","reference":"```","choices":["name can hold only a string value.","name can hold either a string or nil value.","Optional values cannot be `let` constants.","Only non-empty string variables can be stored in name."],"answer":[1]},{"id":62,"code":"swift let i = 5 let val = i * 6.0","reference":"```","choices":["This code is invalid.","6","30","0"],"answer":[0]},{"id":63,"code":"swift enum Positions : Int {   case first, second, third, other } print (Positions.other.rawValue)","reference":"```","choices":["3","0","other","nil"],"answer":[0]},{"id":64,"code":"swift \"t\".forEach { (char) in     print(char) }","reference":"```","choices":["nil","Nothing, since the code contains an error","t","zero"],"answer":[2]},{"id":65,"code":"swift let s1 = [\"1\", \"2\", \"3\"]     .filter { $0 > \"0\" }     .sorted { $0 > $1 } print(s1)","reference":"```","choices":["[]","[\"3\", \"2\", \"1\"]","[321]","[\"1\", \"2\", \"3\"]"],"answer":[1]},{"id":66,"code":"(Question does not make that much sense though. )","reference":"(Question does not make that much sense though. )","choices":["associated values","integral values","raw values","custom values"],"answer":[0]},{"id":67,"code":"swift class AmP : MMM, AOM {   }","reference":"```","choices":["class","protocol","enumeration","struct"],"answer":[1]},{"id":68,"code":"swift let numbers = [1,2,3,4,5,6].filter{ $0 % 2 == 0}","reference":"```","choices":["[1,3,5]","[]","[2,4,6]","nil"],"answer":[2]}]