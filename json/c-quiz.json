[{"id":1,"question":"Which Code sample will eventually cause the computer to run out of memory?","code":"c while(1) {     char *smallString = (char *) malloc(10); }  c long long number = 1;     while(1)     number *= 2;  c while(1) {     char hugeString[1000000L];     memset(hugeString, 0, 1000000L); }  c while(1) {     long *bigArray = (long *) malloc(sizeof(long) * 1000);     memset(bigArray, 1000000, 1000);     free(bigArray); }","choices":[{"text":"c\nwhile(1)\n{\n    char *smallString = (char *) malloc(10);\n}\n","code":true,"answer":true},{"text":"c\nlong long number = 1;\n    while(1)\n    number *= 2;\n","code":true,"answer":false},{"text":"c\nwhile(1)\n{\n    char hugeString[1000000L];\n    memset(hugeString, 0, 1000000L);\n}\n","code":true,"answer":false},{"text":"c\nwhile(1)\n{\n    long *bigArray = (long *) malloc(sizeof(long) * 1000);\n    memset(bigArray, 1000000, 1000);\n    free(bigArray);\n}\n","code":true,"answer":false}]},{"id":2,"question":"What will this code print on the screen?","code":"c int f1 (int a, int b) {     if (a > b)     {         printf(\"A is greater than Bn\");         return 1;     }     else     {         printf(\"B is greater than A\");         return 0;     } } main() {     if (f1(20,10) || f1(10,20))         printf(\"C is fun!n\"); }   A is greater then B C is fun!   A is greater then B B is greater then A C is fun!   A is greater then B B is greater then A","choices":[{"text":"\nA is greater then B\nC is fun!\n","code":true,"answer":true},{"text":"\nA is greater then B\nB is greater then A\nC is fun!\n","code":true,"answer":false},{"text":"\nA is greater then B\nB is greater then A\n","code":true,"answer":false}]},{"id":3,"question":"What is the name for calling a function inside the same function?","code":"","reference":"","choices":[{"text":"recursion","answer":true,"code":false},{"text":"subfunction","answer":false,"code":false},{"text":"inner call","answer":false,"code":false},{"text":"infinite loop","answer":false,"code":false}]},{"id":4,"question":"What does the declaration of variable c2 demonstrate?","code":"c main(){     char c1 ='a';     char c2 = c1+10; }","reference":"```","choices":[{"text":"character arithmetic","answer":true,"code":false},{"text":"undefined assignment","answer":false,"code":false},{"text":"type conversion","answer":false,"code":false},{"text":"invalid declaration","answer":false,"code":false}]},{"id":5,"question":"A pointer to void named vptr, has been set to point to a floating point variable named g. What is the valid way to dereference vptr to assign its pointed value to a float variable named f later in this program?","code":"c float g; void *vptr=&g;","reference":"```","choices":[{"text":"f = _(float _)vptr;","answer":false,"code":false},{"text":"f = (float *)vptr;","answer":false,"code":false},{"text":"f = *(float *)vptr;","answer":true,"code":false},{"text":"f = *(float)vptr;","answer":false,"code":false}]},{"id":6,"question":"What is this declaration an example of?","code":"c struct s {     int i;     struct s *s1;     struct s *s2; };","reference":"```","choices":[{"text":"a node","answer":true,"code":false},{"text":"a linked list","answer":false,"code":false},{"text":"a stack","answer":false,"code":false},{"text":"a binary tree","answer":false,"code":false}]},{"id":7,"question":"A C header file is a file with extension .h that contains function declarations and macro definitons to be shared between several source files. Header files are listed using the preprocessing directive #include, and can have one of the following formats: #include &lt;fileA&gt; or #include \"fileB\". What is the difference between these two formats?","code":"","reference":"","choices":[{"text":"The preprocessor will try to locate the fileA in same directory as the source file, and the fileB in a predetermined directory path.","answer":false,"code":false},{"text":"The preprocessor will try to locate the fileA in the fixed system directory. It will try to locate fileB in the directory path designated by the -l option added to the command line while compiling the source code.","answer":false,"code":false},{"text":"The file using fileA syntax must be system files, of unlimited number. fileB must be a user file at a maximun of one per source file.","answer":false,"code":false},{"text":"The preprocessor will try to locate the fileA in a predetermined directory path. It will try to locate fileB in the same directory as the source file along with a custom directory path.","answer":true,"code":false}]},{"id":8,"question":"Using a for loop, how could you write a C code to count down from 10 to 1 and display each number on its own line?","code":"c for (int i = 0; i>=0, i--){     printf(\"%dn\", i); }//end of loop  c int i; for (i=1; i<=10; i++){     printf(\"%d\", i); }  c int i = 10; while (i>0){     printf(\"%dn\", i);     i--; }  c int i; for (i= 10; i>0; i--){     printf(\"%dn\", i); }// end of loop","choices":[{"text":"c\nfor (int i = 0; i>=0, i--){\n    printf(\"%dn\", i);\n}//end of loop\n","code":true,"answer":false},{"text":"c\nint i;\nfor (i=1; i<=10; i++){\n    printf(\"%d\", i);\n}\n","code":true,"answer":false},{"text":"c\nint i = 10;\nwhile (i>0){\n    printf(\"%dn\", i);\n    i--;\n}\n","code":true,"answer":false},{"text":"c\nint i;\nfor (i= 10; i>0; i--){\n    printf(\"%dn\", i);\n}// end of loop\n","code":true,"answer":true}]},{"id":9,"question":"What is not one of the reserved words in standard C?","code":"","reference":"","choices":[{"text":"volatile","answer":false,"code":false},{"text":"typeof","answer":true,"code":false},{"text":"register","answer":false,"code":false},{"text":"typedef","answer":false,"code":false}]},{"id":10,"question":"What does the program shown below return?","code":"c int main(){     int a=1, b=2, c=3, d=4;     int x = a;     if (a>b)     if (b<c) x=b;     else x=c;     return(x); }","reference":"```","choices":[{"text":"1","answer":true,"code":false},{"text":"3","answer":false,"code":false},{"text":"2","answer":false,"code":false},{"text":"0","answer":false,"code":false}]},{"id":11,"question":"Using the Union declaration below, how many bytes of memory space will the data of this type occupy?","code":"c union Cars {     char make[20];     char model[30];     short year; } car;","reference":"```","choices":[{"text":"32","answer":false,"code":false},{"text":"54","answer":false,"code":false},{"text":"30","answer":true,"code":false},{"text":"52","answer":false,"code":false}]},{"id":12,"question":"In this code sample, what is not a problem for C compiler?","code":"c main(){     constant int PI = 3.14;     printf(\"%fn\", pi); }","reference":"```","choices":[{"text":"The value of PI needs to be set to 3.141593, not 3.14","answer":true,"code":false},{"text":"The declaration of PI needs to say const, not constant.","answer":false,"code":false},{"text":"The data type of PI needs to be float not int.","answer":false,"code":false},{"text":"The printf statement needs to use PI, not pi.","answer":false,"code":false}]},{"id":13,"question":"Which is the smallest program to compile and run without errors?","code":"","reference":"","choices":[{"text":"main()","answer":false,"code":false},{"text":"int main() {return 0;}","answer":false,"code":false},{"text":"main() { }","answer":true,"code":false},{"text":"main() { ; }","answer":false,"code":false}]},{"id":14,"question":"What is optional in a function declaration?","code":"","reference":"","choices":[{"text":"data type of parameters","answer":false,"code":false},{"text":"return type of function","answer":false,"code":false},{"text":"parameter names","answer":true,"code":false},{"text":"number of parameters","answer":false,"code":false}]},{"id":15,"question":"C treats all devices, such as the display and the keyboard, as files. Which files opens automatically when a program executes?","code":"","reference":"","choices":[{"text":"stdout","answer":true,"code":false},{"text":"stdio.h","answer":false,"code":false},{"text":"default.h","answer":false,"code":false},{"text":"string.h","answer":false,"code":false}]},{"id":16,"question":"In which segment does dynamic memory allocation takes place?","code":"","reference":"","choices":[{"text":"BSS Segment","answer":false,"code":false},{"text":"stack","answer":false,"code":false},{"text":"heap","answer":true,"code":false},{"text":"data segment","answer":false,"code":false}]},{"id":17,"question":"Which of the following do you use to deallocate memory?","code":"","reference":"","choices":[{"text":"dalloc()","answer":false,"code":false},{"text":"dealloc()","answer":false,"code":false},{"text":"release()","answer":false,"code":false},{"text":"free()","answer":true,"code":false}]},{"id":18,"question":"In C language what are the basic building blocks that are constructed together to write a program?","code":"","reference":"","choices":[{"text":"keywords","answer":false,"code":false},{"text":"identifiers","answer":false,"code":false},{"text":"tokens","answer":true,"code":false},{"text":"functions","answer":false,"code":false}]},{"id":19,"question":"When is memory for a variable allocated?","code":"","reference":"","choices":[{"text":"during the assigment of the variable","answer":false,"code":false},{"text":"during the initialization of the variable","answer":false,"code":false},{"text":"during the declaration of the variable","answer":true,"code":false},{"text":"during the definition of the variable","answer":false,"code":false}]},{"id":20,"question":"By default c uses the call by value method to pass arguments to functions. How can you invoke the call by reference method?","code":"","reference":"","choices":[{"text":"by using pointers","answer":true,"code":false},{"text":"by declaring functions separately from defining them","answer":false,"code":false},{"text":"by using recursive functions","answer":false,"code":false},{"text":"by using global variables","answer":false,"code":false}]},{"id":21,"question":"A union allows you to store different `___` in the same `___`.","code":"","reference":"","choices":[{"text":"Objects; Structure","answer":false,"code":false},{"text":"Variables; Declaration","answer":false,"code":false},{"text":"Data types; Memory location","answer":true,"code":false},{"text":"Arrays; Header file","answer":false,"code":false}]},{"id":22,"question":"What is the output of this program?","code":"c main() {     char c1='a' , c2='A';     int i=c2-c1;     printf(\"%d\", i); }","reference":"```","choices":[{"text":"32","answer":false,"code":false},{"text":"Runtime error","answer":false,"code":false},{"text":"-32","answer":true,"code":false},{"text":"0","answer":false,"code":false}]},{"id":23,"question":"What is the difference between scanf() and sscanf() functions?","code":"","reference":"","choices":[{"text":"The scanf() function reads data formatted as a string; The sscanf() function reads string input from the screen.","answer":false,"code":false},{"text":"The scanf() function reads formatted data from the keyboard; The sscanf() function reads formatted input from a string.","answer":true,"code":false},{"text":"The scanf() function reads string data from the keyboard; The sscanf() function reads string data from a string.","answer":false,"code":false},{"text":"The scanf() function reads formatted data from a file; The sscanf() function reads input from a selected string","answer":false,"code":false}]},{"id":24,"question":"What is not a valid command with this declaration?","code":"c char *string[20] = { \"one\", \"two\", \"three\"};","reference":"```","choices":[{"text":"`printf(\"%c\", string[1][2]);`","answer":false,"code":false},{"text":"`printf(\"%s\", string[1][2]);`","answer":true,"code":false},{"text":"`printf(\"%s\", string[1]);`","answer":false,"code":false},{"text":"`printf(string[1]);`","answer":false,"code":false}]},{"id":25,"question":"What is the expression player->name equivalent to?","code":"","reference":"","choices":[{"text":"`player.name`","answer":false,"code":false},{"text":"`(*player).name`","answer":true,"code":false},{"text":"`*player.name`","answer":false,"code":false},{"text":"`player.*name`","answer":false,"code":false}]},{"id":26,"question":"Which program will compile and run without errors?","code":"c main() {     for(i=0; i<10; i++) ; }  c main() { int i=0;     for(; i<10; i++) ; }  c main() {     int i;     for(i=0; i<j; i++) ; }  c main() { int i;     for (i= 10; i<10; i++) }","choices":[{"text":"c\nmain() {\n    for(i=0; i<10; i++) ;\n}\n","code":true,"answer":false},{"text":"c\nmain() {\nint i=0;\n    for(; i<10; i++) ;\n}\n","code":true,"answer":true},{"text":"c\nmain() {\n    int i;\n    for(i=0; i<j; i++) ;\n}\n","code":true,"answer":false},{"text":"c\nmain() {\nint i;\n    for (i= 10; i<10; i++)\n}\n","code":true,"answer":false}]},{"id":27,"question":"What does this function call return?","code":"c 1 main() { float x = f1(10, 5); } 2 float f1(int a, int b) { return (a/b); }","reference":"```","choices":[{"text":"2","answer":false,"code":false},{"text":"2.000000","answer":false,"code":false},{"text":"a runtime error","answer":false,"code":false},{"text":"a compiler error","answer":true,"code":false}]},{"id":28,"question":"What does this program create?","code":"c #include <stdio.h> int main() {     int *p = NULL;     return 0; }","reference":"```","choices":[{"text":"a runtime error","answer":false,"code":false},{"text":"a NULL pointer","answer":true,"code":false},{"text":"a compile error","answer":false,"code":false},{"text":"a void pointer","answer":false,"code":false}]},{"id":29,"question":"What is an alternative way to write the expression (*x).y?","code":"","reference":"","choices":[{"text":"There is no equivalent.","answer":false,"code":false},{"text":"x->y","answer":true,"code":false},{"text":"*x->y","answer":false,"code":false},{"text":"y->x","answer":false,"code":false}]},{"id":30,"question":"Compile time errors are static errors that can be found where in the code?","code":"","reference":"","choices":[{"text":"in declarations and definitions","answer":true,"code":false},{"text":"in functions and expressions","answer":false,"code":false},{"text":"in syntax and semantics","answer":false,"code":false},{"text":"in objects and statements","answer":false,"code":false}]},{"id":31,"question":"File input and output (I/O) in C is heavily based on the way it is done `___`?","code":"","reference":"","choices":[{"text":"in Unix","answer":true,"code":false},{"text":"in C++","answer":false,"code":false},{"text":"in C#","answer":false,"code":false},{"text":"in DOS","answer":false,"code":false}]},{"id":32,"question":"What does the strcmp(str1, str2); function return?","code":"","reference":"","choices":[{"text":"0 if str1 and str2 are the same, a negative number if str1 is less than str2, a positive number if str1 is greater than str2","answer":true,"code":false},{"text":"true (1) if str1 and str2 are the same, false (0) if str1 and str2 are not the same","answer":false,"code":false},{"text":"true (1) if str1 and str2 are the same, NULL if str1 and str2 are not the same","answer":false,"code":false},{"text":"0 if str1 and str2 are the same, a negative number if str2 is less than str1, a positive number if str2 is greater than str1","answer":false,"code":false}]},{"id":33,"question":"What is the output of this program?","code":"c int a=10, b=20; int f1(a) { return(a*b); } main() { printf(\"%d\", f1(5)); }","reference":"```","choices":[{"text":"100","answer":true,"code":false},{"text":"200","answer":false,"code":false},{"text":"5","answer":false,"code":false},{"text":"50","answer":false,"code":false}]},{"id":34,"question":"Which is _not_ a correct way to declare a string variable?","code":"","reference":"","choices":[{"text":"`char *string = \"Hello World\";`","answer":false,"code":false},{"text":"`char string = \"Hello World\";`","answer":true,"code":false},{"text":"`char string[20","answer":false,"code":false},{"text":"`char string[","answer":false,"code":false}]},{"id":35,"question":"Which choice is an include guard for the header file mylib.h?","code":"c #ifdef MYLIB_H #undef MYLIB_H // mylib.h content #endif /* MYLIB_H */  c #ifndef MYLIB_H #define MYLIB_H // mylib.h content #endif /* MYLIB_H */  c #define MYLIB_H #include \"mylib.h\" #undef MYLIB_H  c #ifdef MYLIB_H #define MYLIB_H // mylib.h content #endif /* MYLIB_H */","choices":[{"text":"c\n#ifdef MYLIB_H\n#undef MYLIB_H\n\n// mylib.h content\n\n#endif /* MYLIB_H */\n","code":true,"answer":false},{"text":"c\n#ifndef MYLIB_H\n#define MYLIB_H\n\n// mylib.h content\n\n#endif /* MYLIB_H */\n","code":true,"answer":true},{"text":"c\n#define MYLIB_H\n#include \"mylib.h\"\n\n#undef MYLIB_H\n","code":true,"answer":false},{"text":"c\n#ifdef MYLIB_H\n#define MYLIB_H\n\n// mylib.h content\n\n#endif /* MYLIB_H */\n","code":true,"answer":false}]},{"id":36,"question":"How many times does the code inside the while loop get executed in this program?","code":"c main(){  int x=1;  while(x++<100){     x*=x;     if(x<10) continue;     if(x>50) break  } }","reference":"```","choices":[{"text":"100","answer":false,"code":false},{"text":"3","answer":true,"code":false},{"text":"5","answer":false,"code":false},{"text":"50","answer":false,"code":false}]},{"id":37,"question":"File input and output (I/O) in C is done through what?","code":"","reference":"","choices":[{"text":"syntax-driven components","answer":false,"code":false},{"text":"native interfaces","answer":false,"code":false},{"text":"system objects","answer":false,"code":false},{"text":"function calls","answer":true,"code":false}]},{"id":38,"question":"Directives are translated by the?","code":"","reference":"","choices":[{"text":"Pre-processor","answer":true,"code":false},{"text":"Compiler","answer":false,"code":false},{"text":"Linker","answer":false,"code":false},{"text":"Editor","answer":false,"code":false}]},{"id":39,"question":"The main loop structures in C programming are the for loop, the while loop, and which other loop?","code":"","reference":"","choices":[{"text":"do...while","answer":true,"code":false},{"text":"for...in","answer":false,"code":false},{"text":"repeat...until","answer":false,"code":false},{"text":"do...until","answer":false,"code":false}]},{"id":40,"question":"By default, C Functions are what type of functions?","code":"","reference":"","choices":[{"text":"global","answer":false,"code":false},{"text":"static","answer":false,"code":false},{"text":"library","answer":true,"code":false},{"text":"system","answer":false,"code":false}]},{"id":41,"question":"You have written a function that you want to include as a member of structure a. How is such as structure member defiened?","code":"c struct a {     void *f1; };  c struct a {     void (*f1)(); };  c struct a {     *(void *f1)(); };  c struct a {     void *f1(); };","choices":[{"text":"c\nstruct a {\n    void *f1;\n};\n","code":true,"answer":true},{"text":"c\nstruct a {\n    void (*f1)();\n};\n","code":true,"answer":false},{"text":"c\nstruct a {\n    *(void *f1)();\n};\n","code":true,"answer":false},{"text":"c\nstruct a {\n    void *f1();\n};\n","code":true,"answer":false}]},{"id":42,"question":"A Stack data structure allows all data operations at one end only, making it what kind of an implementation?","code":"","reference":"","choices":[{"text":"FIFO","answer":false,"code":false},{"text":"LIFO","answer":true,"code":false},{"text":"LILO","answer":false,"code":false},{"text":"LOLI","answer":false,"code":false}]},{"id":43,"question":"What does this program display?","code":"c main(){     char *p = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";     int i;     for (i=0;i<5;i++) *p++; *p++;     printf(\"%c\",*p++); }","reference":"```","choices":[{"text":"K","answer":false,"code":false},{"text":"M","answer":false,"code":false},{"text":"H","answer":false,"code":false},{"text":"G","answer":true,"code":false}]},{"id":44,"question":"Describe the relationship between lvalue and rvalue.","code":"","reference":"","choices":[{"text":"An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear only on the right-hand side.","answer":false,"code":false},{"text":"An lvalue may appear only on the left-hand side of an assignment; an rvalue may appear on either the left-hand or right-hand side.","answer":false,"code":false},{"text":"An lvaue and an rvalue may appear on either left-hand or right-hand side of an assignment.","answer":false,"code":false},{"text":"An lvalue may appear on the left-hand or right-hand side of an assignment; an rvalue may appear only on the right-hand side.","answer":true,"code":false}]},{"id":45,"question":"Which operator is used to access the address of a variable?","code":"","reference":"","choices":[{"text":"`%`","answer":false,"code":false},{"text":"`**`","answer":false,"code":false},{"text":"`*`","answer":false,"code":false},{"text":"`&`","answer":true,"code":false}]},{"id":46,"question":"Which add function properly returns the updated value of result?","code":"c void add (int a, int b, int *result) {     *result = a+b; } main() {     int a = 10;     int b = 20;     int result = 0;     add(a,b,&result); }  c void add (int a, int b, int result) {     result = a+b; } main() {     int a = 10;     int b = 20;     int result = 0;     add(a,b,result); }  c void add (int a, int b, int *result) {     result = a+b; } main() {     int a = 10;     int b = 20;     int result = 0;     add(a,b,result); }  c void add (int *a, int *b, int *result) {     result = a+b; } main() {     int a = 10;     int b = 20;     int result = 0;     add(*a,*b,*result); }","choices":[{"text":"c\nvoid add (int a, int b, int *result)\n{\n    *result = a+b;\n}\n\nmain()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;\n\n    add(a,b,&result);\n}\n","code":true,"answer":true},{"text":"c\nvoid add (int a, int b, int result)\n{\n    result = a+b;\n}\n\nmain()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;\n\n    add(a,b,result);\n}\n","code":true,"answer":false},{"text":"c\nvoid add (int a, int b, int *result)\n{\n    result = a+b;\n}\n\nmain()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;\n\n    add(a,b,result);\n}\n","code":true,"answer":false},{"text":"c\nvoid add (int *a, int *b, int *result)\n{\n    result = a+b;\n}\n\nmain()\n{\n    int a = 10;\n    int b = 20;\n    int result = 0;\n\n    add(*a,*b,*result);\n}\n","code":true,"answer":false}]},{"id":47,"question":"Consider the number of the Fibonacci series below 100: 0,1,1,2,3,5,8,13,21,34,55,89. Which piece of code outputs the sequence?","code":"c void fibonacci(int a, int b) {     int c = a+b;     if(a>100)        return;     printf(\"%d\", a);     fibonacci(a,b); } int main() {     fibonacci(0,1); }  c void fibonacci(int a, int b) {     int c = a+b;     if(a>100)        return;     printf(\"%d\", b);     fibonacci(a,c); } int main() {     fibonacci(0,1); }  c void fibonacci(int a, int b) {     int c = a+b;     if(a>100)        return;     printf(\"%d\", a);     fibonacci(b,c); } int main() {     fibonacci(0,1); }  c void fibonacci(int a, int b) {     int c = a+b;     if(a>100)        return;     printf(\"%d\", c);     fibonacci(b,c); } int main() {     fibonacci(0,1); }","choices":[{"text":"c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;\n\n    if(a>100)\n       return;\n\n    printf(\"%d\", a);\n\n    fibonacci(a,b);\n}\n\nint main()\n{\n    fibonacci(0,1);\n}\n","code":true,"answer":false},{"text":"c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;\n\n    if(a>100)\n       return;\n\n    printf(\"%d\", b);\n\n    fibonacci(a,c);\n}\n\nint main()\n{\n    fibonacci(0,1);\n}\n","code":true,"answer":false},{"text":"c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;\n\n    if(a>100)\n       return;\n\n    printf(\"%d\", a);\n\n    fibonacci(b,c);\n}\n\nint main()\n{\n    fibonacci(0,1);\n}\n","code":true,"answer":true},{"text":"c\nvoid fibonacci(int a, int b)\n{\n    int c = a+b;\n\n    if(a>100)\n       return;\n\n    printf(\"%d\", c);\n\n    fibonacci(b,c);\n}\n\nint main()\n{\n    fibonacci(0,1);\n}\n","code":true,"answer":false}]}]