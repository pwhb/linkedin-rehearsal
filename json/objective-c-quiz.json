[{"id":1,"question":"What is the value of s?","code":"NSMutableString *s = [NSMutableString stringWithString: @\"123\"];","reference":"```","choices":[{"text":"123456","answer":true,"code":false},{"text":"123","answer":false,"code":false},{"text":"456","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":2,"question":"What's the value of i after these statements?","code":"NSString *str = nil; NSInteger i = str.integerValue;","reference":"```","choices":[{"text":"nil","answer":false,"code":false},{"text":"0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)","answer":true,"code":false},{"text":"-1","answer":false,"code":false},{"text":"This code crashes.","answer":false,"code":false}]},{"id":3,"question":"What value is in str after this line in executed?","code":"`NSString str = \"test\" + \" \" + \"more\";`","reference":"`NSString str = \"test\" + \" \" + \"more\";`","choices":[{"text":"This code contains an error","answer":true,"code":false},{"text":"test","answer":false,"code":false},{"text":"nil","answer":false,"code":false},{"text":"test more","answer":false,"code":false}]},{"id":4,"question":"What does this code print?","code":"NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {       return evaluatedObject.intValue % 2 == 0;     }];     NSArray *vals = @[@\"1\", @\"2\", @\"3\"];     NSArray *n2 = [vals filteredArrayUsingPredicate:p2];     NSLog(@\"%@\", n2.firstObject);","reference":"```","choices":[{"text":"2","answer":true,"code":false},{"text":"1,2,3","answer":false,"code":false},{"text":"1,2","answer":false,"code":false},{"text":"Nothing, since this code contains an error.","answer":false,"code":false}]},{"id":5,"question":"Property defaults include _?","code":"","reference":"","choices":[{"text":"atomic/strong","answer":true,"code":false},{"text":"atomic/weak","answer":false,"code":false},{"text":"nonatomic/weak","answer":false,"code":false},{"text":"nonatomic/strong","answer":false,"code":false}]},{"id":6,"question":"What is the key difference between NSDictionary and NSMutableDictionary?","code":"","reference":"","choices":[{"text":"NSMutableDictionary's values can change","answer":true,"code":false},{"text":"NSMutableDictionary has not initializers.","answer":false,"code":false},{"text":"NSDictionary can't be copied.","answer":false,"code":false},{"text":"NSDictionary's values can change.","answer":false,"code":false}]},{"id":7,"question":"What is foo?","code":"`-(float)foo;`","reference":"`-(float)foo;`","choices":[{"text":"A function with a return type of float.","answer":true,"code":false},{"text":"This code contains an error.","answer":false,"code":false},{"text":"A variable declaration of type float.","answer":false,"code":false},{"text":"A property of type float.","answer":false,"code":false}]},{"id":8,"question":"What can you glean from this line?","code":"`#import \"NSString+NameHelper.h\"`","reference":"`#import \"NSString+NameHelper.h\"`","choices":[{"text":"NameHelper is a category of NSString.","answer":true,"code":false},{"text":"NameHelper is a subclass of NSString.","answer":false,"code":false},{"text":"NSString implements the NameHelper protocol.","answer":false,"code":false},{"text":"NSString has a helper class.","answer":false,"code":false}]},{"id":9,"question":"What's wrong with this code?","code":"`float x = 5.;`","reference":"`float x = 5.;`","choices":[{"text":"Nothing is wrong with this code.","answer":true,"code":false},{"text":"Declarations do not need semicolons.","answer":false,"code":false},{"text":"x=5 is an invalid float.","answer":false,"code":false},{"text":"Variables can't be declared and initialized in the same state.","answer":false,"code":false}]},{"id":10,"question":"How many times with this loop be executed?","code":"for (int x=0; x<100; x++) {   x = x + 1; }","reference":"```","choices":[{"text":"50","answer":true,"code":false},{"text":"99","answer":false,"code":false},{"text":"100","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":11,"question":"What is this code an example of?","code":"`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`","reference":"`[self addObserver: self forKeyPath: @\"val\" options:0 context: nil];`","choices":[{"text":"Key-Value Observing","answer":true,"code":false},{"text":"Class Value Observing","answer":false,"code":false},{"text":"Key-Data Observing","answer":false,"code":false},{"text":"KeyPath Observing","answer":false,"code":false}]},{"id":12,"question":"What does ARC stand for?","code":"","reference":"","choices":[{"text":"Automatic Reference Counting","answer":true,"code":false},{"text":"Automatic Retain Checking","answer":false,"code":false},{"text":"Async Retain Cycles","answer":false,"code":false},{"text":"Automatic Release Code","answer":false,"code":false}]},{"id":13,"question":"What is printed for this code?","code":"int val = 0; val = 1.5; printf(\"%d\", val);","reference":"```","choices":[{"text":"1","answer":true,"code":false},{"text":"2","answer":false,"code":false},{"text":"0","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":14,"question":"What best describes class inheritance in Objective-C?","code":"","reference":"","choices":[{"text":"single inheritance but multiple protocol implementation","answer":true,"code":false},{"text":"Objective-C doesn't support inheritance","answer":false,"code":false},{"text":"dual class inheritance","answer":false,"code":false},{"text":"unlimited class inheritance and protocol adherence","answer":false,"code":false}]},{"id":15,"question":"How many keys does this NSDictionary have after this code is executed?","code":"`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`","reference":"`NSDictionary *dict = [[NSDictionary alloc] initWithObjectsAndKeys: @\"b\", @\"e\", @\"a\", @\"r\", nil];`","choices":[{"text":"2","answer":true,"code":false},{"text":"4","answer":false,"code":false},{"text":"5","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":16,"question":"What is wrong with this code?","code":"NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];","reference":"```","choices":[{"text":"The key and value items are mixed","answer":false,"code":false},{"text":"Nothing is wrong with it","answer":true,"code":false},{"text":"You can't set the capacity of a dictionary","answer":false,"code":false},{"text":"NSMutableDictionary doesn't have a :setValue:forKey function.","answer":false,"code":false}]},{"id":17,"question":"What is printed from this code?","code":"NSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding]; NSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);","reference":"```","choices":[{"text":"print","answer":true,"code":false},{"text":"This code is invalid","answer":false,"code":false},{"text":"Nothing is printed from this code.","answer":false,"code":false},{"text":"nil","answer":false,"code":false}]},{"id":18,"question":"What is different about this function?","code":"`+(void)doSomething;`","reference":"`+(void)doSomething;`","choices":[{"text":"It is static","answer":true,"code":false},{"text":"It is abstract.","answer":false,"code":false},{"text":"It is inline.","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":19,"question":"Structs can have _?","code":"","reference":"","choices":[{"text":"functions","answer":false,"code":false},{"text":"initializers","answer":false,"code":false},{"text":"fields","answer":true,"code":false},{"text":"all of these answers","answer":false,"code":false}]},{"id":20,"question":"What is wrong with this code?","code":"@interface MyClass : NSObject     @property (strong, nonatomic, readonly) NSString *name;   @end","reference":"```","choices":[{"text":"There is nothing wrong with this code.","answer":true,"code":false},{"text":"There is not read-only directive.","answer":false,"code":false},{"text":"MyClass doesn't implement NSObject.","answer":false,"code":false},{"text":"Properties are declared in the implementation.","answer":false,"code":false}]},{"id":21,"question":"What is an enums base type for the code below?","code":"`typedef enum { Foo1, Foo2} Foo;`","reference":"`typedef enum { Foo1, Foo2} Foo;`","choices":[{"text":"There is no base type.","answer":true,"code":false},{"text":"NSObject","answer":false,"code":false},{"text":"int","answer":false,"code":false},{"text":"NSNumber","answer":false,"code":false}]},{"id":22,"question":"If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?","code":"","reference":"","choices":[{"text":"UserDefaults","answer":true,"code":false},{"text":"plist file","answer":false,"code":false},{"text":"CoreData","answer":false,"code":false},{"text":"TextFile","answer":false,"code":false}]},{"id":23,"question":"What are categories used for?","code":"","reference":"","choices":[{"text":"to extend other classes","answer":true,"code":false},{"text":"to manage access control","answer":false,"code":false},{"text":"to coordinate objects","answer":false,"code":false},{"text":"to group classes","answer":false,"code":false}]},{"id":24,"question":"What is this Objective-C code checking?","code":"if ([keyPath isInstanceOf:[NSString class]]) { }","reference":"```","choices":[{"text":"This code contains an error","answer":true,"code":false},{"text":"if keyPath is an instance of NSString","answer":false,"code":false},{"text":"if keyPath's baseclass is the same as NSString's baseclass","answer":false,"code":false},{"text":"if keyPath implements the same methods as NSString","answer":false,"code":false}]},{"id":25,"question":"What is this a declaration of?","code":"`int(^foo)(int);`","reference":"`int(^foo)(int);`","choices":[{"text":"an Extension","answer":false,"code":false},{"text":"a Generic","answer":false,"code":false},{"text":"a block of code","answer":true,"code":false},{"text":"an abstract class","answer":false,"code":false}]},{"id":26,"question":"For observing changes to a property, which of these two statements cause the related method to be called and why?","code":"1. _val = 1; 2. self.val= 100;","reference":"```","choices":[{"text":"Statement 2, since it calls the auto-created setter on the property.","answer":true,"code":false},{"text":"Statement 1, since it uses the property directly.","answer":false,"code":false},{"text":"Statement 2, since it specifies the class instance to use.","answer":false,"code":false},{"text":"Statement 1, since it calls the auto-created setter on the property.","answer":false,"code":false}]},{"id":27,"question":"What is wrong with this code?","code":"float x = 2.0; int(^foo)(int) = ^(int n1) {   return (int)(n1*x); }; foo(5);","reference":"```","choices":[{"text":"Ints and floats can't be multiplied.","answer":false,"code":false},{"text":"The parameter isn't declared correctly.","answer":false,"code":false},{"text":"x is not in the right scope.","answer":false,"code":false},{"text":"Nothing is wrong with this code.","answer":true,"code":false}]},{"id":28,"question":"What's the difference between an array and a set?","code":"","reference":"","choices":[{"text":"Arrays are ordered, non-unique values.","answer":true,"code":false},{"text":"Arrays are stored sorted.","answer":false,"code":false},{"text":"Sets are ordered, unique values.","answer":false,"code":false},{"text":"Sets can contain nils.","answer":false,"code":false}]},{"id":29,"question":"Dot notation can be used for _?","code":"","reference":"","choices":[{"text":"nothing, as they're never used in Objective-C","answer":false,"code":false},{"text":"function calls only","answer":false,"code":false},{"text":"property getter/setter","answer":true,"code":false},{"text":"parameter delimiters","answer":false,"code":false}]},{"id":30,"question":"What is the value of newVals after this code is executed?","code":"NSArray *vals = @[@\"1\", @\"2\", @\"3\"];     NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];     NSArray *newVals = [vals filteredArrayUsingPredicate:pred];","reference":"```","choices":[{"text":"2,3","answer":true,"code":false},{"text":"nil","answer":false,"code":false},{"text":"This code contains an error","answer":false,"code":false},{"text":"2,\"3\"","answer":false,"code":false}]},{"id":31,"question":"How would this function be called?","code":"`-(int)foo:(int)a b:(int)c;`","reference":"`-(int)foo:(int)a b:(int)c;`","choices":[{"text":"self.foo(5, b:10);","answer":false,"code":false},{"text":"This code contains an error.","answer":false,"code":false},{"text":"[self foo:5:10:20];","answer":false,"code":false},{"text":"[self foo:5 b:10];","answer":true,"code":false}]},{"id":32,"question":"What is the type of the error return value stored in json?","code":"NSError *error;     NSData *data;     id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];","reference":"```","choices":[{"text":"NSString","answer":false,"code":false},{"text":"NSArray","answer":false,"code":false},{"text":"id","answer":false,"code":false},{"text":"NSDictionary","answer":false,"code":false}]},{"id":33,"question":"What is significant about this function declaration?","code":"-(void)testFunc:(NSString**)str;","reference":"```","choices":[{"text":"The parameter is passed by value and can not be changed","answer":false,"code":false},{"text":"** is not allowed on a parameter","answer":false,"code":false},{"text":"The parameter may be nil","answer":false,"code":false},{"text":"The parameter is passed by reference and may be changed","answer":true,"code":false}]},{"id":34,"question":"What is printed from this code execution?","code":"typedef enum {         thing1,         thing2,         thing3     } Thing;     -(void) enumStuff {         NSLog(@\"%d\", thing2);     }","reference":"```","choices":[{"text":"0","answer":false,"code":false},{"text":"1","answer":true,"code":false},{"text":"thing2","answer":false,"code":false},{"text":"This code does not print anything","answer":false,"code":false}]},{"id":35,"question":"You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","code":"","reference":"","choices":[{"text":"non-atomic","answer":false,"code":false},{"text":"strong","answer":false,"code":false},{"text":"weak","answer":false,"code":false},{"text":"atomic","answer":true,"code":false}]},{"id":36,"question":"What is wrong with this line of code?","code":"int temp = 1==1;","reference":"```","choices":[{"text":"`temp` is a keyword.","answer":false,"code":false},{"text":"1==1 is invalid.","answer":false,"code":false},{"text":"1==1 evaluates to a Boolean.","answer":false,"code":false},{"text":"Nothing is wrong with it.","answer":true,"code":false}]},{"id":37,"question":"What is special about the code within this block?","code":"dispatch_async(dispatch_get_main_queue(), ^{ // code });","reference":"```","choices":[{"text":"It executes on the main queue.","answer":true,"code":false},{"text":"It is the last code to run before the app goes inactive.","answer":false,"code":false},{"text":"It executes on a background thread.","answer":false,"code":false},{"text":"It is queued to execute in the background.","answer":false,"code":false}]},{"id":38,"question":"How many items are in set1 after this code executes?","code":"NSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];","reference":"```","choices":[{"text":"zero","answer":false,"code":false},{"text":"six","answer":false,"code":false},{"text":"one","answer":false,"code":false},{"text":"five","answer":true,"code":false}]},{"id":39,"question":"What is wrong with this code?","code":"NSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"]; NSlog(@\"d1: %@\", d1);","reference":"```","choices":[{"text":"NSDictionary cannot be printed this way.","answer":false,"code":false},{"text":"The last key is missing a value.","answer":true,"code":false},{"text":"Dictionaries cannot have mixed types as values.","answer":false,"code":false},{"text":"d1 is assigned an NSArray of values.","answer":false,"code":false}]},{"id":40,"question":"What is the initial value of the property `val`?","code":"@property (nonatomic, readonly) int val;","reference":"```","choices":[{"text":"8","answer":false,"code":false},{"text":"nil","answer":false,"code":false},{"text":"-1","answer":false,"code":false},{"text":"undefined","answer":false,"code":false}]}]