[{"id":1,"question":"What is this code an example of?","code":"swift let val = (Double)6","reference":"```","choices":[{"text":"a syntax issue","answer":true,"code":false},{"text":"typecasting","answer":false,"code":false},{"text":"assignment","answer":false,"code":false},{"text":"initialization","answer":false,"code":false}]},{"id":2,"question":"What is the error in this code?","code":"swift let x = 5 guard x == 5 { return }","reference":"```","choices":[{"text":"The guard is missing the else.","answer":true,"code":false},{"text":"Nothing is wrong.","answer":false,"code":false},{"text":"The guard is missing a then.","answer":false,"code":false},{"text":"The comparison is wrong.","answer":false,"code":false}]},{"id":3,"question":"What is the raw/underlying type of this enum?","code":"swift enum Direction {   case north, south, east, west }","reference":"```","choices":[{"text":"There is none.","answer":true,"code":false},{"text":"String","answer":false,"code":false},{"text":"Any","answer":false,"code":false},{"text":"Int","answer":false,"code":false}]},{"id":4,"question":"Why is dispatchGroup used in certain situations?","code":"","reference":"","choices":[{"text":"It allows multiple synchronous or asynchronous operations to run on different queues.","answer":false,"code":false},{"text":"It allows track and control execution of multiple operations together.","answer":false,"code":false},{"text":"It allows operations to wait for each other as desired.","answer":false,"code":false},{"text":"all of these answers.","answer":true,"code":false}]},{"id":5,"question":"What is this code an example of?","code":"swift let val = 5 print(\"value is: (val)\")","reference":"```","choices":[{"text":"string interpolation","answer":true,"code":false},{"text":"string compilation","answer":false,"code":false},{"text":"method chaining","answer":false,"code":false},{"text":"string concatenation","answer":false,"code":false}]},{"id":6,"question":"What are the contents of `vals` after this code is executed?","code":"swift var vals = [10, 2] vals.sort { (s1, s2) -> Bool in   s1 > s2 }","reference":"```","choices":[{"text":"[10, 2]","answer":true,"code":false},{"text":"[2, 10]","answer":false,"code":false},{"text":"nil","answer":false,"code":false},{"text":"This code contains an error","answer":false,"code":false}]},{"id":7,"question":"What does this code print?","code":"swift typealias Thing = [String:Any] var stuff: Thing print(type(of: stuff))","reference":"```","choices":[{"text":"Dictionary<String, Any>","answer":true,"code":false},{"text":"Dictionary","answer":false,"code":false},{"text":"ERROR","answer":false,"code":false},{"text":"Thing","answer":false,"code":false}]},{"id":8,"question":"What is the value of y?","code":"swift let x = [\"1\", \"2\"].dropFirst() let y = x[0]","reference":"```","choices":[{"text":"This code contains an error","answer":true,"code":false},{"text":"1","answer":false,"code":false},{"text":"2","answer":false,"code":false},{"text":"nil","answer":false,"code":false}]},{"id":9,"question":"What is the value of test in this code?","code":"swift var test = 1 == 1","reference":"```","choices":[{"text":"TRUE","answer":true,"code":false},{"text":"YES","answer":false,"code":false},{"text":"1","answer":false,"code":false},{"text":"This code contains an error","answer":false,"code":false}]},{"id":10,"question":"What is the value of y?","code":"swift var x: Int? let y = x ?? 5","reference":"```","choices":[{"text":"5","answer":true,"code":false},{"text":"0","answer":false,"code":false},{"text":"nil","answer":false,"code":false},{"text":"This code contains an error","answer":false,"code":false}]},{"id":11,"question":"What is the type of this function?","code":"swift func add(a: Int, b: Int) -> Int { return a+b }","reference":"```","choices":[{"text":"Int","answer":false,"code":false},{"text":"(Int, Int) -> Int","answer":true,"code":false},{"text":"Int<Optional>","answer":false,"code":false},{"text":"Functions don't have types.","answer":false,"code":false}]},{"id":12,"question":"What is the correct way to call this function?","code":"swift func myFunc(_ a: Int, b: Int) -> Int {   return a + b }","reference":"```","choices":[{"text":"myFunc(5, b: 6)","answer":true,"code":false},{"text":"myFunc(5, 6)","answer":false,"code":false},{"text":"myFunc(a: 5, b: 6)","answer":false,"code":false},{"text":"myFunc(a, b)","answer":false,"code":false}]},{"id":13,"question":"The Codable protocol is **_**?","code":"","reference":"","choices":[{"text":"a combination of Encodable and Decodable","answer":true,"code":false},{"text":"not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable","answer":false,"code":false},{"text":"required of all classes","answer":false,"code":false},{"text":"automatically included in all classes","answer":false,"code":false}]},{"id":14,"question":"What is the type of value1 in this code?","code":"swift let value1 = \"(\"test\".count)\"","reference":"```","choices":[{"text":"String","answer":true,"code":false},{"text":"Int","answer":false,"code":false},{"text":"null","answer":false,"code":false},{"text":"test.count","answer":false,"code":false}]},{"id":15,"question":"When a function takes a closure as a parameter, when do you want to mark is as escaping?","code":"","reference":"","choices":[{"text":"when it's executed after the function returns","answer":true,"code":false},{"text":"when it's scope is undefined","answer":false,"code":false},{"text":"when it's lazy loaded","answer":false,"code":false},{"text":"all of these answers","answer":false,"code":false}]},{"id":16,"question":"What's wrong with this code?","code":"swift class Person {   var name: String   var address: String }","reference":"```","choices":[{"text":"Person has no initializers.","answer":true,"code":false},{"text":"Person has no base class.","answer":false,"code":false},{"text":"var name is not formatted corrrectly.","answer":false,"code":false},{"text":"address is a keyword.","answer":false,"code":false}]},{"id":17,"question":"What is the value of names after this code is executed?","code":"swift let names = [\"Bear\", \"Joe\", \"Clark\"] names.map { (s) -> String in   return s.uppercased() }","reference":"```","choices":[{"text":"[\"BEAR\", \"JOE\", \"CLARK\"]","answer":false,"code":false},{"text":"[\"B\", \"J\", \"C\"]","answer":false,"code":false},{"text":"[\"Bear\", \"Joe\", \"Clark\"]","answer":true,"code":false},{"text":"This code contains an error.","answer":false,"code":false}]},{"id":18,"question":"What describes this line of code?","code":"swift let val = 5","reference":"```","choices":[{"text":"a constant named val of type Int","answer":true,"code":false},{"text":"a variable named val of type item","answer":false,"code":false},{"text":"a constant named val of type Number","answer":false,"code":false},{"text":"a variable named val of type Int","answer":false,"code":false}]},{"id":19,"question":"What is the error in this code?","code":"swift extension String {   var firstLetter: Character = \"c\" {     didSet {       print(\"new value\")     }   } }","reference":"```","choices":[{"text":"Extensions can't add properties. // although extensions technically can't contain stored properties","answer":true,"code":false},{"text":"Nothing is wrong with it.","answer":false,"code":false},{"text":"didSet takes a parameter.","answer":false,"code":false},{"text":"c is not a character.","answer":false,"code":false}]},{"id":20,"question":"didSet and willSet are examples of **_**?","code":"","reference":"","choices":[{"text":"property observers","answer":true,"code":false},{"text":"key properties","answer":false,"code":false},{"text":"all of these answers","answer":false,"code":false},{"text":"newOld value calls","answer":false,"code":false}]},{"id":21,"question":"What is wrong with this code?","code":"swift self.callback = {   self.attempts += 1   self.downloadFailed() }","reference":"```","choices":[{"text":"Use of self inside the closure causes retain cycle.","answer":true,"code":false},{"text":"You cannot assign a value to closure in this manner.","answer":false,"code":false},{"text":"You need to define the type of closure explicitly.","answer":false,"code":false},{"text":"There is nothing wrong with this code.","answer":false,"code":false}]},{"id":22,"question":"How many values does vals have after this code is executed?","code":"swift var vals = Set<String> = [\"4\", \"5\", \"6\"] vals.insert(\"5\")","reference":"```","choices":[{"text":"three","answer":false,"code":false},{"text":"four","answer":false,"code":false},{"text":"eight","answer":false,"code":false},{"text":"This code contains an error.","answer":true,"code":false}]},{"id":23,"question":"How can you avoid a strong reference cycle in a closure?","code":"","reference":"","choices":[{"text":"Use a capture list to set class instances of weak or unowned.","answer":true,"code":false},{"text":"You can't, there will always be a danger of strong reference cycles inside a closure.","answer":false,"code":false},{"text":"Initialize the closure as read-only.","answer":false,"code":false},{"text":"Declare the closure variable as lazy.","answer":false,"code":false}]},{"id":24,"question":"What is wrong with this code?","code":"swift if let s = String.init(\"some string\") {   print(s) }","reference":"```","choices":[{"text":"This String initializer does not return an optional.","answer":true,"code":false},{"text":"String does not have an initializer that can take a String.","answer":false,"code":false},{"text":"= is not a comparison.","answer":false,"code":false},{"text":"Nothing is wrong with this code.","answer":false,"code":false}]},{"id":25,"question":"Which code snippet correctly creates a typealias closure?","code":"","reference":"","choices":[{"text":"typealias CustomClosure: () -> ()","answer":true,"code":false},{"text":"typealias CustomClosure { () -> () }","answer":false,"code":false},{"text":"typealias CustomClosure -> () -> ()","answer":false,"code":false},{"text":"typealias CustomClosure -> () {}","answer":false,"code":false}]},{"id":26,"question":"How do you reference class members from within a class?","code":"","reference":"","choices":[{"text":"self","answer":true,"code":false},{"text":"instance","answer":false,"code":false},{"text":"class","answer":false,"code":false},{"text":"this","answer":false,"code":false}]},{"id":27,"question":"All value types in Swift are **_** under the hood?","code":"","reference":"","choices":[{"text":"structs","answer":true,"code":false},{"text":"classes","answer":false,"code":false},{"text":"optionals","answer":false,"code":false},{"text":"generics","answer":false,"code":false}]},{"id":28,"question":"What is the correct way to add a value to this array?","code":"swift var strings = [1, 2, 3]","reference":"```","choices":[{"text":"all of these answers","answer":true,"code":false},{"text":"strings.append(4)","answer":false,"code":false},{"text":"strings.insert(5, at: 1)","answer":false,"code":false},{"text":"strings += [5]","answer":false,"code":false}]},{"id":29,"question":"How many times will this loop be executed?","code":"swift for i in 0...100 {   print(i) }","reference":"```","choices":[{"text":"0","answer":false,"code":false},{"text":"101","answer":true,"code":false},{"text":"99","answer":false,"code":false},{"text":"100","answer":false,"code":false}]},{"id":30,"question":"What can AnyObject represent?","code":"","reference":"","choices":[{"text":"an instance of any class","answer":false,"code":false},{"text":"an instance of function type","answer":false,"code":false},{"text":"all of these answers","answer":true,"code":false},{"text":"an instance of an optional type","answer":false,"code":false}]},{"id":31,"question":"What does this code print?","code":"swift typealias Thing = [String:Any] var stuff : Thing print(type(of:stuff))","reference":"```","choices":[{"text":"Dictionary","answer":false,"code":false},{"text":"ERROR","answer":false,"code":false},{"text":"Thing","answer":false,"code":false},{"text":"Dictionary<String, Any>","answer":true,"code":false}]},{"id":32,"question":"What is the value of t after this code is executed?","code":"swift let names = [\"Larry\", \"Sven\", \"Bear\"] let t = names.enumerated().first().offset","reference":"```","choices":[{"text":"This code is invalid.","answer":true,"code":false},{"text":"This code does not compile.","answer":true,"code":false},{"text":"0","answer":false,"code":false},{"text":"1","answer":false,"code":false},{"text":"Larry","answer":false,"code":false}]},{"id":33,"code":"swift let vt = (name: \"ABC\", val: 5) let test = vt.0","reference":"```","choices":[{"text":"ABC","answer":true,"code":false},{"text":"0","answer":false,"code":false},{"text":"5","answer":false,"code":false},{"text":"name","answer":false,"code":false}]},{"id":34,"code":"swift class LSN : MMM { }","reference":"```","choices":[{"text":"MMM","answer":true,"code":false},{"text":"LSN","answer":false,"code":false},{"text":"There is no base class.","answer":false,"code":false},{"text":"This code is invalid.","answer":false,"code":false}]},{"id":35,"code":"swift var userLocation: String = \"Home\" {   willSet(newValue) {   print(\"About to set userLocation to (newValue)...\")   }   didSet {   if userLocation != oldValue {   print(\"userLocation updated with new value!\")   } else {   print(\"userLocation already set to that value...\")   }   }  }  userLocation = \"Work\"","reference":"```","choices":[{"text":"About to set userLocation to Work… userLocation updated with new value!","answer":true,"code":false},{"text":"About to set userLocation to Work… userLocation already set to that value…","answer":false,"code":false},{"text":"About to set userLocation to Home… userLocation updated to new value!","answer":false,"code":false},{"text":"ERROR","answer":false,"code":false}]},{"id":36,"code":"","reference":"","choices":[{"text":"a base class convenience initializer","answer":false,"code":false},{"text":"either a designated or another convenience initializer","answer":false,"code":false},{"text":"a designated initializer","answer":true,"code":false},{"text":"none of these answers","answer":false,"code":false}]},{"id":37,"code":"","reference":"","choices":[{"text":"DispatchQueue.visible","answer":false,"code":false},{"text":"DispatchQueue.global","answer":true,"code":false},{"text":"errorExample need to be labeled as `throws`.","answer":false,"code":false},{"text":"DispatchQueue.background","answer":false,"code":false}]},{"id":38,"code":"swift let x = [\"a\", \"b\", \"c\"]","reference":"```","choices":[{"text":"`String[]`","answer":false,"code":false},{"text":"`Array<String>`","answer":true,"code":false},{"text":"`Set<String>`","answer":false,"code":false},{"text":"`Array<Character>`","answer":false,"code":false}]},{"id":39,"code":"swift let nThings: [Any] = [1, \"2\", \"three\"] let oThings = nThings.reduce(\"\") { \"($0)($1)\" }","reference":"```","choices":[{"text":"11212three","answer":false,"code":false},{"text":"115","answer":false,"code":false},{"text":"12three","answer":true,"code":false},{"text":"Nothing, this code is invalid.","answer":false,"code":false}]},{"id":40,"code":"","reference":"","choices":[{"text":"`!try`","answer":false,"code":false},{"text":"`try?`","answer":true,"code":false},{"text":"`try!`","answer":false,"code":false},{"text":"`?try`","answer":false,"code":false}]},{"id":41,"code":"swift protocol TUI {   func add(x1 : Int, x2 : Int) -> Int {     return x1 + x2   } }","reference":"```","choices":[{"text":"Protocol functions cannot have return types.","answer":false,"code":false},{"text":"Protocol functions cannot have implementations.","answer":true,"code":false},{"text":"Nothing is wrong with it.","answer":false,"code":false},{"text":"`add` is a reserved keyword.","answer":false,"code":false}]},{"id":42,"code":"swift class Car {   var wheels: Int = 4   let doors = 4 }","reference":"```","choices":[{"text":"class members","answer":false,"code":false},{"text":"This code is invalid.","answer":false,"code":false},{"text":"class fields","answer":false,"code":false},{"text":"class properties","answer":true,"code":false}]},{"id":43,"code":"","reference":"","choices":[{"text":"You cannot","answer":false,"code":false},{"text":"deinit","answer":false,"code":false},{"text":"`init?`","answer":true,"code":false},{"text":"init","answer":false,"code":false}]},{"id":44,"code":"swift let dbl = Double.init(\"5a\") print(dbl ?? \".asString()\")","reference":"```","choices":[{"text":"five","answer":false,"code":false},{"text":"5a","answer":false,"code":false},{"text":"`.asString()`","answer":true,"code":false},{"text":"5","answer":false,"code":false}]},{"id":45,"code":"swift func add(this x: Int, toThat y: Int)->{}","reference":"```","choices":[{"text":"none of these answers","answer":false,"code":false},{"text":"local terms","answer":false,"code":false},{"text":"argument labels","answer":true,"code":false},{"text":"parameters names","answer":false,"code":false}]},{"id":46,"code":"swift for (key, value) in [1: \"one\", 2: \"two\"]{   print(key, value) }","reference":"```","choices":[{"text":"The interaction source is invalid","answer":false,"code":false},{"text":"The interaction variable is invalid","answer":false,"code":false},{"text":"There is nothing wrong with this code","answer":true,"code":false},{"text":"The comma in the print is misplaced","answer":false,"code":false}]},{"id":47,"code":"","reference":"","choices":[{"text":"XCTest","answer":false,"code":false},{"text":"all of these answers","answer":true,"code":false},{"text":"@testable","answer":false,"code":false},{"text":"XCAssert","answer":false,"code":false}]},{"id":48,"code":"swift class Square{   var height: Int = 0   var width : Int {     return height   } }","reference":"```","choices":[{"text":"This code contains error","answer":false,"code":false},{"text":"a closure","answer":false,"code":false},{"text":"a computed property","answer":true,"code":false},{"text":"lazy loading","answer":false,"code":false}]},{"id":49,"code":"swift let vals = (\"val\", 1)","reference":"```","choices":[{"text":"a dictionary","answer":false,"code":false},{"text":"a tuple","answer":true,"code":false},{"text":"an optional","answer":false,"code":false},{"text":"This code contains error","answer":false,"code":false}]},{"id":50,"code":"swift var x = 5 x = 10.0","reference":"```","choices":[{"text":"You cannot assign a Double to a variable of type Int","answer":true,"code":false},{"text":"x is undefined","answer":false,"code":false},{"text":"x is a constant","answer":false,"code":false},{"text":"x has no type","answer":false,"code":false}]},{"id":51,"code":"swift var items = [\"a\":1, \"b\":2, \"c\":\"test\"] as [String: Any] items[\"c\"] = nil print(items[\"c\"] as Any)","reference":"```","choices":[{"text":"Any","answer":false,"code":false},{"text":"test","answer":false,"code":false},{"text":"1,2,3","answer":false,"code":false},{"text":"nil","answer":true,"code":false}]},{"id":52,"code":"swift let val = 5.0 + 10","reference":"```","choices":[{"text":"There is nothing wrong with this code","answer":true,"code":false},{"text":"val is a constant and cannot be changed","answer":false,"code":false},{"text":"5.0 and 10 are different types","answer":false,"code":false},{"text":"There is no semicolon","answer":false,"code":false}]},{"id":53,"code":"swift struct Test{   var score: Int   var date: Date }","reference":"```","choices":[{"text":"zero","answer":false,"code":false},{"text":"This code contains an error","answer":false,"code":false},{"text":"two","answer":true,"code":false},{"text":"Structs do not have initializers","answer":false,"code":false}]},{"id":54,"code":"swift let x = try? String.init(\"test\") print(x)","reference":"```","choices":[{"text":"nil","answer":false,"code":false},{"text":"Nothing - this code contains an error","answer":false,"code":false},{"text":"Optional(\"test\")","answer":true,"code":false},{"text":"test","answer":false,"code":false}]},{"id":55,"code":"swift var vals = [1,2,3]","reference":"```","choices":[{"text":"`vals.sort { $0 < $1 }`","answer":false,"code":false},{"text":"`vals.sort { (s1, s2) in s1 < s2 }`","answer":false,"code":false},{"text":"`vals.sort(by: <)`","answer":false,"code":false},{"text":"all of these answers","answer":true,"code":false}]},{"id":56,"code":"","reference":"","choices":[{"text":"not executed","answer":false,"code":false},{"text":"executed in the main queue","answer":true,"code":false},{"text":"none of these answers","answer":false,"code":false},{"text":"executed on the background thread","answer":false,"code":false}]},{"id":57,"code":"","reference":"","choices":[{"text":"When a class instance needs memory","answer":false,"code":false},{"text":"All of these answers","answer":true,"code":false},{"text":"When the executable code is finished","answer":false,"code":false},{"text":"When a class instance is being removed from memory","answer":false,"code":false}]},{"id":58,"code":"","reference":"","choices":[{"text":"String?","answer":true,"code":false},{"text":"Optional[String]","answer":false,"code":false},{"text":"[String]?","answer":false,"code":false},{"text":"?String","answer":false,"code":false}]},{"id":59,"code":"swift for i in [\"0\", \"1\"]{   print(i) }","reference":"```","choices":[{"text":"one","answer":false,"code":false},{"text":"two","answer":true,"code":false},{"text":"three","answer":false,"code":false},{"text":"This code does not compile","answer":false,"code":false}]},{"id":60,"code":"swift let names = [\"Bear\", \"Tony\", \"Svante\"] print(names[1]+\"Bear\")","reference":"```","choices":[{"text":"1Bear","answer":false,"code":false},{"text":"BearBear","answer":false,"code":false},{"text":"TonyBear","answer":true,"code":false},{"text":"Nothing, this code is invalid","answer":false,"code":false}]},{"id":61,"code":"swift let name: String?","reference":"```","choices":[{"text":"name can hold only a string value.","answer":false,"code":false},{"text":"name can hold either a string or nil value.","answer":true,"code":false},{"text":"Optional values cannot be `let` constants.","answer":false,"code":false},{"text":"Only non-empty string variables can be stored in name.","answer":false,"code":false}]},{"id":62,"code":"swift let i = 5 let val = i * 6.0","reference":"```","choices":[{"text":"This code is invalid.","answer":true,"code":false},{"text":"6","answer":false,"code":false},{"text":"30","answer":false,"code":false},{"text":"0","answer":false,"code":false}]},{"id":63,"code":"swift enum Positions : Int {   case first, second, third, other } print (Positions.other.rawValue)","reference":"```","choices":[{"text":"3","answer":true,"code":false},{"text":"0","answer":false,"code":false},{"text":"other","answer":false,"code":false},{"text":"nil","answer":false,"code":false}]},{"id":64,"code":"swift \"t\".forEach { (char) in     print(char) }","reference":"```","choices":[{"text":"nil","answer":false,"code":false},{"text":"Nothing, since the code contains an error","answer":false,"code":false},{"text":"t","answer":true,"code":false},{"text":"zero","answer":false,"code":false}]},{"id":65,"code":"swift let s1 = [\"1\", \"2\", \"3\"]     .filter { $0 > \"0\" }     .sorted { $0 > $1 } print(s1)","reference":"```","choices":[{"text":"[]","answer":false,"code":false},{"text":"[\"3\", \"2\", \"1\"]","answer":true,"code":false},{"text":"[321]","answer":false,"code":false},{"text":"[\"1\", \"2\", \"3\"]","answer":false,"code":false}]},{"id":66,"code":"(Question does not make that much sense though. )","reference":"(Question does not make that much sense though. )","choices":[{"text":"associated values","answer":true,"code":false},{"text":"integral values","answer":false,"code":false},{"text":"raw values","answer":false,"code":false},{"text":"custom values","answer":false,"code":false}]},{"id":67,"code":"swift class AmP : MMM, AOM {   }","reference":"```","choices":[{"text":"class","answer":false,"code":false},{"text":"protocol","answer":true,"code":false},{"text":"enumeration","answer":false,"code":false},{"text":"struct","answer":false,"code":false}]},{"id":68,"code":"swift let numbers = [1,2,3,4,5,6].filter{ $0 % 2 == 0}","reference":"```","choices":[{"text":"[1,3,5]","answer":false,"code":false},{"text":"[]","answer":false,"code":false},{"text":"[2,4,6]","answer":true,"code":false},{"text":"nil","answer":false,"code":false}]}]