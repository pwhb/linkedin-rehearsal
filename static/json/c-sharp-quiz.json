[{"id":1,"question":"In which of these situations are interfaces better than abstract classes?","code":"","reference":"","choices":[{"text":"When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.","answer":false,"code":false},{"text":"Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.","answer":false,"code":false},{"text":"When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.","answer":true,"code":false},{"text":"You should use both an interface and an abstract class when defining any complex object.","answer":false,"code":false}]},{"id":2,"question":"Which statement is true of delegates?","code":"","reference":"","choices":[{"text":"Delegates are not supported in the current version of C#","answer":false,"code":false},{"text":"They cannot be used as callbacks.","answer":false,"code":false},{"text":"Only variables can be passed to delegates as parameters.","answer":false,"code":false},{"text":"They can be chained together.","answer":true,"code":false}]},{"id":3,"question":"Which choice best defines C#'s asynchronous programming model?","code":"","reference":"","choices":[{"text":"reactive","answer":false,"code":false},{"text":"inherited callback","answer":false,"code":false},{"text":"task-based","answer":true,"code":false},{"text":"callback-based","answer":false,"code":false}]},{"id":4,"question":"How would you determine if a class has a particular attribute?","code":"cs var type = typeof(SomeType); var attribute = type.GetCustomAttribute<SomeAttribute>();  cs var typeof(MyPresentationModel).Should().BeDecoratedWith<SomeAttribute>();  cs Attribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute)  cs Attribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))","reference":"```","choices":[{"text":".","answer":false,"code":false},{"text":".","answer":false,"code":false},{"text":".","answer":false,"code":false},{"text":".","answer":true,"code":false}]},{"id":5,"question":"What is the difference between the ref and out keywords?","code":"","reference":"","choices":[{"text":"Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.","answer":false,"code":false},{"text":"Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.","answer":false,"code":false},{"text":"Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.","answer":true,"code":false},{"text":"Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.","answer":false,"code":false}]},{"id":6,"question":"How could you retrieve information about a class, as well as create an instance at runtime?","code":"","reference":"","choices":[{"text":"reflection","answer":true,"code":false},{"text":"serialization","answer":false,"code":false},{"text":"abstraction","answer":false,"code":false},{"text":"dependency injection","answer":false,"code":false}]},{"id":7,"question":"What is this code an example of?","code":"cs     private static object objA;     private static object objB;     private static void performTaskA()     {         lock (objB)         {             Thread.Sleep(1000);             lock (objA) { }         }     }     private static void PerformTaskB()     {         lock (objA)         {             lock (objB) { }         }     }","reference":"```","choices":[{"text":"a private class that uses multithreading","answer":false,"code":false},{"text":"multithread coding","answer":false,"code":false},{"text":"thread mismanagement","answer":false,"code":false},{"text":"a potential deadlock","answer":true,"code":false}]},{"id":8,"question":"What is the difference between an anonymous type and a regular data type?","code":"","reference":"","choices":[{"text":"Anonymous types don't have type names","answer":true,"code":false},{"text":"Anonymous types can only be static","answer":false,"code":false},{"text":"Anonymous types can be used only in struts","answer":false,"code":false},{"text":"Anonymous types don't work with LINQ.","answer":false,"code":false}]},{"id":9,"question":"When would you use a Dictionary rather that an Array type in your application?","code":"","reference":"","choices":[{"text":"when you need a jagged collection structure","answer":false,"code":false},{"text":"when you need to store values of the same type","answer":false,"code":false},{"text":"when you need to store key-value pairs rather than single values","answer":true,"code":false},{"text":"when you need an ordered, searchable list","answer":false,"code":false}]},{"id":10,"question":"What is the difference between a.Equals(b) and a == b?","code":"","reference":"","choices":[{"text":"The .Equals method compares reference identities while the == compares contents.","answer":false,"code":false},{"text":"The .Equals method compares primitive values while == compares all values.","answer":false,"code":false},{"text":"The .Equals method compares contents while == compares references reference identity.","answer":true,"code":false},{"text":"The .Equals method compares reference type while == compares primitive value types.","answer":false,"code":false}]},{"id":11,"question":"Which choice best describes a deadlock situation?","code":"","reference":"","choices":[{"text":"when you try to instantiate two objects at the same time in the same class or struct","answer":false,"code":false},{"text":"when you are trying to execute an action after a user event is registered","answer":false,"code":false},{"text":"when simultaneous instructions are waiting on each other to finish before executing","answer":true,"code":false},{"text":"when you try to execute a series of events simultaneously on multiple threads","answer":false,"code":false}]},{"id":12,"question":"How does the async keyword work?","code":"","reference":"","choices":[{"text":"It allows access to asynchronous methods in the C# API","answer":false,"code":false},{"text":"It allows thread pooling and synchronous processes in static classes.","answer":false,"code":false},{"text":"It allows the await keyword to be used in a method","answer":true,"code":false},{"text":"It allows access to synchronous methods in the C# API","answer":false,"code":false}]},{"id":13,"question":"What is an object in C#?","code":"","reference":"","choices":[{"text":"a class or struct, including its variables and functions","answer":false,"code":false},{"text":"a primitive data type that can be created only at compile time","answer":false,"code":false},{"text":"a value type that can be used only with an abstract class","answer":false,"code":false},{"text":"an instance of a class or struct that includes fields, properties, and/or methods","answer":true,"code":false}]},{"id":14,"question":"Which code snippet declares an anonymous type named userData?","code":"","reference":"","choices":[{"text":"`var<<!---->T> userData = new <<!---->T> { name = \"John\", age = 32 };`","answer":false,"code":false},{"text":"`var userData = new { name = \"John\", age = 32 };`","answer":true,"code":false},{"text":"`AType userData = new AType { name = \"John\", age = 32 };`","answer":false,"code":false},{"text":"`Anonymous<T> userData = new Anonymous<T> { name = \"John\", age = 32 };`","answer":false,"code":false}]},{"id":15,"question":"What will be returned when this method is executed?","code":"`public void userInput(string charParamters) { }`","reference":"`public void userInput(string charParamters) { }`","choices":[{"text":"nothing","answer":true,"code":false},{"text":"a Boolean","answer":false,"code":false},{"text":"a string variable","answer":false,"code":false},{"text":"an integer","answer":false,"code":false}]},{"id":16,"question":"In what order would the employee names in this example be printed to the console?","code":"cs string[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" }; IEnumerable<string> employeeQuery = from person in employees                                     orderby person                                     select person; foreach(string employee in employeeQuery) {     Console.WriteLine(employee); }","reference":"```","choices":[{"text":"ascending","answer":true,"code":false},{"text":"unordered","answer":false,"code":false},{"text":"descending","answer":false,"code":false},{"text":"first in, first out","answer":false,"code":false}]},{"id":17,"question":"Lambda expressions are often used in tandem with which of the following?","code":"","reference":"","choices":[{"text":"Namespaces","answer":false,"code":false},{"text":"LINQ","answer":true,"code":false},{"text":"Type Aliasing","answer":false,"code":false},{"text":"Assemblies","answer":false,"code":false}]},{"id":18,"question":"What is the correct formatting for single line and multiline comments?","code":"/_ - Multiline       /_ Single Line _/       / Single Line       /_ Multiline _/","reference":"      /_ Multiline _/","choices":[{"text":"/_/ - Single Line","answer":false,"code":false},{"text":"// Multiline","answer":false,"code":false},{"text":"//* Multiline","answer":false,"code":false},{"text":"// Single Line","answer":true,"code":false}]},{"id":19,"question":"How do you make a method in an abstract class overridable?","code":"","reference":"","choices":[{"text":"Make it public","answer":false,"code":false},{"text":"Make it static","answer":false,"code":false},{"text":"Make it private","answer":false,"code":false},{"text":"Make it virtual","answer":true,"code":false}]},{"id":20,"question":"How would you write code for an integer property called Age with a getter and setter?","code":"","reference":"","choices":[{"text":"public int Age { get - set }","answer":false,"code":false},{"text":"public int Age: get set;","answer":false,"code":false},{"text":"public int Age (get, set );","answer":false,"code":false},{"text":"public int Age { get; set; }","answer":true,"code":false}]},{"id":21,"question":"What is an abstract class?","code":"","reference":"","choices":[{"text":"a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)","answer":false,"code":false},{"text":"something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class","answer":false,"code":false},{"text":"a class that is denoted by the virtual keyword","answer":false,"code":false},{"text":"a class that can be used only as base class","answer":true,"code":false}]},{"id":22,"question":"When using a thread pool what happens to a given thread after it finishes its task?","code":"","reference":"","choices":[{"text":"The thread is destroyed and memory is freed up.","answer":false,"code":false},{"text":"The thread runs in loop until the next assignment.","answer":false,"code":false},{"text":"The thread goes inactive in the background and waits for garbage collection.","answer":false,"code":false},{"text":"The thread returns to the pool for reuse.","answer":true,"code":false}]},{"id":23,"question":"Which choice represents a class that inherits behavior from a base class?","code":"","reference":"","choices":[{"text":"a second base class","answer":false,"code":false},{"text":"a revised class","answer":false,"code":false},{"text":"a derived class","answer":true,"code":false},{"text":"a parent class","answer":false,"code":false}]},{"id":24,"question":"What does operator overloading allow you to do?","code":"","reference":"","choices":[{"text":"hide built-in operatores when necessary","answer":false,"code":false},{"text":"add methods to be interpreted by the compiler at runtime","answer":false,"code":false},{"text":"define how enums and other primitive value types work within the rest of the application","answer":false,"code":false},{"text":"define custom functionality for common operators like addition and equality","answer":true,"code":false}]},{"id":25,"question":"What it the main purpose of LINQ?","code":"","reference":"","choices":[{"text":"to delete duplicate data","answer":false,"code":false},{"text":"to bind namespaces and assemblies","answer":false,"code":false},{"text":"to query and transform data","answer":true,"code":false},{"text":"to connect assemblies","answer":false,"code":false}]},{"id":26,"question":"What is the correct syntax for a new generic list of strings named contacts?","code":"","reference":"","choices":[{"text":"public List<string names> contacts = new List<string names>();","answer":false,"code":false},{"text":"public List(string names) contacts = new List(string names)();","answer":false,"code":false},{"text":"var contacts = new List<string>();","answer":true,"code":false},{"text":"var contacts = new List(string);","answer":false,"code":false}]},{"id":27,"question":"What is the difference between throw exceptions and throw clauses?","code":"","reference":"","choices":[{"text":"Throw clauses fire only at runtime, while throw exceptions can fire at any time.","answer":false,"code":false},{"text":"Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.","answer":true,"code":false},{"text":"Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.","answer":false,"code":false},{"text":"Throw exceptions fire only at runtime, while throw clauses can fire during compile time.","answer":false,"code":false}]},{"id":28,"question":"When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?","code":"","reference":"","choices":[{"text":"The return yield statement is missing at the end of the method.","answer":false,"code":false},{"text":"The method is missing an await keyword in its body.","answer":true,"code":false},{"text":"The wait keyword is missing from the end of the method.","answer":false,"code":false},{"text":"The yield keyword is missing from the method.","answer":false,"code":false}]},{"id":29,"question":"What are C# events?","code":"","reference":"","choices":[{"text":"system actions that communicate directly with the compiler at runtime","answer":false,"code":false},{"text":"actions that execute when the code compiles, generating logs and test output","answer":false,"code":false},{"text":"actions that generate notifications, which are sent to their registered listeners","answer":true,"code":false},{"text":"user-only methods that send data to the application's back end","answer":false,"code":false}]},{"id":30,"question":"What kind of values can arrays store?","code":"","reference":"","choices":[{"text":"unordered collections of numerc values","answer":false,"code":false},{"text":"key-value pairs of any C# supported type","answer":false,"code":false},{"text":"class and struct instances","answer":false,"code":false},{"text":"multiple variables, or collections, of the same type","answer":true,"code":false}]},{"id":31,"question":"Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?","code":"`enum AppState { OffLine, Loading, Ready }`","reference":"`enum AppState { OffLine, Loading, Ready }`","choices":[{"text":"string currentState = (string)AppState.Loading;","answer":false,"code":false},{"text":"string currentState = AppState.Loading.integralVal;","answer":false,"code":false},{"text":"int currentState = AppState.Loading.rawValue;","answer":false,"code":false},{"text":"int currentState = (int)AppState.Loading;","answer":true,"code":false}]},{"id":32,"question":"What character would you use to start a regular expression pattern at a word boundary?","code":"","reference":"","choices":[{"text":"d","answer":false,"code":false},{"text":"a","answer":false,"code":false},{"text":"b","answer":true,"code":false},{"text":"w","answer":false,"code":false}]},{"id":33,"question":"To conform to the following interface, which of its members need to be implemented?","code":"cs public interface INameble {     string FirstName { get; set; }     string LastName { get; } }","reference":"```","choices":[{"text":"Both the FirstName and LastName properties need to be implemented.","answer":true,"code":false},{"text":"Neither, they are both optional.","answer":false,"code":false},{"text":"Only the LastName property needs to be implemented.","answer":false,"code":false},{"text":"Only the FirstName property needs to be implemented.","answer":false,"code":false}]},{"id":34,"question":"You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?","code":"","reference":"","choices":[{"text":"at runtime","answer":false,"code":false},{"text":"at compile time","answer":false,"code":false},{"text":"only when required","answer":true,"code":false},{"text":"only when programmatically loaded","answer":false,"code":false}]},{"id":35,"question":"What is most accurate description of a regular expression?","code":"","reference":"","choices":[{"text":"A regular expression is a C# tool used to parse HTML","answer":false,"code":false},{"text":"A regular expression is a special text string for describing a search patters.","answer":true,"code":false},{"text":"A regular expression allows a variable to be passed by reference.","answer":false,"code":false},{"text":"A regular expression allows a class to conform to the Equatable protocol.","answer":false,"code":false}]},{"id":36,"question":"Why would you use a class field in C#","code":"","reference":"","choices":[{"text":"To define behaviours of the class","answer":false,"code":false},{"text":"To hold information and data contained in the class object","answer":true,"code":false},{"text":"To communicate between classes and object","answer":false,"code":false},{"text":"To store the class definition value","answer":false,"code":false}]},{"id":37,"question":"When would you use generics in your code?","code":"","reference":"","choices":[{"text":"to increase code performance","answer":false,"code":false},{"text":"all of these answers","answer":true,"code":false},{"text":"when code reuse is a priority","answer":false,"code":false},{"text":"when type safety is important","answer":false,"code":false}]},{"id":38,"question":"What prints to the console when this code is executed?","code":"cs public delegate void AuthCallback(bool validUser); public static AuthCallback loginCallback = Login; public static void Login() {     Console.WriteLine(\"Valid user!\"); } public static void Main(string[] args) {     loginCallback(true); }","reference":"```","choices":[{"text":"Login successful...","answer":false,"code":false},{"text":"Valid user!","answer":false,"code":false},{"text":"an error, because the method signature of Login doesn't match the delegate","answer":true,"code":false},{"text":"Login successful... Valid user!","answer":false,"code":false}]},{"id":39,"question":"How would you declare a sealed class named User?","code":"","reference":"","choices":[{"text":"public class User","answer":false,"code":false},{"text":"abstract User {}","answer":false,"code":false},{"text":"sealed class User","answer":true,"code":false},{"text":"private sealed class User","answer":false,"code":false}]},{"id":40,"question":"What is the correct syntax for a new generic list of strings named contacts? (similar to Q26)","code":"","reference":"","choices":[{"text":"`var contacts = new List<string>();`","answer":true,"code":false},{"text":"`var contacts = new List(string);`","answer":false,"code":false},{"text":"`public List<string names> contacts = new List<string names>();`","answer":false,"code":false},{"text":"`public List(string names) contacts = new List(string names);`","answer":false,"code":false}]},{"id":41,"question":"What is the difference between non-static and static classes?","code":"","reference":"","choices":[{"text":"non-static classes need to be initialized before use, while static classes do not","answer":true,"code":false},{"text":"non-static classes are accessible only from an interface while static classes are accessible from anywhere","answer":false,"code":false},{"text":"non-static classes need to initialize all class members at runtime, while static classes do not","answer":false,"code":false},{"text":"non-static classes do not need to be initialized while static classes do","answer":false,"code":false}]},{"id":42,"question":"Which characteristic prevents this code from compiling?","code":"`public int age=\"28\"`","reference":"`public int age=\"28\"`","choices":[{"text":"type safety","answer":true,"code":false},{"text":"single inheritance","answer":false,"code":false},{"text":"dependency injection","answer":false,"code":false},{"text":"multiple inheritance","answer":false,"code":false}]},{"id":43,"question":"How would you serialize this class?","code":"`public class User {}`","reference":"`public class User {}`","choices":[{"text":"Mark the User class with the `DeserializableAttribute`.","answer":false,"code":false},{"text":"Declare the class as `public serializable class User {}`.","answer":false,"code":false},{"text":"Mark the User class with the `SerializableAttribute` attribute.","answer":true,"code":false},{"text":"Declare the class as `private serializable class User {}`.","answer":false,"code":false}]},{"id":44,"question":"How would you write a delegate named ResultCallback with an int parameter named responseCode","code":"","reference":"","choices":[{"text":"public delegate ResultCallback(int responseCode)","answer":false,"code":false},{"text":"public delegate void ResultCallback<(int) responseCode>;","answer":false,"code":false},{"text":"public void delegate ResultCallback<int responseCode>;","answer":false,"code":false},{"text":"public delegate void ResultCallback(int responseCode);","answer":true,"code":false}]},{"id":45,"question":"What is the difference between a static and non-static method?","code":"","reference":"","choices":[{"text":"non-static methods always need to have a void return type","answer":false,"code":false},{"text":"non-static methods do not have access to static member variables","answer":false,"code":false},{"text":"static methods do not have to instantiate an instance of the class to call the method","answer":true,"code":false},{"text":"static methods always have to be public","answer":false,"code":false}]},{"id":46,"question":"What is the correct way to write an event named apiResult based on a delegate named ResultCallback?","code":"","reference":"","choices":[{"text":"public void event ResultCallback apiResult;","answer":false,"code":false},{"text":"public event ResultCallback(() -> apiResult);","answer":false,"code":false},{"text":"public event void ResultCallback","answer":false,"code":false},{"text":"public event ResultCallback apiResult;","answer":true,"code":false}]},{"id":47,"question":"When will the code inside finally block be executed in a try-catch statement?","code":"","reference":"","choices":[{"text":"if there is an error, it won't execute at all","answer":false,"code":false},{"text":"between the try and catch blocks","answer":false,"code":false},{"text":"after the try and catch blocks","answer":true,"code":false},{"text":"when the finally block overrides the catch block and executes in its place","answer":false,"code":false}]},{"id":48,"question":"What method correctly extends the string class?","code":"","reference":"","choices":[{"text":"public static string IsvalidName(this string i, string value) {}","answer":true,"code":false},{"text":"public static void IsvalidName(this string i, string value) {}","answer":false,"code":false},{"text":"public string IsvalidName(this string i, string value) {}","answer":false,"code":false},{"text":"public void IsvalidName(this string i, string value) {}","answer":false,"code":false}]},{"id":49,"question":"How are C# classses limited?","code":"","reference":"","choices":[{"text":"They do not support multiple inheritance.","answer":true,"code":false},{"text":"They support multiple inheritance.","answer":false,"code":false},{"text":"They can have only a set number of properties.","answer":false,"code":false},{"text":"They can have only a set number of methods.","answer":false,"code":false}]},{"id":50,"question":"What function do namespaces perform?","code":"","reference":"","choices":[{"text":"Namespaces calculate code coverage at runtime.","answer":false,"code":false},{"text":"Namespaces compile application code together at compile time.","answer":false,"code":false},{"text":"Namespaces group code together into a single repository.","answer":false,"code":false},{"text":"Namespaces separate code into groupings, control access, and void naming collisions.","answer":true,"code":false}]},{"id":51,"question":"What is the correct way to write a public property with a private backing field?","code":"cs private int _password; pubic int Password = { get; set; }  cs private int _password; public int Password = _password;  cs private int _password; public int Password {   get -> _password;   set-> _password = value; }  cs private int _password; public int Password {   get { return _password; }   set { _password = value; } }","choices":[{"text":"cs\nprivate int _password;\npubic int Password = { get; set; }\n","code":true,"answer":false},{"text":"cs\nprivate int _password;\npublic int Password = _password;\n","code":true,"answer":false},{"text":"cs\nprivate int _password;\npublic int Password\n{\n  get -> _password;\n  set-> _password = value;\n}\n","code":true,"answer":false},{"text":"cs\nprivate int _password;\npublic int Password\n{\n  get { return _password; }\n  set { _password = value; }\n}\n","code":true,"answer":true}]},{"id":52,"question":"What is a thread pool?","code":"","reference":"","choices":[{"text":"a collection of synchronous methods created during initialization that cannot be reused","answer":false,"code":false},{"text":"a collection of threads created during initialization that can be reused","answer":true,"code":false},{"text":"a collection of threads only recognized at compile time that can be reused","answer":false,"code":false},{"text":"a collection of asynchronous methods created at compile time that cannot be reused","answer":false,"code":false}]},{"id":53,"question":"What is the most accurate description of a regular expression?","code":"","reference":"","choices":[{"text":"A regular expressions allows a variable to be passed by reference","answer":false,"code":false},{"text":"A regular expression allows a class to conform to the Equatable protocol","answer":false,"code":false},{"text":"A regular expression is a C# tool used to parse HTML","answer":false,"code":false},{"text":"A regular expression is a special text string for describing a search pattern","answer":true,"code":false}]},{"id":54,"question":"When an object in C# is serialized, what is it converted to?","code":"","reference":"","choices":[{"text":"XML","answer":false,"code":false},{"text":"JSON","answer":false,"code":false},{"text":"byte stream","answer":true,"code":false},{"text":"value stream","answer":false,"code":false}]},{"id":55,"question":"What is a delegate","code":"","reference":"","choices":[{"text":"a variable that holds a reference to a value type and its content","answer":false,"code":false},{"text":"a specific value type that can be used only in callback methods","answer":false,"code":false},{"text":"a type that holds a reference to a method with a particular parameter list and return type","answer":true,"code":false},{"text":"a custom variable type that can be used in abstract classes","answer":false,"code":false}]},{"id":56,"question":"What are the four keywords associated with exception handling in C#?","code":"","reference":"","choices":[{"text":"try, catch, valid, invalid","answer":false,"code":false},{"text":"try, valid, finally, throw","answer":false,"code":false},{"text":"try, catch, finally, throw","answer":true,"code":false},{"text":"finally, throw, valid, invalid","answer":false,"code":false}]},{"id":57,"question":"What is the main difference between the is and as operators?","code":"","reference":"","choices":[{"text":"The is operator checks instance types, while the as operator checks the inherited type.","answer":false,"code":false},{"text":"The is operator checks primitive data types, while the as operator checks the object type.","answer":false,"code":false},{"text":"The as operator checks object type, while the is operator attempts to cast an object to a specific type.","answer":false,"code":false},{"text":"The is operator checks object type, while the as operator attempts to cast an object to a specific type.","answer":true,"code":false}]},{"id":58,"question":"What is the difference between finally and finalize blocks?","code":"","reference":"","choices":[{"text":"The finally block is called during the execution of a try and catch block, while the finalize method is called after garbage collection.","answer":false,"code":false},{"text":"The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.","answer":true,"code":false},{"text":"The finalize block is called before the execution of a try and catch block, while the finally method is called just before garbage collection.","answer":false,"code":false},{"text":"The finalize block is called during the execution of a try and catch block, while the finally method is called after garbage collection.","answer":false,"code":false}]},{"id":59,"question":"Your application has a value type called username that needs to be able to accept null values, but this is generating compile-time errors. How would you fix this in code?","code":"","reference":"","choices":[{"text":"Null<string> username = null;","answer":false,"code":false},{"text":"string? username = null;","answer":true,"code":false},{"text":"Type<string>? username = null;","answer":false,"code":false},{"text":"Optional<string> username = null;","answer":false,"code":false}]},{"id":60,"question":"Which code snippet correctly declares a custom exception named InvalidResponse?","code":"","reference":"","choices":[{"text":"struct InvalidResponse: Exception {}","answer":false,"code":false},{"text":"class InvalidResponse: Exception {}","answer":true,"code":false},{"text":"public Exception InvalidResponse = new Exception ();","answer":false,"code":false},{"text":"public Exception InvalidResponse () -> Exception;","answer":false,"code":false}]},{"id":61,"question":"How would you write an enum variable called AppState with values for Offline, Loading, and Ready?","code":"","reference":"","choices":[{"text":"enum AppState = [Offline, Loading, Ready]","answer":false,"code":false},{"text":"enum AppState {\"Offline\", \"Loading\", \"Ready\"}","answer":false,"code":false},{"text":"enum AppState = {Offline, Loading, Ready}","answer":false,"code":false},{"text":"enum AppState {Offline, Loading, Ready}","answer":true,"code":false}]},{"id":62,"question":"What is the main difference between a value type and a reference type?","code":"","reference":"","choices":[{"text":"A value type can be any primitive type, while reference types must be type-agnostic.","answer":false,"code":false},{"text":"A value type refers to another value, while a reference type refers to a value in memory.","answer":false,"code":false},{"text":"A value type stores an actual value, while a reference type is a pointer to a value.","answer":true,"code":false},{"text":"A value type is available only at runtime, while a reference type is available only at compile time.","answer":false,"code":false}]},{"id":63,"question":"What is the difference between the `break` and `continue` keywords?","code":"","reference":"","choices":[{"text":"The `break` keyword is used to break out of multiple iteration statements, while `continue` can only break out of code blocks that have single iterations.","answer":false,"code":false},{"text":"The `break` keyword literally breaks out of a control flow statement, while `continue` ignores the rest of the control statement or iteration and starts the next one.","answer":true,"code":false},{"text":"The `break` keyword literally breaks out of the current control flow code and stops it dead, while `continue` keeps executing the code after an exception is thrown.","answer":false,"code":false},{"text":"The `break` keyword jumps out of an iteration and then proceeds with the rest of the control flow code, while `continue` stops the executing code dead.","answer":false,"code":false}]},{"id":64,"question":"Which code snippet correctly declares a variable names userId with a public `get` and private `set`?","code":"","reference":"","choices":[{"text":"`public int userID <get, set>;`","answer":false,"code":false},{"text":"`public int userID [get, private set];`","answer":false,"code":false},{"text":"`public int userID { get; private set; }`","answer":true,"code":false},{"text":"`public int userID = { public get, private set};`","answer":false,"code":false}]}]