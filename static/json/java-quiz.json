[{"id":1,"question":"Given the string \"strawberries\" saved in a variable called fruit, what would `fruit.substring(2, 5)` return?","code":"**Reasoning:** The substring method is accepting two arguments.","reference":"**Reasoning:** The substring method is accepting two arguments.","choices":[{"text":"rawb","answer":false,"code":false},{"text":"raw","answer":true,"code":false},{"text":"awb","answer":false,"code":false},{"text":"traw","answer":false,"code":false},{"answer":false,"code":false},{"answer":false,"code":false},{"answer":false,"code":false},{"answer":false,"code":false},{"answer":false,"code":false}]},{"id":2,"question":"How can you achieve runtime polymorphism in Java?","code":"","reference":"","choices":[{"text":"method overloading","answer":false,"code":false},{"text":"method overrunning","answer":false,"code":false},{"text":"method overriding","answer":true,"code":false},{"text":"method calling","answer":false,"code":false}]},{"id":3,"question":"Given the following definitions, which of these expression will **NOT** evaluate to true?","code":"`boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;`","reference":"`boolean b1 = true, b2 = false; int i1 = 1, i2 = 2;`","choices":[{"text":"`(i1 | i2) == 3`","answer":false,"code":false},{"text":"`i2 && b1`","answer":true,"code":false},{"text":"`b1 || !b2`","answer":false,"code":false},{"text":"`(i1 ^ i2) < 4`","answer":false,"code":false}]},{"id":4,"question":"What is the output of this code?","code":"java 1: class Main { 2:   public static void main (String[] args) { 3:     int array[] = {1, 2, 3, 4}; 4:     for (int i = 0; i < array.size(); i++) { 5:        System.out.print(array[i]); 6:     } 7:   } 8: }","reference":"```","choices":[{"text":"It will not compile because of line 4.","answer":true,"code":false},{"text":"It will not compile because of line 3.","answer":false,"code":false},{"text":"123","answer":false,"code":false},{"text":"1234","answer":false,"code":false}]},{"id":5,"question":"Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?","code":"java interface Interface1 {     static void print() {         System.out.print(\"Hello\");     } } interface Interface2 {     static void print() {         System.out.print(\"World!\");     } }","reference":"```","choices":[{"text":"`super1.print(); super2.print();`","answer":false,"code":false},{"text":"`this.print();`","answer":false,"code":false},{"text":"`super.print();`","answer":false,"code":false},{"text":"`Interface1.print(); Interface2.print();`","answer":true,"code":false}]},{"id":6,"question":"What does the following code print?","code":"java String str = \"abcde\"; str.trim(); str.toUpperCase(); str.substring(3, 4); System.out.println(str);","reference":"```","choices":[{"text":"CD","answer":false,"code":false},{"text":"CDE","answer":false,"code":false},{"text":"D","answer":false,"code":false},{"text":"\"abcde\"","answer":true,"code":false}]},{"id":7,"question":"What is the result of this code?","code":"java class Main {     public static void main (String[] args){         System.out.println(print(1));     }     static Exception print(int i){         if (i>0) {             return new Exception();         } else {             throw new RuntimeException();         }     } }","reference":"```","choices":[{"text":"It will show a stack trace with a runtime exception.","answer":false,"code":false},{"text":"\"java.lang.Exception\"","answer":true,"code":false},{"text":"It will run and throw an exception.","answer":false,"code":false},{"text":"It will not compile.","answer":false,"code":false}]},{"id":8,"question":"Which class can compile given these declarations?","code":"java interface One {     default void method() {         System.out.println(\"One\");     } } interface Two {     default void method () {         System.out.println(\"One\");     } }  java class Three implements One, Two {     public void method() {         super.One.method();     } }  java class Three implements One, Two {     public void method() {         One.method();     } }  java class Three implements One, Two { }  java class Three implements One, Two {     public void method() {         One.super.method();     } }","reference":"```","choices":[{"text":"A","answer":false,"code":false},{"text":"B","answer":false,"code":false},{"text":"C","answer":false,"code":false},{"text":"D","answer":true,"code":false}]},{"id":9,"question":"What is the output of this code?","code":"java class Main {     public static void main (String[] args) {         List list = new ArrayList();         list.add(\"hello\");         list.add(2);         System.out.print(list.get(0) instanceof Object);         System.out.print(list.get(1) instanceof Integer);     } }","reference":"```","choices":[{"text":"The code does not compile.","answer":false,"code":false},{"text":"truefalse","answer":false,"code":false},{"text":"truetrue","answer":true,"code":false},{"text":"falsetrue","answer":false,"code":false}]},{"id":10,"question":"Given the following two classes, what will be the output of the Main class?","code":"java package mypackage; public class Math {     public static int abs(int num){         return num < 0 ? -num : num;     } } package mypackage.elementary; public class Math {     public static int abs (int num) {         return -num;     } }  java import mypackage.Math; import mypackage.elementary.*; class Main {     public static void main (String args[]){         System.out.println(Math.abs(123));     } }  **Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`","reference":"**Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`","choices":[{"text":"Lines 1 and 2 generate compiler errors due to class name conflicts.","answer":false,"code":false},{"text":"\"-123\"","answer":false,"code":false},{"text":"It will throw an exception on line 5.","answer":false,"code":false},{"text":"\"123\"","answer":true,"code":false}]},{"id":11,"question":"What is the result of this code?","code":"java 1: class MainClass { 2:  final String message(){ 3:      return \"Hello!\"; 4:  } 5: } 6: class Main extends MainClass { 7:  public static void main(String[] args) { 8:      System.out.println(message()); 9:  } 10: String message(){ 11:     return \"World!\"; 12:  } 13: }  **Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.","reference":"**Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method, and also note that Non-static method message() cannot be referenced from a static context.","choices":[{"text":"It will not compile because of line 10.","answer":true,"code":false},{"text":"\"Hello!\"","answer":false,"code":false},{"text":"It will not compile because of line 2.","answer":false,"code":false},{"text":"\"World!\"","answer":false,"code":false}]},{"id":12,"question":"Given this code, which command will output \"2\"?","code":"java class Main {     public static void main(String[] args) {         System.out.println(args[2]);     } }","reference":"```","choices":[{"text":"`java Main 1 2 \"3 4\" 5`","answer":false,"code":false},{"text":"`java Main 1 \"2\" \"2\" 5`","answer":true,"code":false},{"text":"`java Main.class 1 \"2\" 2 5`","answer":false,"code":false},{"text":"`java Main 1 \"2\" \"3 4\" 5`","answer":false,"code":false}]},{"id":13,"question":"What is the output of this code?","code":"java class Main {     public static void main(String[] args){         int a = 123451234512345;         System.out.println(a);     } }  **Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.","reference":"**Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore, this code will not compile as the number assigned to 'a' is larger than the int type can hold.","choices":[{"text":"\"123451234512345\"","answer":false,"code":false},{"text":"Nothing - this will not compile.","answer":true,"code":false},{"text":"a negative integer value","answer":false,"code":false},{"text":"\"12345100000\"","answer":false,"code":false}]},{"id":14,"question":"What is the output of this code?","code":"java class Main {     public static void main (String[] args) {         String message = \"Hello world!\";         String newMessage = message.substring(6, 12)             + message.substring(12, 6);         System.out.println(newMessage);     } }","reference":"```","choices":[{"text":"The code does not compile.","answer":false,"code":false},{"text":"A runtime exception is thrown.","answer":true,"code":false},{"text":"\"world!!world\"","answer":false,"code":false},{"text":"\"world!world!\"","answer":false,"code":false}]},{"id":15,"question":"How do you write a foreach loop that will iterate over ArrayList<Pencil>pencilCase?","code":"","reference":"","choices":[{"text":"`for (Pencil pencil : pencilCase) {}`","answer":true,"code":false},{"text":"`for (pencilCase.next()) {}`","answer":false,"code":false},{"text":"`for (Pencil pencil : pencilCase.iterator()) {}`","answer":false,"code":false},{"text":"`for (pencil in pencilCase) {}`","answer":false,"code":false}]},{"id":16,"question":"What does this code print?","code":"java System.out.print(\"apple\".compareTo(\"banana\"));","reference":"```","choices":[{"text":"`0`","answer":false,"code":false},{"text":"positive number","answer":false,"code":false},{"text":"negative number","answer":true,"code":false},{"text":"compilation error","answer":false,"code":false}]},{"id":17,"question":"You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?","code":"","reference":"","choices":[{"text":"`names.sort(Comparator.comparing(String::toString))`","answer":false,"code":false},{"text":"`Collections.sort(names)`","answer":false,"code":false},{"text":"`names.sort(List.DESCENDING)`","answer":true,"code":false},{"text":"`names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`","answer":false,"code":false}]},{"id":18,"question":"By implementing encapsulation, you cannot directly access the class's _ properties unless you are writing code inside the class itself.","code":"","reference":"","choices":[{"text":"private","answer":true,"code":false},{"text":"protected","answer":false,"code":false},{"text":"no-modifier","answer":false,"code":false},{"text":"public","answer":false,"code":false}]},{"id":19,"question":"Which is the most up-to-date way to instantiate the current date?","code":"**Explanation**: LocalDate is the newest class added in java 8","reference":"**Explanation**: LocalDate is the newest class added in java 8","choices":[{"text":"`new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())`","answer":false,"code":false},{"text":"`new Date(System.currentTimeMillis())`","answer":false,"code":false},{"text":"`LocalDate.now()`","answer":true,"code":false},{"text":"`Calendar.getInstance().getTime()`","answer":false,"code":false}]},{"id":20,"question":"Fill in the blank to create a piece of code that will tell whether `int0` is divisible by `5`:","code":"`boolean isDivisibleBy5 = _____`","reference":"`boolean isDivisibleBy5 = _____`","choices":[{"text":"`int0 / 5 ? true: false`","answer":false,"code":false},{"text":"`int0 % 5 == 0`","answer":true,"code":false},{"text":"`int0 % 5 != 5`","answer":false,"code":false},{"text":"`Math.isDivisible(int0, 5)`","answer":false,"code":false}]},{"id":21,"question":"How many times will this code print \"Hello World!\"?","code":"java class Main {     public static void main(String[] args){         for (int i=0; i<10; i=i++){             i+=1;             System.out.println(\"Hello World!\");         }     } }  **Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).","reference":"**Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).","choices":[{"text":"10 times","answer":true,"code":false},{"text":"9 times","answer":false,"code":false},{"text":"5 times","answer":false,"code":false},{"text":"infinite number of times","answer":false,"code":false}]},{"id":22,"question":"The runtime system starts your program by calling which function first?","code":"","reference":"","choices":[{"text":"print","answer":false,"code":false},{"text":"iterative","answer":false,"code":false},{"text":"hello","answer":false,"code":false},{"text":"main","answer":true,"code":false}]},{"id":23,"question":"What code would you use in Constructor A to call Constructor B?","code":"java public class Jedi {   /* Constructor A */   Jedi(String name, String species){}   /* Constructor B */   Jedi(String name, String species, boolean followsTheDarkSide){}   }    **Note:** This code won't compile, possibly broken code sample.","reference":"  **Note:** This code won't compile, possibly broken code sample.","choices":[{"text":"Jedi(name, species, false)","answer":false,"code":false},{"text":"new Jedi(name, species, false)","answer":false,"code":false},{"text":"this(name, species, false)","answer":true,"code":false},{"text":"super(name, species, false)","answer":false,"code":false}]},{"id":24,"question":"Which statement is **NOT** true?","code":"","reference":"","choices":[{"text":"An anonymous class may specify an abstract base class as its base type.","answer":false,"code":false},{"text":"An anonymous class does not require a zero-argument constructor.","answer":true,"code":false},{"text":"An anonymous class may specify an interface as its base type.","answer":false,"code":false},{"text":"An anonymous class may specify both an abstract class and interface as base types.","answer":false,"code":false}]},{"id":25,"question":"What will this program print out to the console when executed?","code":"java import java.util.LinkedList; public class Main {     public static void main(String[] args){         LinkedList<Integer> list = new LinkedList<>();         list.add(5);         list.add(1);         list.add(10);         System.out.println(list);     } }","reference":"```","choices":[{"text":"[5, 1, 10]","answer":true,"code":false},{"text":"[10, 5, 1]","answer":false,"code":false},{"text":"[1, 5, 10]","answer":false,"code":false},{"text":"[10, 1, 5]","answer":false,"code":false}]},{"id":26,"question":"What is the output of this code?","code":"java class Main {     public static void main(String[] args){        String message = \"Hello\";        for (int i = 0; i<message.length(); i++){           System.out.print(message.charAt(i+1));        }     } }","reference":"```","choices":[{"text":"\"Hello\"","answer":false,"code":false},{"text":"A runtime exception is thrown.","answer":true,"code":false},{"text":"The code does not compile.","answer":false,"code":false},{"text":"\"ello\"","answer":false,"code":false}]},{"id":27,"question":"Object-oriented programming is a style of programming where you organize your program around _ rather than _ and data rather than logic.","code":"","reference":"","choices":[{"text":"functions; actions","answer":false,"code":false},{"text":"objects; actions","answer":true,"code":false},{"text":"actions; functions","answer":false,"code":false},{"text":"actions; objects","answer":false,"code":false}]},{"id":28,"question":"What statement returns true if \"nifty\" is of type String?","code":"","reference":"","choices":[{"text":"`\"nifty\".getType().equals(\"String\")`","answer":false,"code":false},{"text":"`\"nifty\".getType() == String`","answer":false,"code":false},{"text":"`\"nifty\".getClass().getSimpleName() == \"String\"`","answer":false,"code":false},{"text":"`\"nifty\" instanceof String`","answer":true,"code":false}]},{"id":29,"question":"What is the output of this code?","code":"java import java.util.*; class Main { \tpublic static void main(String[] args) { \t\tList<Boolean> list = new ArrayList<>(); \t\tlist.add(true); \t\tlist.add(Boolean.parseBoolean(\"FalSe\")); \t\tlist.add(Boolean.TRUE); \t\tSystem.out.print(list.size()); \t\tSystem.out.print(list.get(1) instanceof Boolean); \t} }","reference":"```","choices":[{"text":"A runtime exception is thrown.","answer":false,"code":false},{"text":"3false","answer":false,"code":false},{"text":"2true","answer":false,"code":false},{"text":"3true","answer":true,"code":false}]},{"id":30,"question":"What is the result of this code?","code":"java 1: class Main { 2: \tObject message(){ 3: \t\treturn \"Hello!\"; 4: \t} 5: \tpublic static void main(String[] args) { 6: \t\tSystem.out.print(new Main().message()); 7: \t\tSystem.out.print(new Main2().message()); 8: \t} 9: } 10: class Main2 extends Main { 11: \tString message(){ 12: \t\treturn \"World!\"; 13: \t} 14: }","reference":"```","choices":[{"text":"It will not compile because of line 7.","answer":false,"code":false},{"text":"Hello!Hello!","answer":false,"code":false},{"text":"Hello!World!","answer":true,"code":false},{"text":"It will not compile because of line 11.","answer":false,"code":false}]},{"id":31,"question":"What method can be used to create a new instance of an object?","code":"","reference":"","choices":[{"text":"another instance","answer":false,"code":false},{"text":"field","answer":false,"code":false},{"text":"constructor","answer":true,"code":false},{"text":"private method","answer":false,"code":false}]},{"id":32,"question":"Which is the most reliable expression for testing whether the values of two string variables are the same?","code":"","reference":"","choices":[{"text":"string1 == string2","answer":false,"code":false},{"text":"string1 = string2","answer":false,"code":false},{"text":"string1.matches(string2)","answer":false,"code":false},{"text":"string1.equals(string2)","answer":true,"code":false}]},{"id":33,"question":"Which letters will print when this code is run?","code":"java public static void main(String[] args) { \ttry { \t\tSystem.out.println(\"A\"); \t\tbadMethod(); \t\tSystem.out.println(\"B\"); \t} catch (Exception ex) { \t\tSystem.out.println(\"C\"); \t} finally { \t\tSystem.out.println(\"D\"); \t} } public static void badMethod() { \tthrow new Error(); }  **Explanation**: `Error` is not inherited from `Exception`","reference":"**Explanation**: `Error` is not inherited from `Exception`","choices":[{"text":"A, B, and D","answer":false,"code":false},{"text":"A, C, and D","answer":false,"code":false},{"text":"C and D","answer":false,"code":false},{"text":"A and D","answer":true,"code":false}]},{"id":34,"question":"What is the output of this code?","code":"java class Main { \tstatic int count = 0; \tpublic static void main(String[] args) { \t\tif (count < 3) { \t\t\tcount++; \t\t\tmain(null); \t\t} else { \t\t\treturn; \t\t} \t\tSystem.out.println(\"Hello World!\"); \t} }","reference":"```","choices":[{"text":"It will throw a runtime exception.","answer":false,"code":false},{"text":"It will not compile.","answer":false,"code":false},{"text":"It will print \"Hello World!\" three times.","answer":true,"code":false},{"text":"It will run forever.","answer":false,"code":false}]},{"id":35,"question":"What is the output of this code?","code":"java import java.util.*; class Main { \tpublic static void main(String[] args) { \t\tString[] array = {\"abc\", \"2\", \"10\", \"0\"}; \t\tList<String> list = Arrays.asList(array); \t\tCollections.sort(list); \t\tSystem.out.println(Arrays.toString(array)); \t} }  **Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)","reference":"**Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)","choices":[{"text":"`[abc, 0, 2, 10]`","answer":false,"code":false},{"text":"The code does not compile.","answer":false,"code":false},{"text":"`[abc, 2, 10, 0]`","answer":false,"code":false},{"text":"`[0, 10, 2, abc]`","answer":true,"code":false}]},{"id":36,"question":"What is the output of this code?","code":"java class Main { \tpublic static void main(String[] args) { \t\tString message = \"Hello\"; \t\tprint(message); \t\tmessage += \"World!\"; \t\tprint(message); \t} \tstatic void print(String message){ \t\tSystem.out.print(message); \t\tmessage += \" \"; \t} }","reference":"```","choices":[{"text":"Hello World!","answer":false,"code":false},{"text":"HelloHelloWorld!","answer":true,"code":false},{"text":"Hello Hello World!","answer":false,"code":false},{"text":"Hello HelloWorld!","answer":false,"code":false}]},{"id":37,"question":"What is displayed when this code is compiled and executed?","code":"java public class Main { \tpublic static void main(String[] args) { \t\tint x = 5; \t\tx = 10; \t\tSystem.out.println(x); \t} }","reference":"```","choices":[{"text":"x","answer":false,"code":false},{"text":"null","answer":false,"code":false},{"text":"10","answer":true,"code":false},{"text":"5","answer":false,"code":false}]},{"id":38,"question":"Which approach cannot be used to iterate over a List named _theList_?","code":"java for (int i = 0; i < theList.size(); i++) {     System.out.println(theList.get(i)); }  java for (Object object : theList) {     System.out.println(object); }  java Iterator it = theList.iterator(); for (it.hasNext()) {     System.out.println(it.next()); }  java theList.forEach(System.out::println);  **Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.","reference":"**Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.","choices":[{"text":"A","answer":false,"code":false},{"text":"B","answer":false,"code":false},{"text":"C","answer":true,"code":false},{"text":"D","answer":false,"code":false}]},{"id":39,"question":"What method signature will work with this code?","code":"`boolean healthyOrNot = isHealthy(\"avocado\");`","reference":"`boolean healthyOrNot = isHealthy(\"avocado\");`","choices":[{"text":"public void isHealthy(String avocado)","answer":false,"code":false},{"text":"boolean isHealthy(String string)","answer":true,"code":false},{"text":"public isHealthy(\"avocado\")","answer":false,"code":false},{"text":"private String isHealthy(String food)","answer":false,"code":false}]},{"id":40,"question":"Which are valid keywords in a Java module descriptor (module-info.java)?","code":"","reference":"","choices":[{"text":"provides, employs","answer":false,"code":false},{"text":"imports, exports","answer":false,"code":false},{"text":"consumes, supplies","answer":false,"code":false},{"text":"requires, exports","answer":true,"code":false}]},{"id":41,"question":"Which type of variable keeps a constant value once it is assigned?","code":"","reference":"","choices":[{"text":"non-static","answer":false,"code":false},{"text":"static","answer":false,"code":false},{"text":"final","answer":true,"code":false},{"text":"private","answer":false,"code":false}]},{"id":42,"question":"How does the keyword `volatile` affect how a variable is handled?","code":"","reference":"","choices":[{"text":"It will be read by only one thread at a time.","answer":false,"code":false},{"text":"It will be stored on the hard drive.","answer":false,"code":false},{"text":"It will never be cached by the CPU.","answer":true,"code":false},{"text":"It will be preferentially garbage collected.","answer":false,"code":false}]},{"id":43,"question":"What is the result of this code?","code":"java char smooch = 'x'; System.out.println((int) smooch);","reference":"```","choices":[{"text":"an alphanumeric character","answer":false,"code":false},{"text":"a negative number","answer":false,"code":false},{"text":"a positive number","answer":true,"code":false},{"text":"a ClassCastException","answer":false,"code":false}]},{"id":44,"question":"You get a NullPointerException. What is the most likely cause?","code":"","reference":"","choices":[{"text":"A file that needs to be opened cannot be found.","answer":false,"code":false},{"text":"A network connection has been lost in the middle of communications.","answer":false,"code":false},{"text":"Your code has used up all available memory.","answer":false,"code":false},{"text":"The object you are using has not been instantiated.","answer":true,"code":false}]},{"id":45,"question":"How would you fix this code so that it compiles?","code":"java public class Nosey { \tint age; \tpublic static void main(String[] args) { \t\tSystem.out.println(\"Your age is: \" + age); \t} }","reference":"```","choices":[{"text":"Make age static.","answer":true,"code":false},{"text":"Make age global.","answer":false,"code":false},{"text":"Make age public.","answer":false,"code":false},{"text":"Initialize age to a number.","answer":false,"code":false}]},{"id":46,"question":"Add a Duck called \"Waddles\" to the ArrayList **ducks**.","code":"java public class Duck { \tprivate String name; \tDuck(String name) {} }        `ducks.add(waddles);`       `ducks.add(waddles);`","reference":"      `ducks.add(waddles);`","choices":[{"text":"`Duck waddles = new Duck();`","answer":false,"code":false},{"text":"`Duck duck = new Duck(\"Waddles\");`","answer":false,"code":false},{"text":"`ducks.add(new Duck(\"Waddles\"));`","answer":true,"code":false},{"text":"`ducks.add(new Waddles());`","answer":false,"code":false}]},{"id":47,"question":"If you encounter `UnsupportedClassVersionError` it means the code was `___` on a newer version of Java than the JRE `___` it.","code":"","reference":"","choices":[{"text":"executed; interpreting","answer":false,"code":false},{"text":"executed; compiling","answer":false,"code":false},{"text":"compiled; executing","answer":true,"code":false},{"text":"compiled, translating","answer":false,"code":false}]},{"id":48,"question":"Given this class, how would you make the code compile?","code":"java public class TheClass {     private final int x; }  java public TheClass() {     x += 77; }  java public TheClass() {     x = null; }  java public TheClass() {     x = 77; }  java private void setX(int x) {     this.x = x; } public TheClass() {     setX(77); }  **Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.","reference":"**Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.","choices":[{"text":"A","answer":false,"code":false},{"text":"B","answer":false,"code":false},{"text":"C","answer":true,"code":false},{"text":"D","answer":false,"code":false}]},{"id":49,"question":"How many times f will be printed?","code":"java public class Solution {     public static void main(String[] args) {         for (int i = 44; i > 40; i--) {             System.out.println(\"f\");         }     } }","reference":"```","choices":[{"text":"4","answer":true,"code":false},{"text":"3","answer":false,"code":false},{"text":"5","answer":false,"code":false},{"text":"A Runtime exception will be thrown","answer":false,"code":false}]},{"id":50,"question":"Which statements about `abstract` classes are true?","code":"1. They can be instantiated. 2. They allow member variables and methods to be inherited by subclasses. 3. They can contain constructors.","reference":"```","choices":[{"text":"1, 2, and 3","answer":false,"code":false},{"text":"only 3","answer":false,"code":false},{"text":"2 and 3","answer":true,"code":false},{"text":"only 2","answer":false,"code":false}]},{"id":51,"question":"Which keyword lets you call the constructor of a parent class?","code":"","reference":"","choices":[{"text":"parent","answer":false,"code":false},{"text":"super","answer":true,"code":false},{"text":"this","answer":false,"code":false},{"text":"new","answer":false,"code":false}]},{"id":52,"question":"What is the result of this code?","code":"java   1: int a = 1;   2: int b = 0;   3: int c = a/b;   4: System.out.println(c);","reference":"```","choices":[{"text":"It will throw an ArithmeticException.","answer":true,"code":false},{"text":"It will run and output 0.","answer":false,"code":false},{"text":"It will not compile because of line 3.","answer":false,"code":false},{"text":"It will run and output infinity.","answer":false,"code":false}]},{"id":53,"question":"Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?","code":"","reference":"","choices":[{"text":"Add a static import.","answer":true,"code":false},{"text":"Declare local copies of the constant in your code.","answer":false,"code":false},{"text":"This cannot be done. You must always qualify references to static members with the class form which they came from.","answer":false,"code":false},{"text":"Put the static members in an interface and inherit from that interface.","answer":false,"code":false}]},{"id":54,"question":"Which keyword lets you use an interface?","code":"","reference":"","choices":[{"text":"extends","answer":false,"code":false},{"text":"implements","answer":true,"code":false},{"text":"inherits","answer":false,"code":false},{"text":"import","answer":false,"code":false}]},{"id":55,"question":"Why are ArrayLists better than arrays?","code":"","reference":"","choices":[{"text":"You don't have to decide the size of an ArrayList when you first make it.","answer":true,"code":false},{"text":"You can put more items into an ArrayList than into an array.","answer":false,"code":false},{"text":"ArrayLists can hold more kinds of objects than arrays.","answer":false,"code":false},{"text":"You don't have to decide the type of an ArrayList when you first make it.","answer":false,"code":false}]},{"id":56,"question":"Declare a variable that holds the first four digits of Π","code":"**Reasoning:** java public class TestReal {     public static void main (String[] argv)     {       double pi = 3.14159265;       //accuracy up to 15 digits       float pi2 = 3.141F;           //accuracy up to 6-7 digits       System.out.println (\"Pi=\" + pi);       System.out.println (\"Pi2=\" + pi2);     }   }   The default Java type which Java will be using for a float variable will be double. So, even if you declare any variable as float, what the compiler has to actually do is to assign a double value to a float variable, which is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.","reference":"```","choices":[{"text":"int pi = 3.141;","answer":false,"code":false},{"text":"decimal pi = 3.141;","answer":false,"code":false},{"text":"double pi = 3.141;","answer":true,"code":false},{"text":"float pi = 3.141;","answer":false,"code":false}]},{"id":57,"question":"Use the magic power to cast a spell","code":"java public class MagicPower {     void castSpell(String spell) {} }        `magicPower.castSpell();`","reference":"      `magicPower.castSpell();`","choices":[{"text":"`new MagicPower().castSpell(\"expecto patronum\")`","answer":true,"code":false},{"text":"`MagicPower magicPower = new MagicPower();`","answer":false,"code":false},{"text":"`MagicPower.castSpell(\"expelliarmus\");`","answer":false,"code":false},{"text":"`new MagicPower.castSpell();`","answer":false,"code":false}]},{"id":58,"question":"What language construct serves as a blueprint containing an object's properties and functionality?","code":"","reference":"","choices":[{"text":"constructor","answer":false,"code":false},{"text":"instance","answer":false,"code":false},{"text":"class","answer":true,"code":false},{"text":"method","answer":false,"code":false}]},{"id":59,"question":"What does this code print?","code":"java public static void main(String[] args) {     int x=5,y=10;     swapsies(x,y);     System.out.println(x+\" \"+y); } static void swapsies(int a, int b) {     int temp=a;     a=b;     b=temp; }","reference":"```","choices":[{"text":"10 10","answer":false,"code":false},{"text":"5 10","answer":true,"code":false},{"text":"10 5","answer":false,"code":false},{"text":"5 5","answer":false,"code":false}]},{"id":60,"question":"What is the result of this code?","code":"java try {     System.out.println(\"Hello World\"); } catch (Exception e) {     System.out.println(\"e\"); } catch (ArithmeticException e) {     System.out.println(\"e\"); } finally {     System.out.println(\"!\"); }","reference":"```","choices":[{"text":"Hello World","answer":false,"code":false},{"text":"It will not compile because the second catch statement is unreachable","answer":true,"code":false},{"text":"Hello World!","answer":false,"code":false},{"text":"It will throw runtime exception","answer":false,"code":false}]},{"id":61,"question":"Which is not a java keyword","code":"**Explanation:** `native` is a part of JNI interface","reference":"**Explanation:** `native` is a part of JNI interface","choices":[{"text":"finally","answer":false,"code":false},{"text":"native","answer":false,"code":false},{"text":"interface","answer":false,"code":false},{"text":"unsigned","answer":true,"code":false}]},{"id":62,"question":"Which operator would you use to find the remainder after division?","code":"","reference":"","choices":[{"text":"`%`","answer":true,"code":false},{"text":"`//`","answer":false,"code":false},{"text":"`/`","answer":false,"code":false},{"text":"`DIV`","answer":false,"code":false}]},{"id":63,"question":"Which choice is a disadvantage of inheritance?","code":"","reference":"","choices":[{"text":"Overridden methods of the parent class cannot be reused.","answer":false,"code":false},{"text":"Responsibilities are not evenly distributed between parent and child classes.","answer":false,"code":false},{"text":"Classes related by inheritance are tightly coupled to each other.","answer":true,"code":false},{"text":"The internal state of the parent class is accessible to its children.","answer":false,"code":false}]},{"id":64,"question":"Declare and initialize an array of 10 ints.","code":"","reference":"","choices":[{"text":"`Array<Integer> numbers = new Array<Integer>(10);`","answer":false,"code":false},{"text":"`Array[int","answer":false,"code":false},{"text":"`int[","answer":true,"code":false},{"text":"`int numbers[","answer":false,"code":false}]},{"id":65,"question":"Refactor this event handler to a lambda expression:","code":"java groucyButton.addActionListener(new ActionListener() {     @Override     public void actionPerformed(ActionEvent e) {         System.out.println(\"Press me one more time..\");     } });","reference":"```","choices":[{"text":"`groucyButton.addActionListener(ActionListener listener -> System.out.println(\"Press me one more time...\"));`","answer":false,"code":false},{"text":"`groucyButton.addActionListener((event) -> System.out.println(\"Press me one more time...\"));`","answer":true,"code":false},{"text":"`groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(\"Press me one more time...\");});`","answer":false,"code":false},{"text":"`groucyButton.addActionListener(() -> System.out.println(\"Press me one more time...\"));`","answer":false,"code":false}]},{"id":66,"question":"Which functional interfaces does Java provide to serve as data types for lambda expressions?","code":"","reference":"","choices":[{"text":"Observer, Observable","answer":false,"code":false},{"text":"Collector, Builder","answer":false,"code":false},{"text":"Filter, Map, Reduce","answer":false,"code":false},{"text":"Consumer, Predicate, Supplier","answer":true,"code":false}]},{"id":67,"question":"What is a valid use of the hashCode() method?","code":"","reference":"","choices":[{"text":"encrypting user passwords","answer":false,"code":false},{"text":"deciding if two instances of a class are equal","answer":true,"code":false},{"text":"enabling HashMap to find matches faster","answer":false,"code":false},{"text":"moving objects from a List to a HashMap","answer":false,"code":false}]},{"id":68,"question":"What kind of relationship does \"extends\" denote?","code":"","reference":"","choices":[{"text":"uses-a","answer":false,"code":false},{"text":"is-a","answer":true,"code":false},{"text":"has-a","answer":false,"code":false},{"text":"was-a","answer":false,"code":false}]},{"id":69,"question":"How do you force an object to be garbage collected?","code":"","reference":"","choices":[{"text":"Set object to null and call Runtime.gc()","answer":false,"code":false},{"text":"Set object to null and call System.gc()","answer":true,"code":false},{"text":"Set object to null and call Runtime.getRuntime().runFinalization()","answer":false,"code":false},{"text":"There is no way to force an object to be garbage collected","answer":false,"code":false}]},{"id":70,"question":"Java programmers commonly use design patterns. Some examples are the **_**, which helps create instances of a class, the **_**, which ensures that only one instance of a class can be created; and the **_**, which allows for a group of algorithms to be interchangeable.","code":"","reference":"","choices":[{"text":"static factory method; singleton; strategy pattern","answer":true,"code":false},{"text":"strategy pattern; static factory method; singleton","answer":false,"code":false},{"text":"creation pattern; singleton; prototype pattern","answer":false,"code":false},{"text":"singleton; strategy pattern; static factory method","answer":false,"code":false}]},{"id":71,"question":"Using Java's Reflection API, you can use _ to get the name of a class and _ to retrieve an array of its methods.","code":"","reference":"","choices":[{"text":"this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()","answer":true,"code":false},{"text":"this.getName(); this.getMethods()","answer":false,"code":false},{"text":"Reflection.getName(this); Reflection.getMethods(this)","answer":false,"code":false},{"text":"Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()","answer":false,"code":false}]},{"id":72,"question":"Which is not a valid lambda expression?","code":"","reference":"","choices":[{"text":"`a -> false;`","answer":false,"code":false},{"text":"`(a) -> false;`","answer":false,"code":false},{"text":"`String a -> false;`","answer":true,"code":false},{"text":"`(String a) -> false;`","answer":false,"code":false}]},{"id":73,"question":"Which access modifier makes variables and methods visible only in the class where they are declared?","code":"","reference":"","choices":[{"text":"public","answer":false,"code":false},{"text":"protected","answer":false,"code":false},{"text":"nonmodifier","answer":false,"code":false},{"text":"private","answer":true,"code":false}]},{"id":74,"question":"What type of variable can be assigned to only once?","code":"","reference":"","choices":[{"text":"private","answer":false,"code":false},{"text":"non-static","answer":false,"code":false},{"text":"final","answer":true,"code":false},{"text":"static","answer":false,"code":false}]},{"id":75,"question":"How would you convert a String to an Int?","code":"","reference":"","choices":[{"text":"`\"21\".intValue()`","answer":false,"code":false},{"text":"`String.toInt(\"21\")`","answer":false,"code":false},{"text":"`Integer.parseInt(\"21\")`","answer":true,"code":false},{"text":"`String.valueOf(\"21\")`","answer":false,"code":false}]},{"id":76,"question":"What method should be added to the Duck class to print the name Moby?","code":"java public class Duck {     private String name;     Duck(String name) {         this.name = name;     }     public static void main(String[] args) {         System.out.println(new Duck(\"Moby\"));     } }","reference":"```","choices":[{"text":"`public String toString() { return name; } `","answer":true,"code":false},{"text":"`public void println() { System.out.println(name); } `","answer":false,"code":false},{"text":"`String toString() { return this.name; } `","answer":false,"code":false},{"text":"`public void toString() { System.out.println(this.name); } `","answer":false,"code":false}]},{"id":77,"question":"Which operator is used to concatenate Strings in Java","code":"","reference":"","choices":[{"text":"`+`","answer":true,"code":false},{"text":"`&`","answer":false,"code":false},{"text":"`.`","answer":false,"code":false},{"text":"`-`","answer":false,"code":false}]},{"id":78,"question":"How many times does this loop print \"exterminate\"?","code":"java for (int i = 44; i > 40; i--) {     System.out.println(\"exterminate\"); }","reference":"```","choices":[{"text":"two","answer":false,"code":false},{"text":"four","answer":true,"code":false},{"text":"three","answer":false,"code":false},{"text":"five","answer":false,"code":false}]},{"id":79,"question":"What is the value of myCharacter after line 3 is run?","code":"java 1: public class Main { 2:   public static void main (String[] args) { 3:     char myCharacter = \"piper\".charAt(3); 4:   } 5: }","reference":"```","choices":[{"text":"p","answer":false,"code":false},{"text":"r","answer":false,"code":false},{"text":"e","answer":true,"code":false},{"text":"i","answer":false,"code":false}]},{"id":80,"question":"When should you use a static method?","code":"","reference":"","choices":[{"text":"when your method is related to the object's characteristics","answer":false,"code":false},{"text":"when you want your method to be available independently of class instances","answer":true,"code":false},{"text":"when your method uses an object's instance variable","answer":false,"code":false},{"text":"when your method is dependent on the specific instance that calls it","answer":false,"code":false}]},{"id":81,"question":"What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?","code":"","reference":"","choices":[{"text":"pass by reference","answer":false,"code":false},{"text":"pass by occurrence","answer":false,"code":false},{"text":"pass by value","answer":true,"code":false},{"text":"API call","answer":false,"code":false}]},{"id":82,"question":"In Java, what is the scope of a method's argument or parameter?","code":"","reference":"","choices":[{"text":"inside the method","answer":true,"code":false},{"text":"both inside and outside the method","answer":false,"code":false},{"text":"neither inside nor outside the method","answer":false,"code":false},{"text":"outside the method","answer":false,"code":false}]},{"id":83,"question":"What is the output of this code?","code":"java public class Main {   public static void main (String[] args) {     int[] sampleNumbers = {8, 5, 3, 1};     System.out.println(sampleNumbers[2]);   } }","reference":"```","choices":[{"text":"5","answer":false,"code":false},{"text":"8","answer":false,"code":false},{"text":"1","answer":false,"code":false},{"text":"3","answer":true,"code":false}]},{"id":84,"question":"Which change will make this code compile successfully?","code":"java 1: public class Main { 2:   String MESSAGE =\"Hello!\"; 3:   static void print(){ 4:     System.out.println(message); 5:   } 6:   void print2(){} 7: }  **Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`","reference":"**Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`","choices":[{"text":"Change line 2 to `public static final String message`","answer":false,"code":false},{"text":"Change line 6 to `public void print2(){}`","answer":false,"code":false},{"text":"Remove the body of the `print2` method and add a semicolon.","answer":false,"code":false},{"text":"Remove the body of the `print` method.","answer":true,"code":false}]},{"id":85,"question":"What is the output of this code?","code":"java import java.util.*; class Main {   public static void main(String[] args) {     String[] array = new String[]{\"A\", \"B\", \"C\"};     List<String> list1 = Arrays.asList(array);     List<String> list2 = new ArrayList<>(Arrays.asList(array));     List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\"));     System.out.print(list1.equals(list2));     System.out.print(list1.equals(list3));   } }","reference":"```","choices":[{"text":"falsefalse","answer":false,"code":false},{"text":"truetrue","answer":true,"code":false},{"text":"falsetrue","answer":false,"code":false},{"text":"truefalse","answer":false,"code":false}]},{"id":86,"question":"Which code snippet is valid?","code":"","reference":"","choices":[{"text":"`ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};`","answer":false,"code":false},{"text":"`ArrayList words = Arrays.asList(\"Hello\", \"World\");`","answer":false,"code":false},{"text":"`ArrayList<String> words = {\"Hello\", \"World\"};`","answer":false,"code":false},{"text":"`ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));`","answer":true,"code":false}]},{"id":87,"question":"What is the output of this code?","code":"java class Main {   public static void main(String[] args) {     StringBuilder sb = new StringBuilder(\"hello\");     sb.deleteCharAt(0).insert(0, \"H\").\" World!\";     System.out.println(sb);   } }","reference":"```","choices":[{"text":"A runtime exception is thrown.","answer":true,"code":false},{"text":"\"HelloWorld!\"","answer":false,"code":false},{"text":"\"hello\"","answer":false,"code":false},{"text":"????","answer":false,"code":false}]},{"id":88,"question":"How would you use the TaxCalculator to determine the amount of tax on $50?","code":"java class TaxCalculator {   static calculate(total) {     return total * .05;   } }  **Note:** This code won't compile, broken code sample","reference":"**Note:** This code won't compile, broken code sample","choices":[{"text":"TaxCalculator.calculate(50);","answer":true,"code":false},{"text":"new TaxCalculator.calculate(50);","answer":false,"code":false},{"text":"calculate(50);","answer":false,"code":false},{"text":"new TaxCalculator.calculate($50);","answer":false,"code":false}]},{"id":89,"question":"What is the output of this code?","code":"java  public class Main {     public static void main(String[] args) {       HashMap<String, Integer> pantry = new HashMap<>();       pantry.put(\"Apples\", 3);       pantry.put(\"Oranges\", 2);       int currentApples = pantry.get(\"Apples\");       pantry.put(\"Apples\", currentApples + 4);       System.out.println(pantry.get(\"Apples\"));     } }","reference":"```","choices":[{"text":"3","answer":false,"code":false},{"text":"4","answer":false,"code":false},{"text":"6","answer":false,"code":false},{"text":"7","answer":true,"code":false}]},{"id":90,"question":"Which characteristic does not apply to instances of java.util.HashSet=","code":"**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.","reference":"**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.","choices":[{"text":"uses hashcode of objects when inserted","answer":false,"code":false},{"text":"contains unordred elements","answer":false,"code":false},{"text":"contains unique elements","answer":false,"code":false},{"text":"contains sorted elements","answer":true,"code":false}]},{"id":91,"question":"What is the output?","code":"java import java.util.*; public class Main { \tpublic static void main(String[] args) \t{ \t\tPriorityQueue<Integer> queue = new PriorityQueue<>(); \t\tqueue.add(4); \t\tqueue.add(3); \t\tqueue.add(2); \t\tqueue.add(1); \t\twhile (queue.isEmpty() == false) { \t\t\tSystem.out.printf(\"%d\", queue.remove()); \t\t} \t} }","reference":"```","choices":[{"text":"1 3 2 4","answer":false,"code":false},{"text":"4 2 3 1","answer":false,"code":false},{"text":"1 2 3 4","answer":true,"code":false},{"text":"4 3 2 1","answer":false,"code":false}]},{"id":92,"question":"What will this code print, assuming it is inside the main method of a class?","code":"`System.out.println(\"hello my friends\".split(\" \")[0]);`","reference":"`System.out.println(\"hello my friends\".split(\" \")[0]);`","choices":[{"text":"my","answer":false,"code":false},{"text":"hellomyfriends","answer":false,"code":false},{"text":"hello","answer":true,"code":false},{"text":"friends","answer":false,"code":false}]},{"id":93,"question":"You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?","code":"","reference":"","choices":[{"text":"2","answer":false,"code":false},{"text":"When calling the put method, Java will throw an exception","answer":false,"code":false},{"text":"4","answer":false,"code":false},{"text":"3","answer":true,"code":false}]},{"id":94,"question":"Which class acts as root class for Java Exception hierarchy?","code":"","reference":"","choices":[{"text":"Clonable","answer":false,"code":false},{"text":"Throwable","answer":true,"code":false},{"text":"Object","answer":false,"code":false},{"text":"Serializable","answer":false,"code":false}]},{"id":95,"question":"Which class does not implement the java.util.Collection interface?","code":"**Explanation**: HashMap class implements Map interface.","reference":"**Explanation**: HashMap class implements Map interface.","choices":[{"text":"java.util.Vector","answer":false,"code":false},{"text":"java.util.ArrayList","answer":false,"code":false},{"text":"java.util.HashSet","answer":false,"code":false},{"text":"java.util.HashMap","answer":true,"code":false}]},{"id":96,"question":"You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?","code":"","reference":"","choices":[{"text":"`employees.collect(employee -> employee.getName());`","answer":false,"code":false},{"text":"`employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`","answer":false,"code":false},{"text":"`employees.stream().map(Employee::getName).collect(Collectors.toList());`","answer":true,"code":false},{"text":"`employees.stream().collect((e) -> e.getName());`","answer":false,"code":false}]},{"id":97,"question":"What is the correct return type for the `processFunction` method:","code":"____ processFunction(Integer number, Function<Integer, String> lambda) {     return lambda.apply(number); }","reference":"```","choices":[{"text":"Function<Integer, String>","answer":false,"code":false},{"text":"Integer","answer":false,"code":false},{"text":"String","answer":true,"code":false},{"text":"Consumer","answer":false,"code":false}]},{"id":98,"question":"This code does not compile. What needs to be changed so that it does?","code":"public enum Direction {     EAST(\"E\"),     WEST(\"W\"),     NORTH(\"N\"),     SOUTH(\"S\");     private final String shortCode;     public String getShortCode() {         return shortCode;     } }","reference":"```","choices":[{"text":"Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.","answer":true,"code":false},{"text":"Remove the `final` keyword for the field `shortCode`.","answer":false,"code":false},{"text":"All enums need to be defined on a single line of code.","answer":false,"code":false},{"text":"Add a setter method for the field `shortCode`.","answer":false,"code":false}]},{"id":99,"question":"Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?","code":"","reference":"","choices":[{"text":"try-catch-finally","answer":false,"code":false},{"text":"try-finally-close","answer":false,"code":false},{"text":"try-with-resources","answer":true,"code":false},{"text":"try-catch-close","answer":false,"code":false}]},{"id":100,"question":"What code should go in line 3?","code":"java class Main {     public static void main(String[] args) {         array[0] = new int[]{1, 2, 3};         array[1] = new int[]{4, 5, 6};         array[2] = new int[]{7, 8, 9};         for (int i = 0; i < 3; i++)             System.out.print(array[i][1]); //prints 258     } }","reference":"```","choices":[{"text":"`int[][","answer":false,"code":false},{"text":"`int[][","answer":true,"code":false},{"text":"`int[][","answer":false,"code":false},{"text":"`int[][","answer":false,"code":false}]},{"id":101,"question":"Is this an example of method overloading or overriding?","code":"java class Car {     public void accelerate() {} } class Lambo extends Car {     public void accelerate(int speedLimit) {}     public void accelerate() {} }","reference":"```","choices":[{"text":"neither","answer":false,"code":false},{"text":"both","answer":true,"code":false},{"text":"overloading","answer":false,"code":false},{"text":"overriding","answer":false,"code":false}]},{"id":102,"question":"Which choice is the best data type for working with money in Java?","code":"","reference":"","choices":[{"text":"float","answer":false,"code":false},{"text":"String","answer":false,"code":false},{"text":"double","answer":false,"code":false},{"text":"BigDecimal","answer":true,"code":false}]},{"id":103,"question":"Which statement about constructors is not ture?","code":"","reference":"","choices":[{"text":"A class can have multiple constructors with a different parameter list.","answer":false,"code":false},{"text":"You can call another constructor with `this` or `super`.","answer":false,"code":false},{"text":"A constructor does not define a return value.","answer":false,"code":false},{"text":"Every class must explicitly define a constructor without parameters.","answer":true,"code":false}]},{"id":104,"question":"What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?","code":"","reference":"","choices":[{"text":"Regular Expressions","answer":false,"code":false},{"text":"Reflection","answer":false,"code":false},{"text":"Generics","answer":true,"code":false},{"text":"Concurrency","answer":false,"code":false}]},{"id":105,"question":"What will be printed?","code":"java public class Berries{     String berry = \"blue\";     public static void main( String[] args ) {         new Berries().juicy( \"straw\" );     }     void juicy(String berry){         this.berry = \"rasp\";         System.out.println(berry + \"berry\");     } }","reference":"```","choices":[{"text":"raspberry","answer":false,"code":false},{"text":"strawberry","answer":true,"code":false},{"text":"blueberry","answer":false,"code":false},{"text":"rasp","answer":false,"code":false}]},{"id":106,"question":"What is the value of `forestCount` after this code executes?","code":"java Map<String, Integer> forestSpecies = new HashMap<>(); forestSpecies.put(\"Amazon\", 30000); forestSpecies.put(\"Congo\", 10000); forestSpecies.put(\"Daintree\", 15000); forestSpecies.put(\"Amazon\", 40000); int forestCount = forestSpecies.size();","reference":"```","choices":[{"text":"3","answer":true,"code":false},{"text":"4","answer":false,"code":false},{"text":"2","answer":false,"code":false},{"text":"When calling the put method, Java will throw an exception","answer":false,"code":false}]},{"id":107,"question":"What is a problem with this code?","code":"java import java.util.ArrayList; import java.util.Arrays; import java.util.List; class Main {     public static void main( String[] args ) {         List<String> list = new ArrayList<String>( Arrays.asList( \"a\", \"b\", \"c\" ) );         for( String value :list ){             if( value.equals( \"a\" ) ) {                 list.remove( value );             }         }         System.out.println(list); // outputs [b,c]     } }","reference":"```","choices":[{"text":"String should be compared using == method instead of equals.","answer":false,"code":false},{"text":"Modifying a collection while iterating through it can throw a ConcurrentModificationException.","answer":true,"code":false},{"text":"The List interface does not allow an argument of type String to be passed to the remove method.","answer":false,"code":false},{"text":"ArrayList does not implement the List interface.","answer":false,"code":false}]},{"id":108,"question":"How do you convert this method into a lambda expression?","code":"java public int square(int x){     return x * x; }","reference":"```","choices":[{"text":"`Function<Integer, Integer> squareLambda = (int x) -> { x * x };`","answer":false,"code":false},{"text":"`Function<Integer, Integer> squareLambda = () -> { return x * x };`","answer":false,"code":false},{"text":"`Function<Integer, Integer> squareLambda = x -> x * x;`","answer":true,"code":false},{"text":"`Function<Integer, Integer> squareLambda = x -> return x * x;`","answer":false,"code":false}]},{"id":109,"question":"Which choice is a valid implementation of this interface?","code":"java interface MyInterface {     int foo(int x); }  java public class MyClass implements MyInterface {     // ....     public void foo(int x){         System.out.println(x);     } }  java public class MyClass implements MyInterface {     // ....     public double foo(int x){         return x * 100;     } }  java public class MyClass implements MyInterface {     // ....     public int foo(int x){         return x * 100;     } }  java public class MyClass implements MyInterface {     // ....     public int foo(){         return 100;     } }","reference":"```","choices":[{"text":"A","answer":false,"code":false},{"text":"B","answer":false,"code":false},{"text":"C","answer":true,"code":false},{"text":"D","answer":false,"code":false}]},{"id":110,"question":"What is the result of this program?","code":"java interface Foo{     int x = 10; } public class Main{     public static void main( String[] args ) {         Foo.x = 20;         System.out.println(Foo.x);     } }","reference":"```","choices":[{"text":"10","answer":false,"code":false},{"text":"20","answer":false,"code":false},{"text":"null","answer":false,"code":false},{"text":"An error will occur when compiling.","answer":true,"code":false}]},{"id":111,"question":"Which statement must be inserted on line 1 to print the value true?","code":"1: 2: Optional<String> opt = Optional.of(val); 3: System.out.println(opt.isPresent());","reference":"```","choices":[{"text":"`Integer val = 15;`","answer":false,"code":false},{"text":"`String val = \"Sam\";`","answer":true,"code":false},{"text":"`String val = null;`","answer":false,"code":false},{"text":"`Optional<String> val = Optional.empty();`","answer":false,"code":false}]},{"id":112,"question":"What will this code print, assuming it is inside the main method of a class?","code":"java System.out.println(true && false || true); System.out.println(false || false && true);","reference":"```","choices":[{"text":"false </br> true","answer":false,"code":false},{"text":"true </br> true","answer":false,"code":false},{"text":"true </br> false","answer":true,"code":false},{"text":"false </br> false","answer":false,"code":false}]},{"id":113,"question":"What will this code print?","code":"java List<String> list1 = new ArrayList<>(); list1.add( \"One\" ); list1.add( \"Two\" ); list1.add( \"Three\" ); List<String> list2 = new ArrayList<>(); list2.add( \"Two\" ); list1.remove( list2 ); System.out.println(list1);","reference":"```","choices":[{"text":"`[Two]`","answer":false,"code":false},{"text":"`[One, Two, Three]`","answer":false,"code":false},{"text":"`[One, Three]`","answer":true,"code":false},{"text":"`Two`","answer":false,"code":false}]},{"id":114,"question":"Which code checks whether the characters in two Strings,named `time` and `money`, are the same?","code":"","reference":"","choices":[{"text":"`if(time <> money){}`","answer":false,"code":false},{"text":"`if(time.equals(money)){}`","answer":true,"code":false},{"text":"`if(time == money){}`","answer":false,"code":false},{"text":"`if(time = money){}`","answer":false,"code":false}]},{"id":115,"question":"An **_** is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An **_** is an unexpected event that an application may be able to deal with in order to continue execution.","code":"","reference":"","choices":[{"text":"exception,assertion","answer":false,"code":false},{"text":"AbnormalException, AccidentalException","answer":false,"code":false},{"text":"error, exception","answer":true,"code":false},{"text":"exception, error","answer":false,"code":false}]},{"id":116,"question":"Which keyword would not be allowed here?","code":"java class Unicorn {     _____ Unicorn(){} }","reference":"```","choices":[{"text":"static","answer":true,"code":false},{"text":"protected","answer":false,"code":false},{"text":"public","answer":false,"code":false},{"text":"void","answer":false,"code":false}]},{"id":117,"question":"Which OOP concept is this code an example of?","code":"java List[] myLists = {     new ArrayList<>(),     new LinkedList<>(),     new Stack<>(),     new Vector<>(), }; for (List list : myLists){     list.clear(); }  **Explanation:** switch between different implementations of the `List` interface","reference":"**Explanation:** switch between different implementations of the `List` interface","choices":[{"text":"composition","answer":false,"code":false},{"text":"generics","answer":false,"code":false},{"text":"polymorphism","answer":true,"code":false},{"text":"encapsulation","answer":false,"code":false}]},{"id":118,"question":"What does this code print?","code":"java String a = \"bikini\"; String b = new String(\"bikini\"); String c = new String(\"bikini\"); System.out.println(a == b); System.out.println(b == c);  **Explanation:** `== operator` compares the object reference. `String a = \"bikini\"; String b = \"bikini\";` would result in True. Here new creates a new object, so false. Use `equals() method` to compare the content.","reference":"**Explanation:** `== operator` compares the object reference. `String a = \"bikini\"; String b = \"bikini\";` would result in True. Here new creates a new object, so false. Use `equals() method` to compare the content.","choices":[{"text":"true; false","answer":false,"code":false},{"text":"false; false","answer":true,"code":false},{"text":"false; true","answer":false,"code":false},{"text":"true; true","answer":false,"code":false}]},{"id":119,"question":"Which is the problem with this code?","code":"java class Main { \tpublic static void main(String[] args) { \t\tList<String> list = new ArrayList<String>(Arrays.asList(\"a\",\"b\",\"c\")); \t\tfor (String value : list) { \t\t\tif (value.equals(\"a\")){ \t\t\t\tlist.remove(value); \t\t\t} \t\t} \t\tSystem.out.println(list); //outputs [b,c] \t} }","reference":"```","choices":[{"text":"ArrayList does not implement the `List` interface.","answer":false,"code":false},{"text":"The `List` interface does not allow an argument of type String to be passed to the remove method.","answer":false,"code":false},{"text":"Strings should be compared using `==` instead of `equals`.","answer":false,"code":false},{"text":"Modifying a collection while iterating through it can throw a ConcurrentModificationException","answer":true,"code":false}]},{"id":120,"question":"What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?","code":"","reference":"","choices":[{"text":"native","answer":false,"code":false},{"text":"volatile","answer":false,"code":false},{"text":"synchronized","answer":true,"code":false},{"text":"lock","answer":false,"code":false}]}]